// =======================================================================
// Essential CSS Concepts
// =======================================================================

// =======================================================================
// Build an NFT Site Intro

// =======================================================================
// Semantic HTML - Header, Main, Sector, Footer

// <header> - Site title, logo, and nav
// <section> - A stand-alone section
// <footer> - Copyright, Ts & Cs, ect.
// <main> The page's unique content

// =======================================================================
// Aside: Margins - strange behaviour

// When an element touches its parent, it;s top and bottom margins
// will merge with the margins of the parent element.

// This can be fixed by adding padding to the parent element.

// This is not an issue when you are using flexbox and grid.

// =======================================================================
// Grouping Selectors

// ID beats class, class beats element, element is last
// CSS reads top down
// element = 1 point
// class = 10 points
// id = 100 points

// =======================================================================
// CSS specificity and !important keyword

// =======================================================================
// Aside: buttons/links

// Buttons: For actions that affect the websites front-end or back-end

// Links: for navigation to somewhere on the same page, within the site, 
// or elsewhere on the internet.

// =======================================================================
// Aside: Inline-block

// Block elements
// Stack on top of each other.
// div, p, h1 are all examples of block elements.
// Set height and margin top and bottom

// Inline Elements
// Sit side by side
// span and a are examples of inline elements.
// cannot set height and margin top.

// =======================================================================
// Aside: Overflow

// overflow: hidden; hides excessive content. Useful for maintaining the
// layout but can elad to inaccessible content.

// overflow: scroll;
// adds a scrollbar to the tainer even if there is no overflow

// overflow: auto;
// only adds a scroll bar when needed.

// overflow-x and overflow-y
// control overflow behaviour seperately fopr horizontal and vertical
// content to some extent
// overflow-x: hidden and overflow-y: visible don't work together.

// =======================================================================
// CSS Fundamentals: Challenges
// =======================================================================

// =======================================================================
// CSS Fundamentals: Introduction

// =======================================================================
// CSS Fundamentals: Setting up the layout

// Add the image after the <h1>
// Remember to add alt!!!
// Center the text for the entire page
// Add a new div, give it a class, and assign it a width of 570px
// Center that div on the page

// Solution

body {
    text-align: center;
}

.container {
    width: 570px;
    margin: 0 auto;
}

// =======================================================================
// CSS Fundamentals: Google fonts

// Find 'Roboto' on Google fonts
// Make sure you get the "light" and the "black" weights
// Add the code needed to the HTML
// Set the font family for the entire page to Roboto

// =======================================================================
// CSS Fundamentals: Setting up the typography

// Font sizes
// h1: 60px
// h2: 42px
// h3: 36px
// body: 21px
// small: 16px

// Font weights
// black - 900
// body - 300

// =======================================================================
// CSS Fundamentals: Making things a little more fancy

// The title needs extra styling
// The link needs to be styled.

// h1: 80px
// h2: 60px
// bold must be on it's own line

//link color: #99D930
// link hover color: #131313

h1 span,
h2 span {
    font-weight: 900;
}

<span class="bold-text"></span>

.bold-text {
    font-weight: 900;
    display: block;
}

// =======================================================================
// CSS Fundamentals: Breathing Room

// Each "part" of the site needs 100px of space on the top and bottom

// Each "part" needs a different background color that extends the entire
// width of the viewport

// colors: #d7d7d7, #ffeaea, #eaf9ff    

// =======================================================================
// CSS Fundamentals: Playing with colors

// background color: #252525
// text color: #fff

// =======================================================================
// CSS Fundamentals: The finer details

// =======================================================================
// CSS Fundamentals: Creating buttons

// Include a hover and a focus state

// Use links rather than actual buttons

// normal state, background-color: #99d930, color: #252525
// hover state, background-color: #252525, color: #fff

// =======================================================================
// CSS Fundamentals: Fancier headings

// width 1px
// color #c4c4c4

// =======================================================================
// CSS Fundamentals: Working with what you have

### Instructions
#### All green text
- color: #99d930
- Font-weight: 900

####The headings
- h1: 80px
- h2: 60px

#### Button hover/focus
- background: #fff
- color: #252525


// =======================================================================
// Solo Project - Oldagram

// Create the first post
// Use semantic HTML
// Add hover effects to the icons

// stretch goal
// render out all of the posts using JS
// increase the likes when double clicking the post

// =======================================================================
// Build A Coworking Space Site
// =======================================================================

// =======================================================================
// Intro

// using margin: auto on flex children
// position: absolute & relative
// align-self
// position: fixed

// =======================================================================
// Aside: margin: auto on flexbox children

// <div class="meme-container" role="img" aria-label="A smiling dog">

// WHen setting position absolute and relative, it is the container,
// that should be set to postion: relative, and the element within the 
// container which should be set to absolute.
// Without the container set to relative, the element within the container,
// will just snap to the window. 

// =======================================================================
// Aside: Position Fixed

// Use position: absolute to position an element relative to a containing,
// element. The element scrolls with the content.

// Use position: fixed to lock an element in a position relative to the
// window. It maintains that position even when scrolling.

// =======================================================================
// Aside: z-index

// the z axis order of positioned elements and their descendants
// position: relative, absolute, fixed, sticky

// =======================================================================
// Essential JavaScript concepts
// =======================================================================

// =======================================================================
// Intro

// =======================================================================
// Cookie Consent Intro

// =======================================================================
// Position the modal

/*
Challenge:
1. Make the modal sit on top of the other content. 
2. Make sure it is centrally aligned both horizontally
   and vertically (just like in the slide).
3. When it's positioned correctly, set its display 
   property to 'none'.
*/

position: fixed;
top: 0;
bottom: 0;
left: 0;
right: 0;
margin: auto;

// =======================================================================
// Aside: setTimeout

// With setTimeout() you can remove a block of code from the regular flow
// of the program, and execute it at a later point.

/*
Challenge:
1. Make the third console.log fire 3 seconds after 
   the answer appears.
*/

setTimeout(() => console.log('Ready for next question?'), 6000

// =======================================================================
// Aside: element.style

/*
Challenge
1. When the button is clicked and the answer revealed, 
   change the background color to #68e1fd and text color
   to #1434A4 just in the "question" div.
   ⚠️ You will run into a problem with the background 
   color. See if you can find the solution by googling.
2. When the answer is revealed, make the button disappear.
*/

const revealBtn = document.getElementById('reveal-btn')
const answer = document.getElementById('answer')
const question = document.getElementById('question')

revealBtn.addEventListener('click', () =>{
    answer.style.display = 'block'
    revealBtn.style.display = 'none'
    
    question.style.backgroundColor = '#68e1fd'
    question.style.color = '#1434A4'
})

// =======================================================================
// Make the modal reappear

/*
Challenge:
1. Take control of the 'modal' div with JavaScript.
2. Swap out our console.log for a line of code
   which will change the CSS 'display' property
   of our modal to 'inline'.
*/

const modal = document.getElementById('modal')

setTimeout(() => modal.style.display = 'inline', 1500)

// =======================================================================
// Close the modal

/*
Challenge:
1. Take control of the close button.
2. Use an event listener to set the display 
   property of the modal to 'none' when the
   close button is clicked.
*/

const modal = document.getElementById('modal')
const modalBtn = document.getElementById('modal-close-btn')

setTimeout(() => modal.style.display = 'inline', 1500)

modalBtn.addEventListener('click', () => {
    modalBtn.style.display = 'none'
    modal.style.display = 'none'
})

// =======================================================================
// Aside: Forms

// Forms: Getting input from users

Challenge:
1. Add inputs for the email and password
   fields. Remember to add all necessary
   properties.
2. Give the inputs labels and make it so
   that clicking on the label brings the 
   corresponding input into focus.    
 -->

    <form>
    <label for="astronautName">Astronaut Name 👩‍🚀</label>
    <input
            type="text"
            id="astronautName"
            name="astronautName"
            placeholder="Neil Armstrong"
            >
    <label for="astronautEmail">Astronaut Email</label>
    <input
            type="email"
            id="astronautEmail"
            name="astronautEmail"
            placeholder="n.armstrong@nasa.com"
            >

    <label for="password">Password</label>
    <input
            type="password"
            id="password"
            name="password"
            placeholder="*******"
            >
    </form>

// =======================================================================
// Add a form 1

<!-- 
Challenge: 
1. Create a form using form tags.
2. Add two inputs: one for name and one 
   for email address.
3. Give each input "type", "name" and 
   "placeholder" properties. You can see the
   placeholder text we need in the slide. 
-->	

    <form>
        <input
            type="text"
            id="fullName"
            name="fullName"
            placeholder="Enter your full name"
            >
        <input
            type="email"
            id="emailAddress"
            name="emailAddress"
            placeholder="Enter your email"
            >
    </form>

// =======================================================================
// Aside Validation Attributes

<!-- Challenge:
1. Use 'min' and 'max' to make sure that only ages of 
   21 and over and 120 and under can be inputted.
  -->

    <input 
    required
    type="number" 
    id="astronautAge" 
    name="astronautAge"
    placeholder="21"
    min="21"
    max="120"
    >

// =================================

<!-- Challenge:
1. Make sure users can only input a 3 character country 
   code. These can be lower or upper case but exactly 
   3 characters in length and no special characters or
   numbers.
   
   USA, FRA, GBR, SWE ✅
   US, UK, AB1, !USA ❌ 
  -->

//  You can use the following regex to match a 3-letter country code, 
//  either uppercase or lowercase:

\b[a-zA-Z]{3}\b

// \b  Word boundary, ensures you're matching exactly 3-letter words 
// (not part of a longer word)

// [a-zA-Z] Matches one uppercase or lowercase letter

// {3} Exactly 3 of the previous pattern (i.e. 3 letters)

    <input 
        required
        type="text" 
        id="astronautCountryCode" 
        name="astronautCountryCode"
        placeholder="Fra"
        pattern="\b[a-zA-Z]{3}\b"
    > 

// =======================================================================
// Aside: preventDefault

const loginForm = document.getElementById('login-form')

loginForm.addEventListener('submit', function(e){
    e.preventDefault()
})

// =======================================================================
// preventDefault Challenge

/*
Challenge:
1. Take control of the form element. 
2. Add an eventListener to the form to listen for a
   "submit" event.
3. When a user clicks "accept", prevent the default
   behaviour that triggers the refresh.
4. Log out "form submitted".
*/  

consentForm.addEventListener('submit', (e) => {
    e.preventDefault()
    console.log('form submitted')
})

// =======================================================================
// Add modal message

/*
Challenge:
1. Take control of the "modal-text" element. 
2. Make it so that when a user clicks on 
   the accept button, the HTML string below
   is inserted into the modal-text div.

<div class="modal-inner-loading">
    <img src="images/loading.svg" class="loading">
    <p id="uploadText">
        Uploading your data to the dark web...
    </p>
</div>
*/ 

consentForm.addEventListener('submit', function(e){
    e.preventDefault()
    
    modalText.innerHTML = `<div class="modal-inner-loading">
    <img src="images/loading.svg" class="loading">
    <p id="uploadText">
        Uploading your data to the dark web...
    </p>
</div>`

})
 

// =======================================================================
// Add modal messages 2

/*   
Challenge: 
1. Use a setTimeout to make the phrase "Uploading
   your data to the dark web" change to "Making the 
   sale..." after 1.5 seconds.
⚠️ Do not change the loading svg!
*/   

consentForm.addEventListener('submit', function(e){
    e.preventDefault()
    modalText.innerHTML = `
    <div class="modal-inner-loading">
        <img src="images/loading.svg" class="loading">
        <p id="upload-text">Uploading your data to the dark web...</p>
    </div>` 
    
    setTimeout(function(){
        document.getElementById('upload-text').innerText = `Making the sale...`
    }, 1500) 

})

// =======================================================================
// Add modal messages 3

/*   
Challenge: 
1. Make it so that 1.5 seconds after seeing the 
    "Making the sale..." message, the modal is 
    cleared of its content and the following 
    string of HTML is displayed instead.
    
    `<h2>Thanks you sucker! </h2>
    <p>We just sold the rights to your eternal soul.</p>
    <div class="idiot-gif">
        <img src="images/pirate.gif">
    </div>
    ` 
*/

setTimeout(function(){
    document.getElementById('modal-inner').innerHTML = `
    <h2>Thanks you sucker! </h2>
    <p>We just sold the rights to your eternal soul.</p>
    <div class="idiot-gif">
        <img src="images/pirate.gif">
    </div>
` 
}, 3000)


// =======================================================================
// Aside: FormData

// Using FormData to store submitted form information into an object

const loginForm = document.getElementById('login-form')

loginForm.addEventListener('submit', function(e){
    e.preventDefault()
    
    const loginFormData = new FormData(loginForm)
    console.log(loginFormData)
})

// =======================================================================
// Form Data 1

/*   
Challenge: 
1. Inside the body of this event listener, 
   create a const and set it equals to a new 
   instance of FormData which takes in our HTML 
   form element as a parameter.
2. Log out the const (you should just get 
   a FormData object).
*/ 

const modalFormData = new FormData(consentForm)
console.log(modalFormData)

// =======================================================================
// Aside: FormData methods

// .get() - goes into the object and extracts the values specified.

<input 
    type="text" 
    id="astronautName" 
    name="astronautName"
    placeholder="Neil Armstrong"
    required
    >

const name = loginFormData.get('astronautName')
const email = loginFormData.get('astronautEmail')
const password = loginFormData.get('astronautPassword')
console.log(name) 

// =======================================================================
// Aside: Disabling elements

/*
Challenge:
1. Disable the 'Add to Cart' button when 
   quantity is at zero. Remember: quantity
   will be at zero when the page loads!
*/ 

// =======================================================================
// Disable the close button

modalCloseBtn.disabled = true

// =======================================================================
// Aside: classlist.toggle

<div class="container" id="container">

.reverse{
    flex-direction: row-reverse;
}

sortBtn.addEventListener('click', function(){
    container.classList.toggle('reverse')
})


// =======================================================================
// Pumpkin's Purrfect Meme Picker
// =======================================================================

// =======================================================================
// Aside: for of

const characters = [
    {
        title: 'Ninja',
        emoji: '🥷',
        powers: ['agility', 'stealth', 'aggression'],
    },
    {
        title: 'Sorcerer',
        emoji: '🧙',
        powers: ['magic', 'invisibility', 'necromancy'],
    },
    {
        title: 'Ogre',
        emoji: '👹',
        powers: ['power', 'stamina', 'shapeshifting'],
    },
    {
        title: 'Unicorn',
        emoji: '🦄',
        powers: [ 'flight', 'power', 'purity'],
    }
]

/*
Challenge:
1. Nest a for of inside this for of to iterate over 
   the powers array for each character. Log out each 
   power.
*/

for (let character of characters){
    for (let power of character.powers){
        console.log(power)
    }
}

// magic
// invisibility
// necromancy...

// =======================================================================
// Use a for of

/*
Challenge:
1. Set up a "for of" in getEmotionsArray to iterate 
   over the data.
2. For now, just log out each cat object individually.
*/

const catsData = [
    {
        emotionTags: ["moody"],
        isGif: false,
        image: "angry.jpeg",
        alt: "A cat looking moody",
    },
    {
        emotionTags: ["moody", "insomniac"],
        isGif: false,
        image: "angry2.jpeg",
        alt: "A cat looking moody",
    },
    {
        emotionTags: ["moody"],
        isGif: false,
        image: "angry3.jpeg",
        alt: "A cat looking moody",
    },
    {
        emotionTags: ["confused", "sad"],
        isGif: false,
        image: "confused.jpeg",
        alt: "A cat looking confused",
    },
    {
        emotionTags: ["dominant", "moody"],
        isGif: false,
        image: "dominant.jpeg",
        alt: "A cat looking dominant",
    },
    {
        emotionTags: ["happy", "relaxed"],
        isGif: false,
        image: "happy.jpeg",
        alt: "A cat looking happy",
    },
    {
        emotionTags: ["hungry"],
        isGif: false,
        image: "hungry.jpeg",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["hungry"],
        isGif: false,
        image: "hungry1.jpeg",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["insomniac"],
        isGif: false,
        image: "insomnia.jpeg",
        alt: "A cat looking insomniac",
    },
    {
        emotionTags: ["insomniac"],
        isGif: false,
        image: "insomnia1.jpeg",
        alt: "A cat looking insomniac",
    },
    {
        emotionTags: ["relaxed"],
        isGif: false,
        image: "lazy.jpeg",
        alt: "A cat looking lazy",
    },
    {
        emotionTags: ["scared"],
        isGif: false,
        image: "nervous.jpeg",
        alt: "A cat looking nervous",
    },
    {
        emotionTags: ["sad"],
        isGif: false,
        image: "sad.jpeg",
        alt: "A cat looking sad",
    },
    {
        emotionTags: ["sad", "moody"],
        isGif: false,
        image: "sad1.jpeg",
        alt: "A cat looking sad",
    },
    {
        emotionTags: ["moody"],
        isGif: true,
        image: "angry.gif",
        alt: "A cat looking moody",
    },
    {
        emotionTags: ["moody"],
        isGif: true,
        image: "angry2.gif",
        alt: "A cat looking angry",
    },
    {
        emotionTags: ["confused"],
        isGif: true,
        image: "confused2.gif",
        alt: "A cat looking confused",
    },
    {
        emotionTags: ["dominant"],
        isGif: true,
        image: "dominant.gif",
        alt: "A cat looking dominant",
    },
    {
        emotionTags: ["happy"],
        isGif: true,
        image: "happy.gif",
        alt: "A cat looking happy",
    },
    {
        emotionTags: ["hungry", "sad", "confused"],
        isGif: true,
        image: "confused.gif",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["hungry"],
        isGif: true,
        image: "hungry.gif",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["hungry"],
        isGif: true,
        image: "hungry2.gif",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["insomniac", "scared"],
        isGif: true,
        image: "insomnia2.gif",
        alt: "A cat looking insomniac",
    },
    {
        emotionTags: ["relaxed"],
        isGif: true,
        image: "lazy.gif",
        alt: "A cat looking relaxed",
    },
    {
        emotionTags: ["relaxed"],
        isGif: true,
        image: "relaxed2.gif",
        alt: "A cat looking relaxed",
    },
    {
        emotionTags: ["scared", "sad"],
        isGif: true,
        image: "nervous.gif",
        alt: "A cat looking nervous",
    },
    {
        emotionTags: ["scared"],
        isGif: true,
        image: "nervous2.gif",
        alt: "A cat looking scared",
    },
    {
        emotionTags: ["sad"],
        isGif: true,
        image: "sad.gif",
        alt: "A cat looking sad",
    },
]

function getEmotionsArray(cats){
    for (let cat of cats) {
        console.log(cat)
    }
}

getEmotionsArray(catsData)

// {emotionTags: ['moody'], isGif: false, image: 'angry.jpeg', alt: 'A cat looking moody'}
// {emotionTags: ['moody', 'insomniac'], isGif: false, image: 'angry2.jpeg', alt: 'A cat looking moody'}
// {emotionTags: ['moody'], isGif: false, image: 'angry3.jpeg', alt: 'A cat looking moody'}

// =======================================================================
// Nest the for of

/*
Challenge:
1. Add a nested "for of" to log out just 
   the emotions from the emotionTags array 
   in each object.
*/  

function getEmotionsArray(cats){
    for (let cat of cats){
        for (let emotions of cat.emotionTags)
        console.log(emotions)
    }
}

// ===============================

/*
Challenge:
1. Set up a const and initialise it with 
   an empty array.
2. Instead of logging out each emotion, 
   push each one to the new array.
3. At the end of the function, log out the 
   const holding the new array.
*/ 

function getEmotionsArray(cats){
    const emptyEmotionsArray = []
    for (let cat of cats){
        for (let emotion of cat.emotionTags){
            emptyEmotionsArray.push(emotion)
        }
        
    }
    console.log(emptyEmotionsArray)
}

// =======================================================================
// Render out the emotions 1

/*
Challenge:
1. Have the new function "renderEmotionsRadios" 
   take in a single parameter. Name that parameter
   "cats". 
2. Inside renderEmotionsRadios, set up a const called 
   "emotions" and set it equals to whatever is returned 
   by calling getEmotionsArray, passing in "cats" as an 
   argument.
3. For now, renderEmotionsRadios should just log out 
   "emotions".
4. Call renderEmotionsRadios passing in catsData.
*/

function renderEmotionsRadios(cats){
    const emotions = getEmotionsArray(cats)
    
    console.log(emotions)
}

renderEmotionsRadios(catsData)

// =======================================================================
// Render out the emotions 2

/*
Challenge:
1. Take control of the 'emotion-radios' div.
2. In renderEmotionsRadios, set up a let 
   to hold our string of HTML. You can initialise
   it with an empty string.
3. Iterate over "emotions" and put each emotion 
in a <p> tag and then add them to the let you 
created in step 2. 
4. Render the string to the 'emotion-radios' div.
*/ 

const emotionRadios = document.getElementById('emotion-radios')

function renderEmotionsRadios(cats){
    const emotions = getEmotionsArray(cats)
    
    let emotionsString = ''
    
    emotions.forEach((emotion) => emotionsString += `<p>${emotion}</p>`)
    
    emotionRadios.innerHTML = emotionsString
    
}

renderEmotionsRadios(catsData)

// ===============================

// Instructor Solution

function renderEmotionsRadios(cats){
    let radioItems = ``
    const emotions = getEmotionsArray(cats)
    for (let emotion of emotions){
        radioItems += `<p>${emotion}</p>`
    }
    emotionRadios.innerHTML = radioItems
}

// =======================================================================
// Import the data

// data.js 

export const catsData = []

// index.js

import { catsData } from '/data.js'

// =======================================================================
// Aside: Radio Inputs

    <div class="radio">
        <input 
        type="radio"
        id="horses"
        value="horses"
        name="choice-radios"
        >
        <label for="horses">5 duck-sized horses</label>
    </div>

// =======================================================================
// Render the radio inputs

/*
Challenge:
1. Swap out `<p>${emotion}</p>` for HTML
   that will render a radio input for each
   emotion. Remember to use "type", "id", 
   "value", and "name" properties on each radio.
   ("id" and "value" can both be set to the
   "emotion").
2. Remember to give each radio a label.
   (What property does a label need?)
3. Enclose each individual radio input in this div:
   <div class="radio">
      **RADIO HERE**
   </div>
*/ 

function renderEmotionsRadios(cats){
    
    let radioItems = ``
    const emotions = getEmotionsArray(cats)
    for (let emotion of emotions){

        radioItems += `<div class="radio">
           <input
           type="radio"
           id="${emotion}"
           value="${emotion}"
           name="emotion-radio"
           >
        <label for="${emotion}">${emotion}</label> 
        </div>`
        
    emotionRadios.innerHTML = radioItems
    }
}

// =======================================================================
// Aside: .includes()

// A method for checking if an array holds a given value. 
// Returns true || false

/*
Challenge:
1. Add an if else to the event listener's function.
2. Only add an item to the shoppingList array if it 
   is not already in the shoppingList array.
3. If an item is a duplicate, clear the input field
   and log out "no duplicates".
*/

addItemBtn.addEventListener('click', function(){
        if (!shoppingList.includes(itemInput.value)) {
            shoppingList.push(itemInput.value)
            render() 
        } else {
          itemInput.value = '' 
          console.log('no duplicates')
        }    
})

// Instructor Solution

addItemBtn.addEventListener('click', function(){
        if(shoppingList.includes(itemInput.value)){
            console.log('no duplicates')
        }
        else{
            shoppingList.push(itemInput.value)
            render()        
        }
        itemInput.value = '' 
})


// =======================================================================
// remove duplicates

/*
Challenge:
1. Refactor this nested for of so that an 
   emotion is only pushed to emotionsArray
   if it is not already in emotionsArray.
   Extra kudos if you use the "logical not"
   operator - feel free to google it!
*/

function getEmotionsArray(cats){
    const emotionsArray = []
        
    for (let cat of cats){
        for (let emotion of cat.emotionTags){
            if (!emotionsArray.includes(emotion)) {
                emotionsArray.push(emotion)
            }
        }
    }
    return emotionsArray
}

// =======================================================================
// Aside: e.target

container.addEventListener('click', function(e){
    console.log(e.target.id)
})


// =======================================================================
// Get the id of the clicked option

/*
Challenge:
1. Add an eventListener to emotionRadios that will listen 
   out for any *change* in our radio buttons. When it detects
   a change, it should log out the id of the element that 
   was selected.
⚠️️ ️T️h️is won't work if the eventListener is listening out for a 
   'click'. Google what event to listen for - I've already 
   given you a clue!
*/

emotionRadios.addEventListener('change', (e) => {
    console.log(e.target.id)
})

// =======================================================================
// Aside: parentElement

// Accessing the parent when you know the children

container.addEventListener('click', function(e){
    console.log(document.getElementById(e.target.id).parentElement)
})

// <div class='product'>

container.addEventListener('click', function(e){
    document.getElementById(e.target.id).parentElement.style.backgroundColor = 'lightblue'
})

// =======================================================================
// Aside: classlist add/remove

/*
Challenge:
1. Remove the "unread" class from the 
   parentElement of the clicked element.
*/

document.addEventListener('click', function(e){

    document.getElementById(e.target.id).parentElement.classList.remove('unread')
    document.getElementById(e.target.id).parentElement.classList.add('read')
    
})

// =======================================================================
// Add colour to the selected emotion

/*
Challenge:
1. highlightCheckedOption should take control 
   of the selected radio input and add the CSS
   class of "highlight" to its classlist.
*/

emotionRadios.addEventListener('change', highlightCheckedOption)

function highlightCheckedOption(e){

    document.getElementById(e.target.id).classList.add('highlight')
}

// ===============================

/*
Challenge:
1. Change the code in line 8 so we add the 
   'highlight' class to the parent of the 
   selected input radio.
*/

emotionRadios.addEventListener('change', highlightCheckedOption)

function highlightCheckedOption(e){
    document.getElementById(e.target.id).parentElement.classList.add('highlight')

}

// =======================================================================
// Aside: getElementsByClassName

// Grabbing all elelemtns with a given class with one line of code

/*
Challenge:
1. Finish setting up this array of 
   elements with the "product" class.
2. Iterate over this array and remove 
   the "purchase" class and add the 
   "on-offer" class.
*/

const productsArray = document.getElementsByClassName('product')
for (let product of productsArray){
    product.classList.remove('purchased')
    product.classList.add('on-offer')
}

// =======================================================================
// Remove the highlight class

/*
Challenge:
1. Create an array of all items that have 
   the "radio" class.
2. Iterate over the array and remove the 
   "highlight" class from each one.
*/ 

function highlightCheckedOption(e){
    
    const radioArray = document.getElementsByClassName('radio')
    for (let radio of radioArray) {
        radio.classList.remove('highlight')
    }    
    
    document.getElementById(e.target.id).parentElement.classList.add('highlight')
}

// =======================================================================
// Aside: querySelector and why it's useful

// A more powerful way of grabbing elements

const submitBtn = document.getElementById('submit-btn')

submitBtn.addEventListener('click', function(){
    const checkedRadio = document.querySelector('input[type="radio"]:checked')
    console.log(checkedRadio.value)
})

// =======================================================================
// Connect the button

/*
Challenge:
1. Set up an eventlistener which calls a new
   function called "getMatchingCatsArray" when
   the "Get Image" button is clicked.
2. getMatchingCatsArray should save the value
   of the checked radio input to a const and 
   log out that const.
*/

const getMatchingCatsArray = (() => {
    const checkedRadio = document.querySelector('input[type="radio"]:checked').value
    console.log(checkedRadio)
})

getImageBtn.addEventListener('click', getMatchingCatsArray)

// =======================================================================
// Has an emotion been chosen?

/*
Challenge:
1. Add code to getMatchingCatsArray so 
   that the two existing lines of code 
   only run if an emotion has been selected.
*/

if (document.querySelector('input[type="radio"]:checked')) {
    const selectedEmotion = document.querySelector('input[type="radio"]:checked').value
    console.log(selectedEmotion)
}

// =======================================================================
// Aside: checkbox

// Getting a straight true or false form our users

<label for="accept-terms">
    I accept these terms and conditions
</label>
<input type="checkbox" id="accept-terms">

const continueBtn = document.getElementById('continue-btn')
const acceptTerms = document.getElementById('accept-terms')

continueBtn.addEventListener('click', function(){
    
    console.log(acceptTerms.checked)
})

// true

// ===============================

/*
Challenge:
1. Add a second checkbox to see if a user
   wants to be added to the mailing list.
2. If they do, log out "mail accepted" when 
   the continue button is clicked. If they
   don't, log out "mail not accapted."
*/

const continueBtn = document.getElementById('continue-btn')
const acceptTerms = document.getElementById('accept-terms')
const mailingBox = document.getElementById('mailing-list')

continueBtn.addEventListener('click', function(){
    
    if (acceptTerms.checked && mailingBox.checked){
        console.log("Terms accepted!")    
        console.log("mail accepted!")    
    } else if (acceptTerms.checked && !mailingBox.checked) {
        console.log("Terms accepted!")
        console.log("mail not accepted!")
    }
    else {
        console.log("Terms refused!")         
        console.log("mail not accepted!")
    }
})
// =======================================================================
// isGif

/*
Challenge:
1. Take control of the gifs only option checkbox.
2. Set up a const in getMatchingCatsArray to store 
   a boolean which will be set to true if the 
   "gifs only" option is checked and false if it's
   not. (Think what a good name for this const would 
   be.)
3. Log it out to check it's working.
*/

const getGifs = document.getElementById('gifs-only-option')

const getGifsCheck = getGifs.checked
console.log(getGifsCheck)

// =======================================================================
// Aside: filter()

// Getting only the elements we want from an array

/*
Challenge:
1. Get rid of the if statement and reduce the 
   logic in this function to just one line 
   of code.
*/

const adults = ages.filter((age) => age >= 18)

// ===============================

/*
Challenge:
1. Use the .filter method to create an array 
   called "children" which holds all of the ages 
   that are under 18.  
*/

const children = ages.filter((age) => age < 18)

// =======================================================================
// Aside: filter() 2

/*
Challenge:
1. Use the .filter() method to create an array
   of all of the thrillers.
*/

const thrillerGenre = series.filter(function(show){
    return show.genres.includes('thriller')
})

console.log(thrillerGenre)

// =======================================================================
// Find matches with .filter()

/*
Challenge:
1. Use the .filter() and .includes() methods to get 
   an array of cats which have the selected emotion
   in their emotionTags array. 
2. Store this array in a const and log it out to check
   it's working. Think: what would be a good name for the
   const?
*/  

const getMatchingEmotions = catsData.filter((emotion) => {
    return emotion.emotionTags.includes(selectedEmotion)
})

console.log(getMatchingEmotions)

// =======================================================================
// Animated GIFs Only

/*
Challenge:
1. Change the .filter() method's function so it returns an 
   array that only has GIFs if the 'GIFs only' option is 
   checked. If the 'GIFs only' option is not checked, it
   should return an array of all matches as it does now.
*/ 

const matchingCatsArray = catsData.filter(function(cat){
    if(isGif){
        return cat.emotionTags.includes(selectedEmotion) && cat.isGif
    }
    else{
        return cat.emotionTags.includes(selectedEmotion)
    }
    
})
console.log(matchingCatsArray)

// =======================================================================
// If there's only one cat...

/*
Challenge:
1. Set up an if to check if there is only one
   cat object in the array. If there is, log
   out that cat object (but not the whole array!)
   {}
   Test: "happy", animated GIFS only checked.
*/  

if (catsArray.length === 1) {
    catsArray.forEach((element) => {
        console.log(element)
    })
}

// =======================================================================
// If there's more than one cat

/*
Challenge:
1. If catsArray has more than one object, 
   select an object at random and log it out.
*/ 

function getSingleCatObject(){
    
    const catsArray = getMatchingCatsArray()
    
    if (catsArray.length === 1){
        console.log(catsArray[0])
    }
    else {
        const random = Math.floor(Math.random() * catsArray.length)
        console.log(catsArray[random])
    }
    
}

// =======================================================================
// RenderCat()

/*
Challenge:
1. Take the object that is returned by 
   getSingleCatObject and save it to a const 
   called "catObject".
2. Set memeModalInner’s innerHTML to the HTML 
   string below, remembering to insert the relevant 
   data from catObject to replace the UPPERCASE text.
3. Set memeModal’s display property to "flex". 
 
       `<img 
        class="cat-img" 
        src="./images/CAT IMAGE"
        alt="CAT ALT TEXT"
        >`
*/ 

function renderCat(){

    const catObject = getSingleCatObject()
    
    memeModalInner.innerHTML = 
    `
    <img 
        class="cat-img" 
        src="./images/${catObject.image}"
        alt="${catObject.alt}"
        >
    `

    memeModal.style.display = 'flex'
    
}

// =======================================================================
// Close the modal

/*
Challenge:
1. Wire up the X button in the modal so
   it closes the modal.
*/ 

const memeModalBtn = document.getElementById('meme-modal-close-btn')

memeModalBtn.addEventListener('click', () => {
    memeModal.style.display = 'none'
})


// =======================================================================
// Twimba: Twitter Clone
// =======================================================================

// =======================================================================
// Import the data

/*
Challenge:
1. Put all of the data in its own file called
   data.js, and export it back into index.js. 
   Make any changes to index.html that are
   necessary to make this work.
2. Log out tweetsData.
*/

// =======================================================================
// Aside: TextArea

// A multiline input field

<textarea 
    placeholder="Ask me anything!" 
    id="chat-input"></textarea>

textarea{
    width: 239px;
    height: 50px;
    margin: 0px;
    padding: 5px;
    resize: none;
}

<!-- 
Challenge
1. Add a textarea.
2. Give it placeholder text as shown in the 
   slide and an id of "tweet-input".
-->

// =======================================================================
// Tweet Boilerplate

/*
Challenge:
1. Use a "for of" to iterate over the data and 
   create HTML string for each tweet using the 
   boilerplate below. Replace UPPERCASE text
   with data from the tweets. 
2. Store this HTML in a let called "feedHtml".
3. Log out feedHtml.
4. Call getFeedHtml to check it's working.
*/  

{
    handle: `@TrollBot66756542 💎`,
    profilePic: `images/troll.jpg`,
    likes: 27,
    retweets: 10,
    tweetText: `Buy Bitcoin, ETH Make 💰💰💰 low low prices. 
        Guaranteed return on investment. HMU DMs open!!`,
    replies: [],
    isLiked: false,
    isRetweeted: false,
    uuid: '4b161eee-c0f5-4545-9c4b-8562944223ee',
}

// =======================================================================
// Tweet Boilerplate Challenge

function getFeedHtml() {
    
    let feedHtml = ''

    for (let data of tweetsData) {
        feedHtml += `<div class="tweet">
    <div class="tweet-inner">
        <img src="${data.profilePic}" class="profile-pic">
        <div>
            <p class="handle">${data.handle}</p>
            <p class="tweet-text">${data.tweetText}</p>
            <div class="tweet-details">
                <span class="tweet-detail">
                    ${data.replies.length}
                </span>
                <span class="tweet-detail">
                    ${data.likes}
                </span>
                <span class="tweet-detail">
                    ${data.retweets}
                </span>
            </div>   
        </div>            
    </div>
</div>`
    }

    console.log(feedHtml)
}

// =======================================================================
// Aside: forEach()

// A method for iterating over arrays

/*
Challenge:
1. Nest a forEach to log out each individual
   power in each characters powers array.
*/

characters.forEach(function(character){
    character.powers.forEach((power) => {
        console.log(power)
    })
})

characters.forEach(function(character, index){
    console.log(index, character.title)
})


// 0 Ninja
// 1 Sorcerer
// 2 Ogre
// 3 Unicorn

// =======================================================================
// Render the tweets to the feed

    /*
Challenge:
1. Take control of the ‘feed’ div.
2. Render the HTML returned by the getFeedHtml 
   function to the 'feed' div. 
   See if you can do this with just one line of code!
*/

function render(){
    document.getElementById('feed').innerHTML = getFeedHtml()
}

// =======================================================================
// Aside: CDN Font Awesome

// CDN (Content delivery network)
// A remote service
// Provides assets to web applications
// E.g functions, styles, icons
// Gives us a snipper of code that will bring the asset into our application

<!-- 
Challenge:
1. Find the icons for location, email and calendar
   on Font Awesome and add them here. Use the
   slide to remind you what we are aiming for. 
-->

<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" 
integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" 
crossorigin="anonymous" referrerpolicy="no-referrer" />

<i class="fa-solid fa-house"></i>
<i class="fa-solid fa-location-dot"></i>
<i class="fa-solid fa-envelope"></i>
<i class="fa-solid fa-calendar-days"></i>

// =======================================================================
// Aside: Data attritbutes new

// Storing extra information in HTML elements

// data-unique-name = "your string"

<i class="fa-solid fa-share" data-share="image-1"></i>

// =======================================================================
// Aside: Data Attr JS and Challenge

document.addEventListener('click', function(e) {
    console.log(e.target.dataset.share)
})

<!--
Challenge:
1. Add a data attribute holding the id of the 
   image to the heart icon's tag'.	
-->

<i class="fa-solid fa-heart" data-heart="image-1"></i>

/*
Challenge:
2. Make clicking on the heart icon log out
   the id of the image.
*/

document.addEventListener('click', function(e) {
    if (e.target.dataset.share){
        console.log(e.target.dataset.share)
    }
    
    else if (e.target.dataset.heart) {
        console.log(e.target.dataset.heart)
    }

})

// =======================================================================
// Aside: Data Attributes Naming Issues

// Don't use uppercase letters when naming data-attributes in HTML

// Seperate words with dashes in the HTML
// USe camelCase in the JavaScript

// =======================================================================
// Like a tweet part 2: data attributes

// =======================================================================
// Like a tweet part 3: eventListener

/*
Challenge:
1. When a like icon is clicked, this function 
   should log out the contents of the 'data-like' 
   data-attribute.

⚠️ Clicking on the page but not on the like icon
   will log out 'undefined'. That is absolutely fine.
*/

document.addEventListener('click', function(e){
    if (e.target.dataset.like) {
        console.log(e.target.dataset.like)
    }
})

// =======================================================================
// Like a tweet part 4: handleClick()

/*
Challenge:
1. If a like icon has been clicked, call handleLikeClick
   passing in the uuid that is stored in the like icon's 
   data attribute. 
*/

document.addEventListener('click', function(e){

    if (e.target.dataset.like) {
      handleLikeClick(e.target.dataset.like)  
    }

})

/*
Challenge:
2. handleLikeClick should take in a parameter. 
   You can call this parameter 'tweetId'. For 
   now just log out tweetId.
*/

function handleLikeClick(tweetId){
    console.log(tweetId)
}

// =======================================================================
// Like a tweet part 5: find the tweet object

/*
Challenge:
1. Iterate over tweetsData and use the uuid 
   saved in tweetId to identify the liked
   tweet's object. Save that object to a 
   new const called 'targetTweetObj'.
⚠️ targetTweetObj should hold an object, NOT
   an array.
2. Increment targetTweetObj's 'likes' count 
   by 1.
3. Log out targetTweetObj.
*/

function handleLikeClick(tweetId){
    const targetTweetObj = tweetsData.find((tweet) => tweet.uuid === tweetId)
    
    if (targetTweetObj) {
        targetTweetObj.likes += 1
    }
    console.log(targetTweetObj)
}

// ===============================

// Instructors Solution

const targetTweetObj = tweetsData.filter(function(tweet){
    return tweet.uuid === tweetId
})[0]
targetTweetObj.likes++
console.log(tweetsData)

// =======================================================================
// Aside: Copying objects and arrays

// =======================================================================
// Like a tweet part 6: render the increment

function handleLikeClick(tweetId){ 
    const targetTweetObj = tweetsData.filter(function(tweet){
        return tweet.uuid === tweetId
    })[0]
    targetTweetObj.likes++
    render()
}

// =======================================================================
// Unlike a tweet

/*
Challenge:
1. When a tweet is liked, it's 'isLiked' property
   should be set to true.
2. When a tweet is unliked, it's 'isLiked' property
   should be set to false and its 'likes' count
   should be decremented.
*/  

function handleLikeClick(tweetId){ 
    const targetTweetObj = tweetsData.filter(function(tweet){
        return tweet.uuid === tweetId
    })[0]
    
    if (targetTweetObj.isLiked === false) {
        targetTweetObj.isLiked = true
        targetTweetObj.likes++   
    } else {
        targetTweetObj.isLiked = false
        targetTweetObj.likes--   
    }
    render()
}

// =======================================================================
// Flip a boolean

/*
Challenge:
1. Delete the two lines of code marked below and
   replace them with just one line of code outside 
   of the if else.
   Hint: Google the logical NOT operator (!)
*/ 

if (targetTweetObj.isLiked){
    targetTweetObj.likes--
}
else{
    targetTweetObj.likes++ 
}
targetTweetObj.isLiked = !targetTweetObj.isLiked

// =======================================================================
// Retweet a tweet

/*
Challenge:
1. Make this eventListener call "handleRetweetClick" 
   when the retweet icon is clicked, passing in the
   uuid from that tweet.  
*/

/*
Challenge:
2. Find the retweeted tweet's object in tweetsData 
   and save it to a const.
3. Increment or decrement the retweet count of the 
   tweet and flip its isRetweeted boolean.
4. Call the render function.  
*/   

function handleRetweetClick(tweetId){
    const targetTweetObj = tweetsData.filter(tweet => tweet.uuid === tweetId)[0]

    if (targetTweetObj.isRetweeted){
        targetTweetObj.retweets--
    }   else {
        targetTweetObj.retweets++
    }
    targetTweetObj.isRetweeted = !targetTweetObj.isRetweeted
    render()
}

// =======================================================================
// Aside: Conditionally render CSS class

// Giving elements different clases under different conditions


// =======================================================================
// Color the icons

/*
Challenge:
1. Use an if statement to set the value of 
   'likeIconClass' to the string 'liked' 
   if the tweet has been liked. 
2. In the like icon tag, add 'likeIconClass' 
   to the list of classes.
*/  

/*
Challenge:
1. Use an if statement to set the value of 
   'retweetIconClass' to the string 
   'retweeted' if the tweet has been retweeted. 
2. In the retweet icon tag, add 'retweetIconClass' 
   to the list of classes.
*/

// =======================================================================
// Replies 1: get uuids of tweets with replies

    /*
Challenge:
1. Use an if statement to check if a tweet has replies.
2. If it does, log out the uuid for that tweet.
*/

// =======================================================================
// Replies 2: HTML string for replies and add to parent div

/*
Challenge:
1. If a tweet has replies, iterate through the replies
   and wrap each one in the HTML template provided below. 
   Make sure to replace words in UPPERCASE with data from 
   the tweet. On each iteration, add this HTML to repliesHtml.
   
<div class="tweet-reply">
    <div class="tweet-inner">
        <img src="PROFILE PIC" class="profile-pic">
            <div>
                <p class="handle">HANDLE</p>
                <p class="tweet-text">TWEET TEXT</p>
            </div>
        </div>
</div>
*/

if (tweet.replies.length > 0) {
    tweet.replies.forEach((reply) => {
        repliesHtml += `<div class="tweet-reply">
        <div class="tweet-inner">
            <img src="${reply.profilePic}" class="profile-pic">
                <div>
                    <p class="handle">${reply.handle}</p>
                    <p class="tweet-text">${reply.tweetText}</p>
                </div>
            </div>
    </div>`
    })
}

// =======================================================================
// Replies 3: toggle hidden

/*
Challenge:
1. Use the uuid stored in 'replyId' to take control 
   of the div containing that tweet’s replies. 
   (Check the HTML string below to remind yourself 
   what id that div will have.)  
2. Toggle the CSS class "hidden" on that div. 
*/ 

function handleReplyClick(replyId){ 
    document.getElementById(`replies-${replyId}`).classList.toggle('hidden')  
}

// =======================================================================
// Refactor the tweet btn

/*
Challenge:
1. Add an else if so that if the Tweet button
   is clicked, handleTweetBtnClick is called.
*/ 

else if (e.target === tweetBtn) {
    handleTweetBtnClick()
}

// =======================================================================
// Aside: UUID

import { v4 as uuidv4 } from 'https://jspm.dev/uuid';
console.log(uuidv4()) // 1dbea420-b8fd-4839-88a3-51f3a24573fb

// =======================================================================
// Build the new Tweet object

/*
Challenge:
2. When the Tweet button is clicked, log out an object
   for a new tweet. Make sure you include the text of 
   the tweet (how can you get that?) and a unique 
   identifier using uuidjs.
   
   The handle @Scrimba (or whatever you prefer) and 
   the profile pic scrimbalogo.png can be hard-coded.
*/ 

console.log({
    handle: `@Scrimba`,
    profilePic: `images/scrimbalogo.png`,
    likes: 0,
    retweets: 0,
    tweetText: `tweetInput.value,
    replies: [],
    isLiked: false,
    isRetweeted: false,
    uuid: uuidv4()})
    

// =======================================================================
// Render a new tweet

/*
Challenge:
1. Add the new tweet object to 'tweetsData'
   and make it render at the top of the feed. 
*/ 

function handleTweetBtnClick(){
    tweetsData.unshift ({
        handle: `@Scrimba`,
        profilePic: `images/scrimbalogo.png`,
        likes: 0,
        retweets: 0,
        tweetText: tweetInput.value,
        replies: [],
        isLiked: false,
        isRetweeted: false,
        uuid: uuidv4()
    })
    render()
}

// =======================================================================
// UX fixes

/*
Challenge:
1. No empty tweets!
2. Clear the textarea after tweeting!
*/

function handleTweetBtnClick(){
    if (!tweetInput.value) {
        return
    } else {
        tweetsData.unshift({
            handle: `@Scrimba`,
            profilePic: `images/scrimbalogo.png`,
            likes: 0,
            retweets: 0,
            tweetText: tweetInput.value,
            replies: [],
            isLiked: false,
            isRetweeted: false,
            uuid: uuidv4()
        })  
    }
    tweetInput.value = ''
    render() 
}

// ===============================

// Instructor Solution

function handleTweetBtnClick(){
/*
Challenge:
1. No empty tweets!
2. Clear the textarea after tweeting!
*/
    if(tweetInput.value){
        tweetsData.unshift({
            handle: `@Scrimba`,
            profilePic: `images/scrimbalogo.png`,
            likes: 0,
            retweets: 0,
            tweetText: tweetInput.value,
            replies: [],
            isLiked: false,
            isRetweeted: false,
            uuid: uuidv4()
        })
    render()
    tweetInput.value = ''
    }

}

// =======================================================================
// Recap

// Add the ability to reply to a specific tweet
// Save tweets, likes and retweets to localStorage
// Allow a user to delete a tweet
// Your own idea, dark / light

// =======================================================================
// Essential JS Mini Projects
// =======================================================================

// =======================================================================
// Object Destructing

// Extract properties from objects
// Object Destructuring enables us to extract properties from objects into
// distinct variables.

const favouriteFilm = {
    title: "Top Gun",
    year: "1986",
    genre: "action",
    star: "Tom Cruise",
    director: "Tony Scott"
} 

const {title, year, genre, star, director} = favouriteFilm

// =======================================================================
// Object Destructuring Challenge

    const dreamHoliday = {
    destination: 'Asia',
    activity: 'travel around all countries',
    accommodation: 'Hostels',
    companion: 'single, or partner.'
}

const {destination, activity, accommodation, companion} = dreamHoliday

console.log(`I would love to go to ${destination}, and ${activity}. I would stay in ${accommodation} and probably travel ${companion}`)

// =======================================================================
// The .map() Method

// Iterating over arrays
// The map method gives you a new array

const distanceWalkedMilesArr = [140, 153, 161, 153, 128, 148]

const conversionFactorMilesToKm = 1.6

function convertMilesToKms() {
    return distanceWalkedMilesArr.map(function (distanceMiles, index) {
        return `Month ${index}: ${distanceMiles * conversionFactorMilesToKm}KM`
    })
}

console.log(convertMilesToKms())

// ['Month 0: 224KM', 'Month 1: 244.8KM', 'Month 2: 257.6KM', 'Month 3: 244.8KM', 'Month 4: 204.8KM', 'Month 5: 236.8KM']

// =======================================================================
// The .map() Method Challenge

/*
Challenge
1. Refactor the code below to use .map() 
   instead of the for loop.
   ⚠️ Don't worry about the commas for now.
*/

const playlistHtml = []

for (let i = 0; i < playlistArr.length; i++) {
    playlistHtml.push(
`<section class="card">
    <div class="card-start">
        <img src="/images/${playlistArr[i].albumArt}">
    </div>
        <div class="card-mid">
            <h4 class="card-title">${playlistArr[i].title}</h4>
            <p class="card-artist">${playlistArr[i].artist}</p>
        </div>
    <div class="card-end">
        <p class="card-menu">...</p>
    </div>
</section>
    `
    )
}

// Solution

const playlistHtml = playlistArr.map((element) => {
    return `<section class="card">
    <div class="card-start">
        <img src="/images/${element.albumArt}">
    </div>
        <div class="card-mid">
            <h4 class="card-title">${element.title}</h4>
            <p class="card-artist">${element.artist}</p>
        </div>
    <div class="card-end">
        <p class="card-menu">...</p>
    </div>
</section>
    `
}).join('')

document.getElementById('container').innerHTML = playlistHtml

// =======================================================================
// The .join() Method

// Strings from arrays
// Concatenates elements of array into a string
// You choose how the elements are sepeated
// Returns the new string

// =======================================================================
// .map() vs .forEach()

// ForEach does not return a new array, whilst map does not.
// USe .map() if you need to make use of the new array it returns.
// Use .forEach() if you don't need to create a new array.

// =======================================================================
// For loop Break and Continue

// Only use the break keyword when the data is formatted chronologically.

const expensesAndRefunds = [
    { description: 'Groceries', amount: 50, year: 2023 },
    { description: 'Electronics', amount: -30, year: 2023 },
    { description: 'Dinner', amount: 40, year: 2023 },
    { description: 'Clothing', amount: 60, year: 2023 },
    { description: 'Entertainment', amount: 25, year: 2023 },
    { description: 'Rent', amount: -500, year: 2024 },
    { description: 'Utilities', amount: 100, year: 2024 },
    { description: 'Books', amount: 20, year: 2024 },
    { description: 'Fitness', amount: 30, year: 2024 },
    { description: 'Gifts', amount: 15, year: 2024 },
]

let totalSpent = 0
const cutoffDate = 2024

for (let i = 0; i < expensesAndRefunds.length; i++) {
    const currentExpenseOrRefund = expensesAndRefunds[i]
    
    if (currentExpenseOrRefund.year >= cutoffDate) {
        console.log(`Reached cutoff date, exiting loop`)
        break   
    }
    
    if (currentExpenseOrRefund.amount < 0) {
        console.log(`Skipping ${currentExpenseOrRefund.description} due to refund`)
        continue
    } 
    
    totalSpent += currentExpenseOrRefund.amount 
}


console.log(`Total amount spent on items in 2023: $${totalSpent}`)

// Skipping Electronics due to refund
// Reached cutoff date, exiting loop
// Total amount spent on items in 2023: $175

// =======================================================================
// The dangers of innerHTML

// Avoid using innerHTML with anything that a user is inputting into the
// DOM, as this can change the actual HTML structure of the site (locally)

/*
Challenge:
1. Find a way of adding an inputted film to the list 
   which does not allow malicious JavaScript to be executed.
2. Implement it. 
*/

const filmInput = document.getElementById('film-input')
const addBtn = document.getElementById('add-btn')
const filmList = document.getElementById('film-list')

addBtn.addEventListener('click', function() {
    filmList.innerHTML += `
        <div class="film-item">${filmInput.value}</div>
        `
    filmInput.value = ''
}) 

// Instructors Solution

const filmInput = document.getElementById('film-input')
const addBtn = document.getElementById('add-btn')
const filmList = document.getElementById('film-list')

addBtn.addEventListener('click', function() {
    const newFilm = document.createElement('div')
    newFilm.classList.add('film-item')
    newFilm.textContent = filmInput.value
    filmList.appendChild(newFilm)
    filmInput.value = ''
}) 

// =======================================================================
// Beyond Function Declarations 1: Function Expressions

// Function expressions are not hoisted

helloWorld() // Error

const helloWorld = () => {
    console.log('HelloWorld')
}

helloWorld // works

// =======================================================================
// Beyond Function Declarations 2: Function Expression Challenge

/*
Challenge:
    1. Convert this function declaration to a function expression.
*/

function getTheftAlert(numberOfTransactionsHour) {
    if (numberOfTransactionsHour > 5) {
        return `You have made ${numberOfTransactionsHour} transactions 
                in the past hour. We think your card might have been 
                compromised`
    }
}

// ===============================

const getTheftAlert = (numberOfTransactionsHour) => {
    if (numberOfTransactionsHour > 5) {
        return `You have made ${numberOfTransactionsHour} transactions 
                in the past hour. We think your card might have been 
                compromised`
    }
}

console.log(getTheftAlert(6))
// =======================================================================
// Aside: Arrow functions challenge

/*
Challenge
1. Refactor this function to use an arrow function.
2. Make sure you write the least code possible.
*/

const speedWarning = (speed) => `You are going at ${speed} mph!`

console.log(speedWarning(40))
// =======================================================================
// Import Export (default)

// If you are importing functions, you need to attach export default to
// the start of the function.
// on import you can also name it whatever you want, rather than the 
// actual name of the function

import filterFunction from '/searchFunction.js'

export default function getMatchingTripsArr(arr, keyword){
    return arr.filter(function(trip){
        return trip.description.toLowerCase().includes(keyword)
    })
}

// =======================================================================
// Aside: array.reduce()

// Accumulates elements in an array

const rainJanuaryByWeek = [ 10, 20, 0, 122 ]

const totalRainfallJanuary = rainJanuaryByWeek.reduce(function(total, currentElement){
    return total + currentElement
})

console.log(totalRainfallJanuary)

// =======================================================================
// Aside: array.reduce() challenge

/*
Challenge
1. Use the .reduce() method to find the total of all of the students grades.
2. Do some simple maths to log out the class average. 
*/

const grades = [75, 83, 66, 43, 55, 99, 87, 16, 89, 64, 70, 80, 94, 77, 66, 73]

const totalGrades = grades.reduce((acc, ind) => {
    return acc + ind
}, 0)


console.log(`The class average is ${Math.round(totalGrades / grades.length)}`)

// =======================================================================
// The reduce() Method with Objects

import { studentsArr } from '/studentsArr'

function calculateClassAverage(studentsArr) {
    const totalGrades = studentsArr.reduce(function(total, currentStudent){
        return total + currentStudent.grade
    }, 0)
    return totalGrades / studentsArr.length
}

console.log(calculateClassAverage(studentsArr))

// ===============================

const calculateClassAverage = (studentsArr) => {
    const totalGrades = studentsArr.reduce((acc, ind) => {
        return acc + ind.grade
    }, 0)
    return Math.round(totalGrades / studentsArr.length)
}

// =======================================================================
// The .reduce() Method with Objects Challenge

/*
Challenge:
1. Use the reduce method to calculate the total 
   cost of items which have been bought.
*/

import { itemsBoughtArr } from '/itemsBoughtArr.js'

const calculateTotalCost = (itemsBoughtArr) => {
    const total = itemsBoughtArr.reduce((acc, ind) => {
        return acc + ind.priceUSD
    }, 0)
    return total
}

console.log(calculateTotalCost(itemsBoughtArr))

// =======================================================================
// Default Parameters

import { itemsBoughtArr } from '/itemsBoughtArr.js'

function calculateTotalCost(itemsBoughtArr, discount = 0) {

    const total = itemsBoughtArr.reduce((total, currentItem) => {
        return total + currentItem.priceUSD
    }, 0
    )
    return total - discount
}

console.log(calculateTotalCost(itemsBoughtArr))

// =======================================================================
// Super Challenge Set-up

/*
SUPER CHALLENGE 💪

Render out a card for each of the properties in the propertyForSaleArr array (in the 'properties' folder). Each card should have an image, a property location, a price, a comment and the TOTAL property size in square metres (each object has an array with the size in square metres of the individual rooms).

If no array of properties is passed to getPropertyHtml, the placeholder property stored in placeholderPropertyObj (in the 'properties' folder) should be rendered instead.

This is the JS I want you to use to complete this challenge 👇
- import/export
- .map()
- .join()
- Object destructuring
- .reduce()
- Default parameters

The HTML and CSS have been done for you. 
This is the HTML template 👇. Replace everything in UPPERCASE with property data.
*/

import { placeholderPropertyObj} from '/properties/placeholderPropertyObj.js'
import { propertyForSaleArr} from '/properties/propertyForSaleArr.js'

const getPropertyHtml = (arr = [placeholderPropertyObj]) => {
    const propertyAssigment = arr.map((element) => {
        
        const {propertyLocation, priceGBP, roomsM2, comment, image} = element
        
        const squareMeters = roomsM2.reduce((acc, ind) => {
           return acc + ind 
        }, 0)
        
        return `<section class="card">
            <img src="/images/${image}">
            <div class="card-right">
                <h2>${propertyLocation}</h2>
                <h3>${priceGBP}</h3>
                <p>${comment}</p>
                <h3>${squareMeters} m&sup2;</h3>
            </div>
        </section> `
        
    }).join('')
    return propertyAssigment
}
/***** Modify 👇 by adding an argument to the function call ONLY. *****/
document.getElementById('container').innerHTML = getPropertyHtml()


// =======================================================================
// The Ternary Operator for Complex Conditionals

const exerciseTimeMins = 20

const message = exerciseTimeMins < 30 ? 'You need to try harder!' 
    : exerciseTimeMins < 60 ? 'Doing good!' 
    : 'Excellent!'

console.log(message)

// =======================================================================
// Ternary Operator Challenge

/*
Challenge 
1. Refactor the if else statement to use a ternary operator.
*/

let message = ''

let message = playerGuess === correctAnswer ? 'Correct' : 'Wrong!'

console.log(message)
/*
Challenge
1. Now improve the functionality of this code by 
   letting the player know if their guess was too high, 
   too low, or exactly right.
*/

// let message = playerGuess > correctAnswer ? 'too high' : playerGuess < correctAnswer ? 'too low' : 'exactly right                   


// =======================================================================
// Twimba Ternanary Refactor

/*
Challenge:
1. Refactor the two lets and conditionals on 
   lines 85-95 to use ternary operators.
   ⚠️ You might need to do some research!
*/

// let likeIconClass = ''

// if (tweet.isLiked){
//     likeIconClass = 'liked'
// }

let likeIconClass = tweet.isLiked ? 'liked' : ''

// =======================================================================
// The Rest Parameter

// Catching the rest of the arguments

function setPermissionLevel(permissionLevel, ...names) {
    console.log(names)
}

setPermissionLevel('admin', 'Dave', 'Sally')

// ["Dave", "Sally"]

// ===============================

function setPermissionLevel(permissionLevel, ...names) {
    names.forEach((name) => 
    console.log(`${name} now has admin level access`))
}


// =======================================================================
// The Rest Parameter Challenge
/*
Challenge:
1. Add parameters.
2. Update the HTML template where you 
   see **NAME**.
3. Return HTML template for each label.
*/

const getLabelsHtml = (text, sender, ...name) => {
    let test = ''
    name.forEach((element) => {
        test += `<div class="label-card">
                <p>Dear ${element.name} </p>
                <p>${text}</p>
                <p>Best wishes,</p>
                <p>${sender}</p>
                </div>`
    })
    return test
}

const text = 'Thank you for all your hard work throughout the year! 🙏🎁'
const sender = 'Tom'

document.getElementById('labels-container').innerHTML = getLabelsHtml(
    text, 
    sender, 
    {name: 'Sally'}, 
    {name: 'Mike'}, 
    {name: 'Rob'}, 
    {name: 'Harriet'}
    ) 

// ===============================

// Instructors Solution

function getLabelsHtml(text, sender, ...staffObjs) {
    const labelsHtml = staffObjs.map(staffObj => 
`<div class="label-card">
    <p>Dear ${staffObj.name}</p>
    <p>${text}</p>
    <p>Best wishes,</p>
    <p>${sender}</p>
</div>`
    ).join('')
    return labelsHtml
}

const text = 'Thank you for all your hard work throughout the year! 🙏🎁'
const sender = 'Tom'

document.getElementById('labels-container').innerHTML = getLabelsHtml(
    text, 
    sender, 
    {name: 'Sally'}, 
    {name: 'Mike'}, 
    {name: 'Rob'}, 
    {name: 'Harriet'}
    ) 

// =======================================================================
// Spread Syntax (...)

// Expanding and joining arrays
// Can be used to copy an array

const lunchMenu = ['Greek Salad', 'Open Sandwich', 'Parsnip Soup', 'Flatbread and Dip']
const dinnerMenu = ['Lasagne', 'Strogonoff', 'Tagine', 'Katsu Curry']
const sweetMenu = ['Mixed Berry Ice Cream', 'Chocolate Brownie', 'Orange Cheesecake']

const eventMenu = [...lunchMenu, ...dinnerMenu, ...sweetMenu]

console.log(eventMenu)

// =======================================================================
// Spread Syntax (...) Challenge

/*
Challenge:
2. Find the highest number from the array 
   and store it in the const 'highest'. 
3. Find the lowest number from the array 
   and store it in the const 'lowest'. 
*/

/*
Challenge:
1. Call this function with one array holding 
   all of the data from the 4 arrays above.
*/

const averageSharePriceByMonthQ1 = [109.6, 103.3, 89.4]
const averageSharePriceByMonthQ2 = [109.3, 126.1, 103.3]
const averageSharePriceByMonthQ3 = [120.8, 102.3, 106.8]
const averageSharePriceByMonthQ4 = [110.9, 119.8, 113.7]

const findPriceExtremes = (arr) => {
    const highest = Math.max(...arr)
    const lowest = Math.min(...arr)
    console.log(`The highest average share price was ${highest}`)
    console.log(`The lowest average share price was ${lowest}`)
}

findPriceExtremes([...averageSharePriceByMonthQ1, ...averageSharePriceByMonthQ2, ...averageSharePriceByMonthQ3, ...averageSharePriceByMonthQ4])

// =======================================================================
// Short-circuiting with OR (||)

// More concise code for conditional logic.

const jobHunter = {
    name: 'Tom Chant',
    // jobSearchArea: 'Europe',
}

const workLocation = jobHunter.jobSearchArea || 'Worldwide'
console.log(`${jobHunter.name}s work location is ${workLocation}`)

// Tom Chant's work location is Europe

// =======================================================================
// Short-circuiting with OR (||) Challenge

/*
Challenge:
1. Make it so that if the jobHunter object does not have 
   a name property, the username is used instead.
*/

const jobHunter = {
    name: 'Tom Chant',
    username: 'TChant44',
    workLocation: 'Europe',
    }
    
// Complete this line of code 👇
const jobHunterName = jobHunter.name || jobHunter.username

console.log(`Hey ${jobHunterName}!`)

// =======================================================================
// Short-circuiting with AND (&&)

// If the code on the left hand side of the && operator is truthy, then
// the code on the right hand side will execute

const user = {
    userName: 'Tom',
    role: 'admin',
}

user.role === 'admin' && console.log('Dashboard Displayed')

// Dashboard Displayed

// =======================================================================
// Short-circuiting with AND (&&) Challenge

/*
Challenge:
1. If the passcode passed into authenticationCheck 
   exists in swissBankPassCodesArr, authenticationCheck 
   should log out accountBalanceUsd. 
   
   If the passcode does not exist in swissBankPassCodesArr 
   then authenticationCheck need not do anything.
   
⚠️ Make sure you short-circuit with &&
   hint.md for help!
*/

const accountBalanceUsd = '$45,000,000,000 🤑💰'
const swissBankPassCodesArr = [1234,5678,9876,3434]

const authenticationCheck = (passCode) => {
   swissBankPassCodesArr.includes(passCode) && console.log(accountBalanceUsd)
}

authenticationCheck(3434)

// =======================================================================
// Switch Statements (new)

// Select one of many code blocks to execute

function selectItem(item) {
    let price = 0
    
    switch(item) {
        case 'coffee':
            price = 2
            break    
    }
    return `You selected ${item}. That will be $${price}`
}

console.log(selectItem('biscuits'))

/*
Challenge:
1.  Add the remaining price list items as cases.
*/   

function selectItem(item) {
    let price = 0
/*
Challenge:
1.  Add the remaining price list items as cases.
*/    
    switch(item) {
        case 'coffee':
            price = 2
            break   
        case 'Sandwiches':
            price = 5
            break   
        case 'Salad':
            price = 4
            break   
        case 'Lemon Cake':
            price = 3
            break
        default:  
            return 'we do not sell that item'

    }
    return `You selected ${item}. That will be $${price}`
}

console.log(selectItem('biscuits'))

// =======================================================================
// Constructors: Date()

const dateSnapshot = new Date()

console.log(dateSnapshot)

// 2023-07-27T12:50:43.463Z

console.log(dateSnapshot.toString())

// Thu Jul 27 2023 13:55:21 GMT+0100 (British Summer Time)

/*
Challenge:
1. Search online to find out how we can get just the year 
   using the Date() constructor and update the console.log above.
*/

console.log(`Copyright ${dateSnapshot.getFullYear()}`)


// =======================================================================
// The Error() Constructor

function checkUsername(userName) {
    if (userName) {
        console.log(userName)
    } else {
        console.log(new Error('No username provided'))
    }
}

checkUsername()

// Error: No username provided.

// ===============================
// Throw
// Stops any code afterwards from being executed. 

function checkUsername(userName) {
    if (userName) {
        console.log(userName)
    } else {
        throw new Error('No username provided')
        console.log('I will never execute')
    }
}

checkUsername()

// ! Error: no username provided

// =======================================================================
// Objects with Methods and 'this'

// functions within objects are called methods.

const gamer = {
    name: 'Dave',
    score: 0,
    incrementScore: function(){
        gamer.score++   
    }
}

console.log(gamer)
gamer.incrementScore()
console.log(gamer)

// {name: 'Dave', score: 0, incrementScore: ƒ()}
// {name: 'Dave', score: 1, incrementScore: ƒ()}

// ===============================
// Using this
// You cannot use arrow functions with objects / this

const gamer = {
    name: 'Dave',
    score: 0,
    incrementScore: function(){
        this.score++   
    }
}

console.log(gamer)
gamer.incrementScore()
console.log(gamer)

// {name: 'Dave', score: 0, incrementScore: ƒ()}
// {name: 'Dave', score: 1, incrementScore: ƒ()}

// =======================================================================
// Objects to Constructor Functions

// Constructing your own objects

function Gamer(name, score){
    this.name = name
    this.score = score
    this.incrementScore = function(){
        this.score++  
    }
}

const dave = new Gamer('Dave', 0)
dave.incrementScore()
console.log(dave)

// Gamer {name: 'Dave', score: 1}

// ===============================

// Hard coding properties

function Gamer(name){
    this.name = name
    this.score = 0
    this.incrementScore = function(){
        this.score++  
    }
}

const dave = new Gamer('Dave')
const sarah = new Gamer('Sarah')
const kerry = new Gamer('Kerry')
dave.incrementScore()
sarah.incrementScore()
sarah.incrementScore()
kerry.incrementScore()
kerry.incrementScore()
kerry.incrementScore()
console.log(dave)
console.log(sarah)
console.log(kerry)

// Gamer {name: 'Dave', score: 1}
// Gamer {name: 'Sarah', score: 2}
// Gamer {name: 'Kerry', score: 3}

// =======================================================================
// Constructor Function Challenge

/*
Challenge:
1. Create a constructor function called 'Character'.
2. Give it 'name' and 'collectedItemsArr' properties. 
    - 'name' should hold the character’s name.
	- 'collectedItemsArr' should hold an array of items. 
       Initialise it to an empty array.
3. Create an 'addItem' method which takes in an item as 
   a parameter and adds it to 'collectedItemsArr'.
4. The addItem method should log out a sentence like 
   `Merlin now has: wand, map, potion`.
5. Check it’s working by creating several instances of 
   Character and adding items to their arrays.
*/

function Character(name){
    this.name = name
    this.collectedItemsArr = []
    this.addItem = function(item){
        this.collectedItemsArr.push(item)
            console.log(`${this.name} now has: ${this.collectedItemsArr.join(', ')}`)
    }
}

const merlin = new Character('Merlin')
merlin.addItem('wand')
merlin.addItem('arrow')
merlin.addItem('bow')

// =======================================================================
// Constructor Functions to Classes

// A class is a special kind of function that works as a tempplate for
// creating objects.
// Construtor functions can be hoiste, whereas Classes cannot.

class Gamer {
    constructor(name, score) {
        this.name = name
        this.score = score
    }
    
    incrementScore() {
        this.score++  
    }
}

const dave = new Gamer('Dave', 0)
dave.incrementScore()
console.log(dave)

// Gamer {name: 'Dave', score: 1}

// =======================================================================
// Constructor Functions to Classes Challenge

/*
Challenge:
Rebuild this constructor function as a class.
*/

class Character {
    constructor(name) {
        this.name = name
        this.collectedItemsArr = []
    }
    
    addItem(item) {
        this.collectedItemsArr.push(item)
        console.log(`${this.name} now has: ${this.collectedItemsArr.join(', ')}`)
    }
}

const wizard = new Character('Merlin')
wizard.addItem('a wand')


// =======================================================================
// Debugging: Errors

// =======================================================================
// Debugging: try...catch

function addTouristSurcharge(payment) {
    try {
        if (typeof payment === 'number') {
            console.log(payment + 10)
        } else {
            throw new ReferenceError('payment is not a number')
        }
    } catch (err) {
        console.error('Error: ' + err)
    }
}

addTouristSurcharge('60')

// ===============================

// More advancved debugging options

// Breakpoints
// Run code until a breakpoint, allowing you to see what happens up to
// that point

// Watchers
// Monitor the values of variables or expressions over time as you step
// through your code

// =======================================================================
// Solo Project Restaurant ordering App

// =======================================================================
// Build a Responsive Site
// =======================================================================

// =======================================================================
// Aside: Relative units and percentages

// Absolute units like pixels will always appear the same size no matter
// where you view it

// Relative units
// Relative to another value
// Dynamic flexibility
// Resize and scale

// Percentage units
// When using a percentage for width, the percentage is based on the 
// width of its parent element

// =======================================================================
// Create flexible containers with percentage units

// 90% is a common width for containers on a narrow screen.

// =======================================================================
// Controlling the width of images

/*
  Challenge:
    - Make each .feature-image fluid using a percentage
    - The images should display proportionally on the same line, 
      each taking up about half of the space
*/

.feature-image {
    width: 48.8%;
    border-radius: 4.6px;
}

// =======================================================================
// Set width constraints with max-width

/*
  Challenge:
   1. Google "how to set the maximum width of an element"  
   2. Apply a maximum width of 800px to .container
*/

.container {
    max-width: 800px;
    width: 90%;
    margin: 0 auto;
}

/*
  Challenge:
   1. Apply a maximum width to .main-image
   2. Make the image slightly narrower than 
     its container and center it on the page 
*/

.main-image {
    width: 100%;
    max-width: 640px;
    display: block;
    margin-bottom: 32px;
    margin: 0 auto 32px;
}

// =======================================================================
// Aside: The em unit

// 1em is equal to the parent elements font-size value
// default font size is 16px, unless explicitly changed in the body

// =======================================================================
// Aside: Margin and padding with em

// Margin and padding values in em are relative to the element's current
// font-size value

// If the element does not have a font size, then it will be inhereited
// from the parent element, or from the default font size of 16px.

// =======================================================================
// Set margin and padding with em

// REMEMBER: if font not defined, inhereited from body font size.

// =======================================================================
// Aside: The compounding issue with em

// AN em value can compound from one element to another.

// =======================================================================
// Aside: The rem unit

// A rem unit is always relative to the root <html> element
// BY default, a rem value will be a multiple of 16px

// =======================================================================
// Text line height

body {
    color: #2b283a;
    font-family: 'Roboto', sans-serif;
    margin: 0;
    line-height: 2;
}

// The line heigh inherits from the default browser line height of 16px
// So setting to 2, will equal 2 times the browers line height (32px)

// ==============================

// However, individual elements line height inherit's from the elements
// font size.

// Always set line-height at approximately 1.5 times the font size.

p {
    font-size: 1.125rem;
    line-height: 1.5;
}

// =======================================================================
// How do you decide which unit to use?

// Font sizes
// Use Rems

// Margins & padding
// Use em

// Line height
// Unitless

// Width
// percentages

// Max-width
// use px

// =======================================================================
// Aside: Media queries

/*
 Challenge: 
   - Create a media query that targets a minimum
     browser width of 500px
   - In the media query, update the body's color and background
*/

@media (min-width: 500px) {
    body {
        color: blue;
        background-color: #faf9f6;
    }
}

@media (min-width: 500px) and (max-width: 799px) {
    body {
        color: aliceblue;
        background-color: cornflowerblue;
    }
    
    h1 {
        font-size: 3.5rem;
    }
}


// =======================================================================
// Add media queries to your site

/*
  Challenge:
    1. Create a media query that targets a browser width
       of 480px or wider
    2. Within the media query, select .section-two-image-container
       and add the flexbox property to display the images on the same row
    3. Inside the media query, select .feature-image and 
       add the fluid width for wider screens only
*/

@media (min-width: 480px) {
    .section-two-image-container {
        flex-direction: row;
    }
    
    .feature-image {
    width: 48.8%;
}

}

// =======================================================================
// Think "mobile-first"

// Mobile-first: optimizing the experience for mobile users and putting
// their needs first.

// Write your base CSS with mobile devices in mind first
// Then adjust for larger screens.

// Simpler, more optmized CSS

// =======================================================================
// Common Breakpoints

// 480px width is for phones
// 768px width is for tablets
// 1024px is for smaller computer screens / laptops
// 1280px is for desktop.

// =======================================================================
// Add new breakpoint

// Mobile first also means content first
// Display the content users need on mobile devices and nothing extra

/*
  Challenge:
    1. Create a new media query that targets a browser width of 768px or wider. 
    2. Within the media query, select the header, section, and footer elements
       and apply a top and bottom padding of 2.875em.
    3. Adjust the initial padding for the header, section and footer elements.
       Set a top and bottom padding value in em equal to 20px.
*/

@media (min-width: 768px) {
    header, 
    section, 
    footer {
    padding: 2.875em 0;
    } 
}

header, 
section, 
footer {
    padding: 1.25em 0;
}

// =======================================================================
// Adapt the buttons for smaller screens

// On mobile devices buttons are usually styled as block level elements

/*
  Challenge:
    - On narrow screens, each button should take up the full width
      of their container 
    - The buttons should display on the same row only at the 768px breakpoint
*/

.btn {
    font-size: 1.125rem;
    text-align: center;
    font-weight: 500;
    text-decoration: none;
    display: block;
    padding: 0.5em 1em;
    margin-bottom: 1em;
    border-radius: 4.6px;
}

@media (min-width: 768px) {
    header,
    section,
    footer {
        padding: 2.875em 0;        
    }
    
    .btn {
        display: inline-block;
        margin-right: 0.5em;
    }
}

// =======================================================================
// Adjust font size for smaller screens

/*
  Challenge: Responsive text
    - h2:
        - Initial size: rem value equal to 22px
        - At 768px: increase to 1.75rem
    - .subheading:
        - Initial size: suitable for smaller screens
        - At 768px: increase to 1.25rem  
    - Paragraphs:
        - At 768px: increase to rem value equal to 18px
*/

// =======================================================================
// Create a mobile-first navigation

// nav link settings
// font size: relative value equal to 18px
// padding: relative top and bottom padding values

nav a {
    color: #fff;
    text-decoration: none;
    font-size: 1.125rem;
    padding: 0.85em 0;
    display: block;
}

// =======================================================================
// Challenge: Narrow screens

/* ----- NAVIGATION ----- */

/*
  Challenge: Write initial nav styles
    1. Center-align the header content
    2. Apply a top margin to the nav element to create space
       between the nav and subheading
    3. Make sure that the center alignment, the nav’s top margin,
       and dotted borders between links display only on viewport widths
       narrower than 768px
*/

@media (max-width: 767px) {
    
    header {
        text-align: center;
    }
    
    header nav {
    text-align: center;
    margin-top: 1em;
    }
    
    li:not(:last-child) {
    border-bottom: 1px dotted #a190b6;
    }
}

// =======================================================================
// Challenge: Wider screens

.nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

nav ul {
display: flex;
gap: 1rem; /* spacing between nav items */
list-style: none;
margin: 0;
padding: 0;
}


// =======================================================================
// Solution: Wider screens

// Instructor solution

header .container,
nav ul {
    display: flex;
}

header .container {
    justify-content: space-between;
}

// =======================================================================
// The viewport meta tag

<meta name="viewport" content="width=device-width, initial-scale=1" />

// =======================================================================
// Aside: Create a flexbox image grid

.image-container {
    max-width: 800px;
    line-height: 0;
    margin: 0 auto;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
}

.pet-item {
    flex-basis: 220px;
    flex-grow: 1;
    flex: 1 220px; // shorthand
}

img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

// =======================================================================
// Wrap the featured items with flexbox

/*
  Challenge: Wrap the feature-item divs with flexbox
    1. Each .feature-item should grow from an initial main size of 220px
    2. Allow the items inside .section-two-image-container to
       wrap onto multiple lines
    3. Apply a gap between each .feature-item
*/

.section-two-image-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
}

.feature-item {
    flex: 1 220px;
}

// =======================================================================
// Build a Product Splash Page
// =======================================================================

// =======================================================================
// Style the intro container

/* 
  Challenge: Style the .intro section
    - Convert into a flex container; 
      display its content in a column
    - Set a minimum height of 250px
    - Center-align its content
    - Vertically center the content
    - Remove the space around the edges of the page
*/

.intro { 
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 250px;
    text-align: center;
    color: #fff;
    background-color: #9480e4;
}

// =======================================================================
// Style main content

/* 
  Challenge: Style the main content
    - Use flexbox to horizontally center all items inside 
      .main-content. The <p> text should remain left-aligned.
    - Use em to give .main-content a top padding equal to 40px
      and a left and right padding equal to 32px.
    - Set the width of .img-main to 120px and display it as a rounded image.
*/

.main-content{
    display: flex;
    flex-direction: column;
    text-align: center;
    padding-top: 2.5em;
    padding-left: 2em;
    padding-right: 2em;
}

.main-content p {
    text-align: left;
}

.img-main{
    width: 120px;
    margin: 0 auto;
    border-radius: 50%;
}

// ==============================

// Instructor Solution

.main-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    
    padding-top: 2.5em; /* 40 / 16 = 2.5 */
    padding-left: 2em; /* 32 / 16 = 2 */
    padding-right: 2em;
}

.img-main {
    width: 120px;
    border-radius: 50%;
}

// =======================================================================
// Style the text

/* 
  Challenge: Set the initial styles for text
    - Set the h1 to a relative font-size value equal to 40px
    - Apply a text shadow to the h1 using the color value #816fca
*/

h1 {
    font-weight: 400;
    font-size: 2.5rem;
    text-shadow: 0px 2px #816fca;
}

/* 
  Challenge: Set the initial styles for text
    - Set the h2 to a relative font-size value equal to 36px
    - Give the h2 a top and bottom margin value in em equal to 6px
*/

h2 {
    font-size: 2.25rem;
    margin: 0.1875em 0;
}

/* 
  Challenge: Set the initial styles for text
    - Set the paragraph to a relative font-size value equal to 18px
    - Set the p line-height to 1.35 times its font-size value
    - Give .subheading a bottom margin in em equal to half its font-size value
*/

p {
    font-size: 1.125rem;
    line-height: 1.35;
}

.subheading {
    color: #575757;
    font-weight: 900;
    margin-bottom: 0.5625em;
}

// =======================================================================
// Aside: Transform test

.headline {
    line-height: 1.3;
    text-transform: capitalize;
}

// =======================================================================
// Uppercase text

/* 
  Challenge: 
    - Set .beta-text and .subheading to appear in all-uppercase
*/

.beta-text,
.subheading {
    text-transform: uppercase;
} 

// =======================================================================
// Add a breakpoint for wider screens

/* 
  Challenge: Adjust the layout for wider screens
    - Add a media query that targets a browser width of 576px or wider
    - Within the media query, convert the parent element of .intro and 
      .main-content to a flex container
    - Set the width .intro and .main-content to exactly
      half the total width of their parent container
*/

@media (min-width: 576px){
    body{
        display: flex;
    }
    .intro,
    .main-content{
        width: 50%;
    }
}

    .intro,
    .main-content{
        flex-basis: 50%;
        flex: 1;
    }

// =======================================================================
// Aside: Viewport units

//Viewport units
// vh - viewport height
// vw - viewport width

// 1vh is equal to 1% of the viewport height
// 1 vw is equal to 1% of the viewport width

nav {
    width: 175px;
    min-height: 100vh;
    background: #3d5a80;
}

.headline {
    font-size: 6vw;
    text-transform: capitalize;
    line-height: 1.3;
    margin-top: 0;
}

// =======================================================================
// Viewport sized intro container

/* 
  Challenge:
    - Expand the height of .intro so that it takes up
      the full height of the browser window
*/

.intro{
    min-height: 100vh;
}

.main-content{
    justify-content: center;
    padding-top: 0;
}

// =======================================================================
// Adjust content for wider screens

/* 
  Challenge: Adjust text for wider screens
    - In the media query, increase the h1 font-size to
      a rem value equal to 52px
    - Increase the h2 font-size to a rem value equal to 42px
    - Increase the font-size of .beta-text to a 
      rem value equal to 20px
*/

h1 {
    font-size: 3.25rem;
}

h2 {
    font-size: 2.625rem;
}

.beta-text {
    font-size: 1.25rem;
}

// Setting font-size of h1 to a viewport unit

h1 {
    font-size: 5.5vw;
}

// =======================================================================
// Apply a full background image

/* 
  Challenge: Apply a full background image
    - Set the background of .intro to the image `intro-bg.png`
    - The background image should scale to fill the entire
      width and height of .intro while preserving its ratio
*/

.intro { 
    background: #9480e4 url("images/intro-bg.png");
    background-size: cover;
    justify-content: center;
    min-height: 250px;
    text-align: center;
    color: #fff;
}

// =======================================================================
// Style the form inputs

/* 
  Challenge: Style the form inputs
    - Display each input on a separate line so they
      expand to the full width of their container
    - Use a bottom margin to create space between the input elements
    - Apply a padding in em that's equal to half the input's
      font-size to all 4 sides
*/

input{
    width: 100%;
    margin-bottom: .5em;
    padding: .5em;
}

// =======================================================================
// Style the focus state

/* 
  Challenge: Style the form inputs
    - Give the inputs a solid 2px border using the value #d1d5db
    - Round the corners of the input fields by 5px
    - On focus, update an input’s border color to #8a71ec
      and background color to #e6e8ec
*/

input {
    font-family: inherit;
    width: 100%;
    padding: 0.5em;
    margin-bottom: 0.75em;
    border: solid 2px #d1d5db;
    border-radius: 5px;
}

input:focus {
    border-color: #8a71ec;
    background-color: #e6e8ec;
}

// =======================================================================
// Style the submit button

/* 
  Challenge: Style the submit button
    - The button should have the same font-family, width
      and border-radius of the input elements
    - Use the .btn selector to set the custom button styles;
      use the slide as a guide
    - Button colors:
      - Background: #8a71ec
      - Background on hover: #b7a7f6
*/

span {
    border-top: 5px solid;
}

.btn{
    font-family: inherit;
    letter-spacing: .1rem;
    text-transform: uppercase;
    font-weight: 600;
    width: 100%;
    border: none;
    border-radius: 5px;
    Background: #8a71ec;
    color: whitesmoke;
    padding: 0.75em;
    margin-top: 1em;
}

.btn:hover{
    background-color: #b7a7f6;
}

// =======================================================================
// Aside: Reordering flex items

// order values
// -1 display first
// 1 display last

// =======================================================================
// Adjust visual order of the intro text

/* 
  Challenge: 
    Adjust the visual order of .top-text and re-distribute
    the space inside .intro: 
      - Display .top-text above the h1 and align it to 
        the top edge of the .intro section
      - Evenly distribute the content inside .intro
      - The top border of .top-text should match the width of the text
*/

<p class="top-text"><span>Powered by Scrimba</span></p>

span {
      border-top: 5px solid;  
}

.top-text {
    order: -1; ///
    font-size: 0.875rem;
    font-weight: 900;
    margin: 0; ///
    padding-top: 0.25em;
}

.intro,
.main-content {
    display: flex;
    flex-direction: column; 
    justify-content: space-between; ///
    padding-left: 2em;
    padding-right: 2em;   
}

// ==============================

// Instructor Solution

.top-text {
    font-size: 0.875rem;
    font-weight: 900;
    padding-top: 0.25em;
    border-top: 5px solid;
    order: -1;
    margin: 0 auto;
}

// =======================================================================
// Aside: Control the size of elements with box-sizing

// box-sizing: border-box;

// Alters the total size of the border-box to make sure it fits the dimensions
// initially set in the width and height.

*, *::before, *::after {
    box-sizing: border-box;    
}

// =======================================================================
// Apply box-sizing to the page

*, *::before, *::after {
    box-sizing: border-box;    
}

// =======================================================================
// Build a responsive layout with CSS Grid
// =======================================================================

// Intro

// It's 2 dimensions, with precise positioning control
// Source order independence.

// =======================================================================
// Aside: Grid Columns and Gap

// Setting display grid:
// Margins no longer collapse
// Elements in a grid container become grid items
// Grid items fall into place on the grid

.grid-container {
    display: grid;
    grid-template-columns: 5em 10em;
    /* row-gap: .3em;
    column-gap: .6em; */
    gap: .5em;
    border: 2px solid black;
}

// =======================================================================
// Aside: fr units

// 'fr' is short for fraction, and the fr unit represents a fraction of
// the available space in the grid

.grid-container {
    display: grid;
    gap: .5em;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    border: 2px solid black;
} 

// =======================================================================
// The Mobile Layout

/* 
Challenge:
    1. Set up the "main" element as a grid container. 
    2. Specify a template of one column with 1fr width.
    3. Place 1em of space between each grid item. 
*/

main {
    display: grid;
    gap: 1em;
    grid-template-columns: 1fr;
}

// =======================================================================
// Aside: Grid rows and implicit grid

// Shorthand fro templates and rows

.grid-container {
    border: 2px solid black;
    display: grid;
    /* grid-template-columns: 1fr 1fr;
    grid-template-rows: 5em 5em; */
    grid-template: 5em 5em / 1fr 1fr;
    gap: .5em;
    /* align-items: center; */
}

// =======================================================================
// Aside: Span

.grid-container {
    display: grid;
    grid-template: 1fr 3fr 1fr / 1fr 2fr;
}

.grid-item {
    padding: .5em;
    font-size: 2em;
    color: black;
    display: flex;
    align-items: center;
    justify-content: center;
}
    
header {
    background-color: palegoldenrod;
    grid-column: span 2;
}
nav {
    background-color: lightcoral;
}
main {
    background-color: lightgreen;
}
footer {
    background-color: gold;
    grid-column: span 2;
}

/* 
Challenge:
Change the span counts we are using on these 
selectors 👇 to fix this layout. 
You will also need to add some spans for rows. 
Think about how you do that!
 */

.grid-container {
    display: grid;
    grid-template: 1fr 1fr 1fr 1fr 1fr / 1fr 1fr 1fr;
}

header {
    background-color: palegoldenrod;
    grid-column: span 3;
}
nav {
    background-color: lightcoral;
    grid-row: span 3;
}
main {
    background-color: lightgreen;
    grid-row: span 3;
    grid-column: span 2;
}
footer {
    background-color: gold;
    grid-column: span 3;
}

// =======================================================================
// Tablet view with span

/*
Challenge:
    1. Make our layout look like the screenshot. 
    (📝 Try to write the least CSS possible.)  
*/

main {
    display: grid;
    grid-template: 1fr 1fr 1fr 1fr / 1fr 1fr;
} 
.technology {
    grid-row: span 4;
    grid-column: span 2;
}
.nasa {
    grid-row: span 2;
    grid-column: span 1;
}
.health {
    grid-row: span 4;
    grid-column: span 2;
}  

// ==============================

// Instructor Solution

main {
    grid-template-columns: 1fr 1fr;
} 
.technology {
    grid-column: span 2;
}
.environment {   
}
.nasa {
    grid-row: span 2;
}
.physics {
}
.health {
    grid-column: span 2;
}  

// =======================================================================
// Aside: Repeat function

.grid-container {
    display: grid;
    gap: .5em;
    grid-template-columns: repeat(8, 1fr);
    /* repeat(how many times, what to repeat) */
    border: 2px solid black;
}

// =======================================================================
// Aside: grid lines

.grid-container {
    display: grid;
    grid-template: repeat(5, 1fr) / repeat(12, 1fr);
}

header {
    background-color: palegoldenrod;
    /* grid-column-start: 1;
    grid-column-end: 13; */
    grid-column: 1 / 13;
}

header {
    background-color: palegoldenrod;
    /* grid-column-start: 1;
    grid-column-end: 13; */
    grid-column: 1 / -1;
}

/* 
Challenge:
   1. Add the necessary grid-column and grid-row 
   lines to complete this layout. Only write 
   the CSS you need - let the algorithm do the rest. 

 */

// =======================================================================
// Laptop view with grid lines

/*
Challenge:
    1. Create a 12 column layout. 
       (Don’t write 1fr 12 times 😡)
    2. Place the items using grid lines.
       (📝 Try to write as little CSS as possible.)  
*/

main {
    grid-template: repeat(2, 1fr) / repeat(12, 1fr);
}

.technology {
    grid-column: 1 / 6;
}

.environment {
    grid-column: 6 / 9;
}
    
.nasa {
    grid-column: 9 / 13;
}

.physics { 
    grid-column: 1 / 3;
}

.health {
    grid-column: 3 / 9;
}

// =======================================================================
// Aside: grid template areas and Dev Tools

.grid-container {
    display: grid;
    grid-template: repeat(5, 1fr) / repeat(12, 1fr);
    grid-template-areas: 
        "head head head head head head head head head head head head"
        "nav nav main main main main main main main aside aside aside"
        "nav nav main main main main main main main aside aside aside"
        "nav nav main main main main main main main aside aside aside"
        "foot foot foot foot foot foot foot foot foot foot foot foot";
}

header {
    grid-area: head;
    background-color: palegoldenrod;
}

// =======================================================================
// Convert to grid template areas

/*
Challenge 2:
    1. Use grid-template-areas to define 
       the layout at each size.
       (Keep the existing column templates.) 
*/

main {
    display: grid;
    gap: 1em;
    grid-template-columns: 1fr;
    grid-template-areas: 
    "t"
    "e"
    "n"
    "p"
    "h";
}

@media (min-width: 500px) {
    main {
        grid-template-columns: 1fr 1fr;
        grid-template-areas: 
        "t t"
        "e n"
        "p n"
        "h h"
        ;
    } 
}

@media (min-width: 870px) {
    main {
        grid-template-columns: repeat(12, 1fr);
        grid-template-areas: 
        "t t t t t t e e e n n n"
        "p p p h h h h h h n n n"
        ;
    }
}

// =======================================================================
// Aside: A responsive image grid

// grid-auto-rows
// Specify a given height value to all implicitly generated row tracks

.grid-container {
    display: grid;
    grid-gap: .5em;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-rows: 75px;
}

// auto-fit
// Fit as many columns to the grid as possible.

.grid-container {
    display: grid;
    grid-gap: .5em;
    grid-template-columns: repeat(auto-fit, 100px);
    grid-auto-rows: 75px;
}

// =======================================================================
// Aside: grid-auto-flow: dense and MinMax

// grid-auto-flow: dense
// Pack the grid items as densely as possible.

// minmax(min, max)
// Defines a size range greater than or equal to min and less then or 
// equal to max

.grid-container {
    display: grid;
    grid-gap: .5em;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-auto-rows: 75px;
    grid-auto-flow: dense;
}

// =======================================================================
// Use minmax

/*
Challenge:
    1. Make sure the last 3 columns are a minimum 
       of 70px each and a maximum of 1fr.
*/

main {
    /* grid-template-columns: repeat(12, 1fr); */
    grid-template-columns: repeat(9, 1fr), repeat(3, minmax(70px, 1fr));
    grid-template-areas: 
        "tech tech tech tech tech tech envi envi envi nasa nasa nasa"
        "phys phys phys heal heal heal heal heal heal nasa nasa nasa"
}

// =======================================================================
// The header and footer

/* 
Challenge:
    1. Get the header, main, and footer 
       into a vertical column. 
    2. Put an em of space between them 
       vertically.
    3. Put an em of space above the header, 
       below the footer, and to the left and 
       right of all three elements.  
    🤔 Have you learned any good techniques 
       for creating empty rows/columns in a grid?
    ⚠️ You do NOT need to use the 'margin' 
       property to complete this challenge.
    🛟 hint.md for help!
 */

 body {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 1em;
    grid-template-areas: 
    ". h ."
    ". m ."
    ". f ."
    ;
}

// Instructor Solutiuon

body {
    display: grid;
    grid-template-columns: 1em 1fr 1em;
    grid-template-areas: 
        ".... head ...."
        ".... main ...."
        ".... foot ....";
    gap: 1em 0;
}

.site-header {
    grid-area: head;
}

footer {
    grid-area: foot;
}

// =======================================================================
// Full project CSS
// =======================================================================

html, body {
    margin: 0;
    padding: 0;
    font-family: 'Manrope', sans-serif;
}

/* =================
    Site Layout 
   ================= */
/* 
Challenge:
    1. Get the header, main, and footer 
       into a vertical column. 
    2. Put an em of space between them 
       vertically.
    3. Put an em of space above the header, 
       below the footer, and to the left and 
       right of all three elements.  
    🤔 Have you learned any good techniques 
       for creating empty rows/columns in a grid?
    ⚠️ You do NOT need to use the 'margin' 
       property to complete this challenge.
    🛟 hint.md for help!
 */

body {
    display: grid;
    grid-template-columns: 1em 1fr 1em;
    grid-template-areas:
        ".... .... ...." 
        ".... head ...."
        ".... main ...."
        ".... foot ...."
        ".... .... ....";
    gap: 1em 0;
}

.site-header {
    grid-area: head;
}

footer {
    grid-area: foot;
}

/* =================
    Main Element Layout 
   ================= */
   
main {
    grid-area: main;
    display: grid;
    gap: 1em;
    grid-template-columns: 1fr;
    grid-template-areas: 
        "tech"
        "envi"
        "nasa"
        "phys"
        "heal";     
}

@media(min-width: 500px) {
    main {
        grid-template-columns: 1fr 1fr;
        grid-template-areas: 
            "tech tech"
            "envi nasa"
            "phys nasa"
            "heal heal"
    } 
}
   
@media(min-width: 870px){
    main {
        grid-template-columns: repeat(12, 1fr);
        grid-template-columns: repeat(9, 1fr) repeat(3, minmax(70px, 1fr));
        grid-template-areas: 
            "tech tech tech tech tech tech envi envi envi nasa nasa nasa"
            "phys phys phys heal heal heal heal heal heal nasa nasa nasa"
    }
}

.technology {
    grid-area: tech;
}
    
.environment {
    grid-area: envi;
}

.nasa {
    grid-area: nasa;
}

.physics { 
    grid-area: phys;
}

.health {
    grid-area: heal;
}

/* =================
    Article Card 
   ================= */
   
a:hover, a:focus {
    filter: brightness(0.9);
}

a:focus {
    outline: 3px solid #5a5a5a;
    box-shadow: 0 0 0 3px rgba(135,18,113,0.5); 
    transition: outline 0.2s ease, box-shadow 0.2s ease;
}

article {
    border-radius: 0.2em;
    background-color: #e5e5e5;
    height: 100%;
}

.article-header {
    box-sizing: border-box;
    padding: 1em;
    width: 100%;
}


/* =================
    Typography 
   ================= */

h1 {
    color: #0F0F0F; 
    letter-spacing: 0.04em;
    font-family: "Source Code Pro", sans-serif;
    margin: 0;
    padding: 0;
}

a {
    text-decoration: none;
}

h2 {
    font-size: 0.88rem;
    color: #5D0E50;
    margin: 0;
    letter-spacing: 0.065em;
    text-transform: uppercase;
}

h3 {
    font-size: 1rem;
    margin: .4em 0;
    letter-spacing: 0.03em;
    color: #111111;
    font-weight: 500;
}

p {
    margin: 0;
    font-size: .85rem;
    color: #7c7c7c;
}

/* =================
    Images 
   ================= */

img {
    width: 100%;
    border-top-left-radius: .2em;
    border-top-right-radius: .2em;
}

// =======================================================================
// Solo Project: Learning Journal
// =======================================================================

// Solo project requirments
// Build each page from scratch
// Make all pages responsive
    // Relative units
    // Mobile-first design
    // Media queries
    // Viewport meta tag

// Stretch goals
// Make it your own!
// Add custom images
// Make the content about your learning experiences
// Add new pages
// Display other recent posts after clicking "View More"
// Display a hamburger menu on mobile devices

// =======================================================================
// SSH/GPG Keys in Github
// =======================================================================

// A method for securely passing data from one place to another
// Provides a very high level of confidence that data is coming from the
// it claims to be coming from

// =======================================================================
// Intro to APIs & BoredBot
// =======================================================================

// =======================================================================
// Intro

// Why APIs?
// Access real data
// Build more interesting apps
// Prepare to learn full-stack

// =======================================================================
// What is an API?

// Application Programming Interface
// An API is any tool that helps connect your program with someone
// else's program.

// API Examples
// Getting data from a server
// The server hots "An API" - exposes "endpoints" we can access for
// getting data from the server.

// Pre-written code we can use to build applications
// DOM API (.getElementById, e.g)

// =======================================================================
// Clients & Servers

// A client is any device that connects to the internet to get data
// from somewhere (makes a 'request').

// A service is just a computer. Accepts requests from clients asking for
// something, then responds to the client with the data it asked for.

// =======================================================================
// JSON Review

// JavaScript Object Notation

// =======================================================================
// First fetch

/**
Challenge:

1. Google for "how to use fetch with json"
2. Should find a top result from MDN
3. MANUALLY copy over the fetch, but using the URL below 👇
    https://dog.ceo/api/breeds/image/random
*/

async function getData() {
  const url = "https://dog.ceo/api/breeds/image/random";
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Response status: ${response.status}`);
    }

    const json = await response.json();
    console.log(json);
  } catch (error) {
    console.error(error.message);
  }
}

// Instructor Solution

fetch("https://dog.ceo/api/breeds/image/random")
    .then(response => response.json())
    .then(data => console.log(data))

// {message: 'https://images.dog.ceo/breeds/terrier-australian/n02096294_6213.jpg', status: 'success'}

// =======================================================================
// Dog API Fetch and DOM Practise

/**
Challenge:

1. Fetch a random image from the Dog API again 
(https://dog.ceo/api/breeds/image/random)

2. Access the DOM and insert the URL you got from the
API as an image `src` property (probably easiest if 
you create the image completely here in the JS and add 
it as the innerHTML of another element on the DOM)
*/

fetch("https://dog.ceo/api/breeds/image/random")
    // turns the response into a JSON/JS object
    .then(response => response.json())
    .then(data => {
        const imgURL = data.message
        const imgL = document.createElement("img")
        const imgContainter = document.getElementById("domIMG")
        imgL.src = imgURL
        imgContainter.innerHTML = imgL.outerHTML
    })

// Instructor Solution

fetch("https://dog.ceo/api/breeds/image/random")
    .then(response => response.json())
    .then(data => {
        console.log(data)
        document.getElementById("image-container").innerHTML = `
            <img src="${data.message}" />
        `
    })

// =======================================================================
// Fetch idea from Bored API

/**
Challenge: 

1. Fetch a random activity from the Bored API
url: https://apis.scrimba.com/bored/api/activity

2. Display the text of the activity in the browser
*/

fetch("https://apis.scrimba.com/bored/api/activity")
    .then(response => response.json())
    .then(data => {
        const text = document.getElementById('textContainer')
        const textHTML = `<h1>${data.activity}</h1>`
        text.innerHTML = textHTML
    })

// Instructor Solution

fetch("https://apis.scrimba.com/bored/api/activity")
    .then(response => response.json())
    .then(data => {
        console.log(data)
        document.getElementById("activity-name").textContent = data.activity
    })

// =======================================================================
// BoredBot - HTML

/**
Challenge: 

- Start building out the BoredBot Skeleton however you'd like. 
    That will include:
    - A title for the app ("BoredBot" might be a good start 😉)
    - A placeholder element that will be populated with the random 
      idea we get from the API
    - A button to click for triggering the GET request to the Bored API. 
      (Don't worry about implementing the button quite yet)
*/

<html>
    <head>
        <link rel="stylesheet" href="index.css">
    </head>
    <body>
        <title>BoredBot</title>
        <div class="activityPlaceholder" id="activityPlaceholder"></div>
        <button class="boredButton" id="boredButton"></button>
        <script src="index.js"></script>
    </body>
</html>

// Instructor Solution

<html>
    <head>
        <link rel="stylesheet" href="index.css">
    </head>
    <body>
        <h1>🤖 BoredBot 🤖</h1>
        <h4>Find something to do</h4>
        <button></button>
        <script src="index.js"></script>
    </body>
</html>

// =======================================================================
// BoredBot - CSS

/**
Challenge: 

- Add some styling! Be creative, play with layout a bit
  (Spoiler: I'm going to use a single-column flexbox layout)
  add some color, grab a font from Google fonts - whatever
  you'd like!
*/

<div class="container">
    <h1>🤖 BoredBot 🤖</h1>
    <h4>Find something to do</h4>
    <button></button>  
</div>


.container{
    display: flex;
    flex-direction: column;
    align-items: center;
}

button {
    padding: 3rem;
    border-radius: 50%;
    border: none;
    background-color: red;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    
}

button:hover {
    transform: translateY(-3px);
    background-color: crimson;
    transition: all 0.3s ease;
    cursor: pointer;
}

// =======================================================================
// BoredBot - JavaScript

const textContainer = document.getElementById('boredActivity')
const buttonElement = document.getElementById('buttonClicker')

buttonElement.addEventListener('click', () => {
  fetch('https://apis.scrimba.com/bored/api/activity')
    .then(response => response.json())
    .then(data => {
      const activity = data.activity
      textContainer.textContent = activity
    })
})

// =======================================================================
// BoredBot - Improve A11y

// Challenge: 
// Try to find 4 changes we could make to our code that would greatly
// improve the app's accessibility for those using assistive technologies

<body>
    <main>			
        <h1 id="title" aria-label="Happy Bot">🤖 BoredBot 🤖</h1>
        <p id="activity" aria-live="Updates new activity">Find something to do</p>
        <button id="get-activity" aria-label="button"></button>
    </main>
    <script src="index.js"></script>
</body>

// Instructor Solution

// When aria-live's attribute is set to polite, assistive technologies will notify users of updates but generally do not interrupt the current task, with the updates having a low priority. When set to assertive, assistive technologies immediately notify the user, potentially clearing the speech queue of previous updates.

// =======================================================================
// URLS, REST & BlogSpace
// =======================================================================

// =======================================================================
// HTTP Requests

// Request/Response Cycle
// Request
// When a client (e.g your computer) asks for a 'resource' from a server.

// Response
// When a sever responds (whether it worked or not) to the client.

// Hypertext Transfer Protocol (HTTP)
// The protocol used to transfer data over the web.
// A protocol is an agreed-upon, standard way of doing something
// HTTP is a protocol for determining how Hypertext (text) should be 
// transferred over the internet. 

// Components of a request
// 1. Path (URL)
// 2. Method (GET, POST, PUT, DELETE)
// 3. Body (only for POST and PUT requests)
// 4. Headers (metadata about the request)

/**
 * Challenge:
 * 
 * Send a request to the JSON Placeholder API using `fetch`
 * URL: https://apis.scrimba.com/jsonplaceholder/posts
 * 
 * Documentation: https://jsonplaceholder.typicode.com/
 * 
 * Log the response data to the console
 */

fetch('https://apis.scrimba.com/jsonplaceholder/posts')
    .then(response => response.json())
    .then(data => console.log(data))

// =============================

// Challenge

// 1. What does HTTP stand for?
// Hypertext Transfer Protocol

// 2. How would you describe what a protocol is to a complete newbie?
// An agreed-upon, standard way of doing something

// 3. Which part of this URL describes the protocol?: 
// https://apis.scrimba.com/jsonplaceholder/posts

// 4. If you had to guess, which request method (GET, POST, PUT, DELETE) would you
// think we made in the previous challenge when we asked for data from the 
// JSON Placeholder API?
// GET!

// =======================================================================
// Requests - URLs and Endpoints

// Path (URL)
// Address where your desired resource 'lives'
// BaseURL vs Endpoint
// BaseURL - htpps://apis.scrimba.com/jsonplaceholder
// Endpoint: /posts
// Full URL: htpps://apis.scrimba.com/jsonplaceholder/posts

// 1. What's the difference between a Base URL and an Endpoint?
// The base URL is the part of the URL that does not change. For example,
// https://google.com/. However, the endpoint does vary depending on what is
// being requested e.g https://google.com/images, https://google.com/maps 


// Given the following URLs from an example API:
// * https://blahblahblah.com/api/v2/users
// * https://blahblahblah.com/api/v2/products
// * https://blahblahblah.com/api/v2/products/123

// 2. Which part is the Base URL?

// https://blahblahblah.com/api/v2/

// 3. What are the available endpoints?

// users
// products
// products/*some id*

// =======================================================================
// Requests - Methods

// GET - Getting data
// POST - Adding new data
// PUT - Updating exisiting data
// DELETE - Removing data
// PATCH - Partially updating existing data

/**
Challenge: 

Fetch a list of todos from the JSON Placeholder API:

BaseURL: https://apis.scrimba.com/jsonplaceholder/
Endpoint: /todos

This time however, explicitly set the request method to "GET"
console.log the results
*/

fetch('https://apis.scrimba.com/jsonplaceholder/todos', {method: "GET"})
    .then(response => response.json())
    .then(data => console.log(data))

// =======================================================================
// BlogSpace - GET first 5 blog posts

/**
 Challenge:
 
 GET a list of blog posts from the JSON Placeholder API.
 
 BaseURL: https://apis.scrimba.com/jsonplaceholder/
 Endpoint: /posts
 
 Since there's so many posts, let's limit the array to just 5 items.
 You can use the `.slice()` array method to just grab the first 5 objects
 from the data array that comes back from the API
 
 Log the 5 items to the console
 */

 fetch('https://apis.scrimba.com/jsonplaceholder/posts')
    .then(res => res.json())
    .then(data => {
        const slicedArray = data.slice(0, 5)
        console.log(slicedArray)
        })

// =======================================================================
// BlogSpace - Display blogs on page

/**
 Challenge:

 With the 5 blog post objects, display the `title` and `body`
properties of the first 5 posts on the browser page.
 
 Hints: 
 * Create a `div` in the HTML file to store these items
 * Loop over the items creating a string of HTML elements you 
   can then put into the div with `innerHTML`
 */

fetch("https://apis.scrimba.com/jsonplaceholder/posts")
    .then(res => res.json())
    .then(data => {
        const postsArr = data.slice(0, 5)
        const apiContainer = document.getElementById('apiContainer')
        const postGenerator = ((arr) => {
            return arr.map((post) => {
                const { userId, id, title, body } = post
                return `
                <h2>${title}</h2>
                <p>${body}</p>
            `
            }).join('')
        })
        apiContainer.innerHTML = postGenerator(postsArr)
    })

// Instructor Solution

fetch("https://apis.scrimba.com/jsonplaceholder/posts")
    .then(res => res.json())
    .then(data => {
        const postsArr = data.slice(0, 5)
        let html = ""
        for (let post of postsArr) {
            html += `
                <h3>${post.title}</h3>
                <p>${post.body}</p>
                <hr />
            `
        }
        document.getElementById("blog-list").innerHTML = html
    })

// =======================================================================
// BlogSpace - Add styling

/**
 Challenge:

 Style it up!
 
 * Add a short (~30px height) fixed navbar at the top with the text "BlogSpace". Remember to pad the top of your content so it doesn't get hidden behind the navbar.
 * Add a font from Google Fonts.
 * Any other styling you want to make it look nice!
 
 */


 body {
    font-family: 'Karla', sans-serif;
    margin: 0;
}

.navBar{
    display: flex;
    height: 30px;
    top: 0;
    background-color: azure;
    margin: 0;
}

.navBar,
#blog-list {
    padding: 1rem;
}

h1{
    margin: 0;
}

// Instructor Solution

body {
    margin: 0;
    padding: 0;
}

// floating navbar
nav {
    background-color: beige;
    padding: 5px;
    height: 30px;
    display: flex;
    align-items: center;
    position: fixed;
    width: 100%;
}

nav > h3 {
    margin: 0;
}

#blog-list {
    padding: 30px 10px 10px;
}

// =======================================================================
// BlogSpace - New post form


// Challenge:

// Create a form with 2 inputs (each with an associated label), 
// one for the post title (a text input) and one for the post body
// (a textarea element). Then add a button to the form. 

// Don't worry about styling quite yet.

    <form>
    <label for="postTitle">Title</label>
    <input type="text" id="postTitle" name="postTitle">
    <label for="postBody">Body</label>
    <textarea id="postBody" name="postBody" rows="2" cols="30">
    The cat was playing in the garden.
    </textarea>
    <button></button>
    </form>

// =======================================================================
// BlogSpace - Add style to form

/* 
Challenge: our form is hideous! Make it less hideous :P

* Lay out the elements in a nicer way, maybe vertically. 
  (CSS Grid or Flexbox should make this easy)
* Add some background color to separate it from the posts
* Style the button however you'd like.
*/

form {
    padding: 60px 10px 10px;
    display: flex;
    flex-direction: column;
    background-color: azure;
    gap: 0.5rem;
}

form > button {
    background-color: bisque;
    padding: 0.25rem;
    border: none;
    border-radius: 3px;
}

button:hover{
    transition: all 0.4s ease;
    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
    cursor: pointer;
}

// =======================================================================
// BlogSpace - Form submit event listener

/**
 Challenge:
 
 * Listen for the "submit" event on the form (which will happen when the button is clicked)
    * (Don't forget to preventDefault on the form so it doesn't refresh your page. Google "form preventDefault" if you're not sure what I'm talking about)
 * Combine the title value and body value into an object (with a "title" property and "body" property)
 * Log the object to the console

*/

const form = document.querySelector('form')

form.addEventListener('submit', (event) => {
    event.preventDefault()
    
    const postTitle = document.getElementById('post-title')
    const postBody = document.getElementById('post-body')
    
    const post = {title: postTitle.value, body: postBody.value}
    console.log(post)
})

// Instructor Solution

document.getElementById("new-post").addEventListener("submit", function(e) {
    e.preventDefault()
    const postTitle = document.getElementById("post-title").value
    const postBody = document.getElementById("post-body").value
    const data = {
        title: postTitle,
        body: postBody
    }
    console.log(data)
})

// =======================================================================
// Requests - Body

// The data we want to send to the server
// Only makes sense with a POST and PUT requests
// Needs to be put into JSON first

// Change this to a POST request
fetch("url", {method: 'POST'})

/**
Challenge:

- Send a request to add a new todo item
    - BaseURL: https://apis.scrimba.com/jsonplaceholder/
    - Endpoint: /todos
- Body object should contain a "title" property (string) 
  and a "completed" property (boolean)
- Don't add the .then() blocks yet - we have 1 more thing 
  to do before it'll work correctly

*/

fetch("https://apis.scrimba.com/jsonplaceholder/todos", {
    method: "POST",
    body: JSON.stringify({
        title: "Buy Milk",
        completed: false
    })
})

// Part 2 - add the .then blocks to check the data coming back

fetch("https://apis.scrimba.com/jsonplaceholder/todos", {
    method: "POST",
    body: JSON.stringify({
        title: "Buy Milk",
        completed: false
    })
})
.then(response => response.json())
.then(data => console.log(data))

// =======================================================================
// Requests - Headers

// Extra/meta information about the outgoing request
// Auth, body info, cliet info, ect.

/**
 * Challenge:
 * 
 * Check this website for how to change the Content-Type header
 * to indicate that there's JSON in the request body.
 * 
 * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options
 * 
 * Apply that header to our fetch request, send it, and check what comes back.
 */

 fetch("https://apis.scrimba.com/jsonplaceholder/todos", {
    method: "POST",
    headers: {
        "content-type": "application/json",
    },
    body: JSON.stringify({
        title: "Buy Milk",
        completed: false
    })
})
    .then(res => res.json())
    .then(data => console.log(data))

// =======================================================================
// BlogSpace - Send new post to server

/**
    * Challenge: Send this off to the server!
    * 
    * 1. BaseURL: https://apis.scrimba.com/jsonplaceholder/
    * 2. Endpoint: /posts
    * 3. method: ???
    * 4. Request body: ??? (Remember to turn it into JSON)
    * 5. Headers: ??? (Check the JSON Placeholder API docs or past casts for help)
    */

   document.getElementById("new-post").addEventListener("submit", function (e) {
    e.preventDefault()
    const postTitle = document.getElementById("post-title").value
    const postBody = document.getElementById("post-body").value
    const data = {
        title: postTitle,
        body: postBody
    }

    fetch('https://apis.scrimba.com/jsonplaceholder/posts', {
        method: 'POST',
        headers: {
            "content-type": "application/json"
        },
        body: JSON.stringify({
            title: data.title,
            body: data.body
        })
    })
    .then(res => res.json())    
}) 

// Instructor Solution

const options = {
    method: "POST",
    body: JSON.stringify(data),
    headers: {
        "Content-Type": "application/json"
    }
}

fetch("https://apis.scrimba.com/jsonplaceholder/posts", options)
    .then(res => res.json())
    .then(data => {
        console.log(data)
        /**
            * Challenge: Update the DOM with the new blog entry
            */
    })

// =======================================================================
// BlogSpace - Add new post to list of posts

/**
    * Challenge: Update the DOM with the new blog entry
    */

document.getElementById("new-post").addEventListener("submit", function(e) {
    e.preventDefault()
    const postTitle = document.getElementById("post-title").value
    const postBody = document.getElementById("post-body").value
    const data = {
        title: postTitle,
        body: postBody
    }
    
    const options = {
        method: "POST",
        body: JSON.stringify(data),
        headers: {
            "Content-Type": "application/json"
        }
    }
    
    fetch("https://apis.scrimba.com/jsonplaceholder/posts", options)
        .then(res => res.json())
        .then(data => {
            
            let html = ""
                console.log(data)
                html += `
                <h3>${data.title}</h3>
                <p>${data.body}</p>
                <hr />
            `
        document.getElementById("blog-list").innerHTML = html + document.getElementById("blog-list").innerHTML
     })
})

// Instructor Solution



// =======================================================================
// BlogSpace - Posts Refactor

/**
    * Challenge: Use our new renderPosts function to clean up this code.
    * 
    * Don't forget to update the postsArray variable first!
    */

function renderPosts() {
    let html = ""
    for (let post of postsArray) {
        html += `
            <h3>${post.title}</h3>
            <p>${post.body}</p>
            <hr />
        `
    }
    document.getElementById("blog-list").innerHTML = html
}

fetch("https://apis.scrimba.com/jsonplaceholder/posts", options)
    .then(res => res.json())
    .then(post => {
        postsArray.unshift(post)
        renderPosts()
    })

// =======================================================================
// BlogSpace - Reset form

/**
    * Challenge: clear the form out!
    */

fetch("https://apis.scrimba.com/jsonplaceholder/posts", options)
    .then(res => res.json())
    .then(post => {
        postsArray.unshift(post)
        renderPosts()
        document.getElementById("new-post").reset();
    })

// =======================================================================
// REST

// Representation State Transfer

// REST is a design pattern to provide a standard way for clients and 
// servers to communicate

// Principles of REST
// The difference between regular API and REST API is that, with a regular
// GET request, the server may build the html page with the data, and then
// send it back to the client. Which works fine for devies with browers.
// However, with REST API, the server sends just the JSON data back to the
// client, and the client is responsible for building the page with that data.

// =======================================================================
// REST API Design

// Statelessness
// The server does not store any information about the client.
// Each request is independent and contains all the information needed to
// process it.

// Bicyle Shop API
// /bikes
// GET
// POST
// /bikes/:id (e.g /bikes/123)
// GET
// PUT
// DELETE

// =======================================================================
// Nested Resources

// bikes/:id/reviews (e.g/bikes/123/reviews)

// =======================================================================
// URL Parameters - JSON Placeholder API

/**
 * Challenge: GET all the comments from the blog post with ID of 2 and log to the console
 * 
 * BaseURL: https://apis.scrimba.com/jsonplaceholder/
 * Endpoint: ??? (Check JSON Placeholder docs: https://jsonplaceholder.typicode.com/guide/ and look for the "Listing nested resources" section)
 */

 fetch('https://apis.scrimba.com/jsonplaceholder/posts/2/comments')
    .then(res => res.json())
    .then(data => console.log(data))


// =======================================================================
// Query Strings
// A way to filter results
// /bikes?type=mountain
// /bikes?type=road?brand=trek
// /bikes?type=hybrid?brand=trek?color=gray

// At Mike's Bikes, they also sell bike racks (endpoint is /bikeracks).

// What would you expect the endpoints to be for the following tasks:

// 1. Get a list of all bike racks sold on the site?
// GET/bikeracks

// 2. Get a list of all bike racks available in the physical store right now?
//    (Assume a query called "available" that is a boolean true/false)
// GET/bikeracks?available=true

// 3. Get a list of all "Thule"-brand bike racks that can hold 4 bikes?
//    (Assume there are "brand" and "numBikes" queries)
// GET/bikeracks?brand=Thule&numBikes=4

// =======================================================================
// Query Strings Practice - OpenWeatherMap API

/**
 * Challenge part 1: GET the current weather for your city with 
 * the Open Weather API and log it to the console.
 * 
 * BaseURL: https://apis.scrimba.com/openweathermap/data/2.5/
 * Endpoint: /weather
 * Query: ??? (https://openweathermap.org/current)
    * NOTE: It says you need to include `appid` in your query, but you can skip that this time
 */

fetch('https://apis.scrimba.com/openweathermap/data/2.5/weather?q=nottingham')
	.then(res => res.json())
	.then(data => console.log(data))

// Challenge part 2: change the units into something that makes more sense to you
// than Kelvin

fetch("https://apis.scrimba.com/openweathermap/data/2.5/weather?q=salt lake city&units=metric")
    .then(res => res.json())
    .then(data => console.log(data)

// =======================================================================
// Solo Project - Color Scheme Generator

//Requirements
// Choose "seed color" with an <input type=color />
// Choose color scheme mode in <select> box
// Clicking button makes request to The Color API to get a color scheme
// Display the scheme colors and hex values on the page
// Stretch goal: click hex values to copy to clipboard

// =======================================================================
// Async JavaScript & War
// =======================================================================

// =======================================================================
// Async JS Intro & War Project

// Synchronous JavaScript
// Each command must complete before the next command can execute
// No two commands can be running at the same time as each other
// E.g for loops, console.log(), variable declaratio, ect...

// Asynchronous JavaScript
// Code that can be run 'out of order'. Allows a length operation to start,
// but finish at a later time without blocking other code from running
// in the meantime.
// E.g setTimeout, setInterval, fetch(), event listeners, ect...

// JavaScript isn't truly asynchornous, but rather has 'callback' mehcanisms
// in place to run commands in a different order to make things more efficient

// Single-threated, means only one cammand can run at a time

// =======================================================================
// Callbacks Setup Challenge

/**
 Challenge: Add a button that, when clicked, gets a new deck of cards from the deckofcards API
 
 URL: https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/
 
 Log the whole response to the console
 */

const cardButton = document.getElementById('newCards')

cardButton.addEventListener('click', () => {
    fetch('https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/')
        .then(res => res.json())
        .then(data => console.log(data))
})

// =======================================================================
// Callback functions intro

// Functions are a first-class object in JavaScript

// =======================================================================
// Seperate event listener callback

/**
 * Challenge: Define our anonymous callback function as a separate function, then
 * pass it as the 2nd parameter to our `addEventListener`
 */

document.getElementById("new-deck").addEventListener("click", api, {

})

function api(){
    fetch("https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/")
        .then(res => res.json())
        .then(data => console.log(data))
}

// =======================================================================
// Callbacks - revisiting setTimeout

/**
 * Challenge: 
 * 
 * Part 1: write a `setTimeout` command. Have it wait for 2000 ms before logging "I finally ran!" to the console
 * 
 * Part 2: Upcoming...
 */

 setTimeout(() => {
    console.log('I finally ran')
}, 2000)

setTimeout(function() {
    console.log('I finally ran')
}, 2000)

// Part 2: Move the anonymous in-line function to its own, named function

function ran() {
    console.log("I finally ran!")
}

setTimeout(ran, 2000)

// =======================================================================
// Callbacks - revisiting array.filter

/**
 * Challenge: 
 * 
 * Part 1: Given the array of objects below, create a new array with the `.filter()` array method that contains only the objects where "hasPet" is true
 * 
 * 
 * Part 2: Move the anonymous in-line function to its own, named function
 */

const people = [
    { name: "Jack", hasPet: true },
    { name: "Jill", hasPet: false },
    { name: "Alice", hasPet: true },
    { name: "Bob", hasPet: false },
]

function pet(pets){
    if (pets.hasPet === true){
        return console.log(pets)
    }  
}

people.filter(pet)

// Instructor Solution

const peopleWithPets = people.filter(peopleFilter)
console.log(peopleWithPets)

function peopleFilter(person){
    return person.hasPet
}

// Instructor Refined

const gimmeThePets = person => person.hasPet

const peopleWithPets = people.filter(person => person.hasPet)
console.log(peopleWithPets)

// =======================================================================
// Callbacks - make own filterArray function

/**
 * Challenge: 
 * 
 * Write your own `filter` function! Don't worry about adding it to the prototype of arrays or anything.
 * This function should take 2 parameters:
 * 1. The array you want to filter through, and
 * 2. A callback function
 * 
 * Steps for filterArray function logic:
 * 1. Initialize a new, empty array which will be returned at the end of the `filterArray`s operations (Completed ✅)
 * 2. Loop through the array passed as the 1st parameter (Completed ✅)
 * 3. Inside the loop, call the callback function, passing the individual item you're currently looping over as the argument to your callback function (Completed ✅)
 * 4. If the callback function returns `true`, push the current item you're iterating on in the loop to the new array. If it returns `false`, don't push it to the array. (Completed ✅)
 * 5. When the loop is over, return the new array (Completed ✅)
 */

 const people = [
    { name: "Jack", hasPet: true },
    { name: "Jill", hasPet: false },
    { name: "Alice", hasPet: true },
    { name: "Bob", hasPet: false },
]

function filterArray(array, callback) {
    const resultingArray = []
    for (let i = 0; i < array.length; i++){
        callback(array[i]) 
            if (callback(array[i]) === true){
                resultingArray.push(array[i])
            }
    }
    return resultingArray
}

// Instructor Solutions

const people = [
    { name: "Jack", hasPet: true },
    { name: "Jill", hasPet: false },
    { name: "Alice", hasPet: true },
    { name: "Bob", hasPet: false },
]

function filterArray(array, callback) {
    const resultingArray = []
    for (let item of array) {
        const shouldBeIncluded = callback(item)
        if (shouldBeIncluded) {
            resultingArray.push(item)
        }
    }
    return resultingArray
}

// =======================================================================
// Callbacks - put our custom filterArray function to use

/**
 * Challenge: Use your filter array method!
 * Given the above `people` array, return a new array with only people where `hasPet` is true
 * Note: Remember that your callback function will be given the individual item in the array for a parameter
 */

 function peopleWithPet(people){
    return people.hasPet
}

const peopleWithPets = filterArray(people, peopleWithPet)


// Instructor Solution

const peopleWithPets = filterArray(people, function(person) {
    return person.hasPet
})

const peopleWithPets = filterArray(people, person => person.hasPet)

// =======================================================================
// Thought experiment: what if 'fetch' used callbacks?

function handleClick() {
    fetch("https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/", function(response){
        response.json(function(data) {
            console.log(data)
        })
    })
        // .then(res => res.json())
        // .then(data => console.log(data))
}

// =======================================================================
// Promises

// Promise: We'll let you know within a week
// Pending: The promise has yet to be completed. (processing interview)
// Fulfilled: The promise was completed as promised. (feedback on interview)
// Rejected: The promise was not completed as promised. (no feedback within a week)

// =======================================================================
// Context: method chaining

/**
 * Challenge: method chaining!
 * 
 * 1. Select the button in the DOM and add an event listener to it without saving the DOM element as a separate variable. I.e. "chain" the `addEventListener` on after your `getElementById()`(When clicked, log "Clicked" to the console)
 *    - I realize this might feel like busywork, but my intent will make sense soon
 * 
 * 2. Upcoming...
 */

 document.getElementById('new-deck').addEventListener('click', () => console.log('clicked'))

 /**
 * Challenge: method chaining!
 * 
 * 1. Select the button in the DOM and add an event listener to it without saving the DOM element as a separate variable. I.e. "chain" the `addEventListener` on after your `getElementById()`(When clicked, log "Clicked" to the console)
 *    - I realize this might feel like busywork, but my intent will make sense soon
 * 
 * 2. Given the array below, chain the `.filter` and `.map` array methods together to turn the array into an array of string email addresses of only the people in the array who voted. Log the array of email addresses to the console
 */

 const finalArray = voters.filter(voter => voter.voted).map(voter => voter.email)
console.log(finalArray)

// =======================================================================
// Promises - passing basic values in the chain

fetch("https://apis.scrimba.com/bored/api/activity")
    .then(function(res) {
        return "Hello"
    })
    .then(function(whatever) {
        console.log(whatever)
    })

// .then() is simply a promise, and whatever is returned from the first
// promise, is then passed onto the next one.

/**
 * Challenge:
 * 
 * pass the string "World" down to a 3rd .then() block
 * and log it to the console inside the body of this new
 * 3rd .then() block
 */

 fetch("https://apis.scrimba.com/bored/api/activity")
    .then(function(res) {
        return "Hello"
    })
    .then(function(whatever) {
        console.log(whatever)
    })
    .then(function(world){
        return "World"
    })
    .then(function(log){
        console.log(log)
    })

// =======================================================================
// War - save deckId for later use

/**
 * Challenge
 * 
 * Background:
 * The Deck of Cards API expects us to provide the deck id 
 * of the deck we're playing with so it can remember which
 * cards we've already drawn, how many are remaining in the
 * deck, etc.
 * 
 * Task: save the deck_id from the returned data to a local
 * variable so we can use it later
 */

 let deckID = ''

function handleClick() {
    fetch("https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/")
        .then(res => res.json())
        .then(data => {
            deckID = data.deck_id
            console.log(deckID)
        })
}

document.getElementById("new-deck").addEventListener("click", handleClick)

// =======================================================================
// War - draw 2 cards from our deck

/**
 * Challenge
 * 
 * Task: Using the saved deckId, draw 2 new cards from the deck
 * 
 * Docs for original Deck of Cards API: https://deckofcardsapi.com/#draw-card
 * BaseUrl you'll use: https://apis.scrimba.com/deckofcards/api/deck/
 * (that will replace the base url of https://deckofcardsapi.com/api/deck/)
 * that you'll see in the deck of cards API docs.
 * 
 * 1. Create a new button that, when clicked, draws 2 cards from the deckId
 * you have saved
 *      Note: you'll need to get a new deck every time you refresh the page,
 *      since you're only saving your deckId in a local variable right now
 * 2. Log those 2 cards to the console
 */

 let deckId

function handleClick() {
    fetch("https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/")
        .then(res => res.json())
        .then(data => {
            console.log(data)
            deckId = data.deck_id
        })
}

function drawCards() {
    fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
        .then(res => res.json())
        .then(data => console.log(data.cards))
}

document.getElementById("new-deck").addEventListener("click", handleClick)
document.getElementById("new-cards").addEventListener("click", drawCards)

// Instructor Solution

let deckId
let newDeck = false

function handleClick() {
    fetch("https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/")
        .then(res => res.json())
        .then(data => {
            console.log(data)
            deckId = data.deck_id
            newDeck = true
        })
}

document.getElementById("new-deck").addEventListener("click", handleClick)
    document.getElementById("draw-cards").addEventListener("click", () => {
    if (newDeck) {
        fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
            .then(res => res.json())
            .then(data => console.log(data))
    } else {
        console.log('Please draw a new deck')
    }
})

// =======================================================================
// War - Display our card images

/**
 * Challenge:
 * 
 * Display the images of the 2 cards you drew in the browser.
 * Probably best to use `innerHTML` to insert a couple <img> elements
 * on the page.
 */

 const cardsContainer = document.getElementById("cards-container")

 document.getElementById("draw-cards").addEventListener("click", () => {
    fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
        .then(res => res.json())
        .then(data => {
            const cards = data.cards
            cards.map((images) => {
                cardsContainer.innerHTML += `<img src="${images.image}" id="drawn-cards"></img>`
                })
            })
})

// Instructor Solution

document.getElementById("draw-cards").addEventListener("click", () => {
    fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
        .then(res => res.json())
        .then(data => {
            console.log(data.cards)
            document.getElementById("cards").innerHTML = `
                <img src=${data.cards[0].image} />
                <img src=${data.cards[1].image} />
            `
        })
})

// =======================================================================
// War - Styling part 1

html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    background-image: url('./img/table.png');
    background-size: cover;
}

main{
    display: grid;
    grid-template-rows: repeat(12, 1fr);
    grid-template-columns: repeat(12, 1fr);
    grid-template-areas: 
    "d d d d d . . . . . . ."
    ". . . . . . . . . . . ."
    ". . . . . . . . . . . ."
    ". . . . . . . . . . . ."
    ". . . . . . . . . . . ."
    ". . . . . . . . . . . ."
    ". . . . . . . . . . . ."
    ". . . . . . . . . . . ."
    ". . . . . . . . . . . ."
    ". . . . . . . . . . . ."
    ". . . . . . . . . . . ."
    "s s s s s s s s s s s s";
    height: 100vh;
      margin: 0;
      padding: 0;
      gap: 0;
}

#new-deck, #draw-cards{
    background-color: yellow;
    border: none;
    border-radius: 5px;
}

#new-deck{
    grid-area: d;
}

#draw-cards{
    grid-area: s;
}

// Instructor Solution

body {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

button {
    background-color: #FFF100;
    cursor: pointer;
    border: none;
}

button#new-deck {
    align-self: flex-start;
    padding: 5px;
}

button.draw {
    font-size: 1.2em;
    padding: 5px;
}

// =======================================================================
// War styling part 2

/**
 * Challenge:
 * 
 * Create a spot in the HTML for the cards to be placed in.
 * Typical playing cards have a 5:7 ratio (width-to-height).
 */

 #cardHolder{
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
}

#card1, #card2{
    border: 2px solid black;
    border-radius: 5px;
    width: 100px;
    height: 140px;
}

// Instructor Solution

// =======================================================================
// War - Refactor card image placement

/**
 * Challenge:
 * 
 * Place each of the cards we draw into its respective card-slot
 * Hint: consider using element.children in the DOM instead of
 * giving each card-slot its own unique ID
 * 
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/children
 */

document.getElementById("draw-cards").addEventListener("click", () => {
    fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
        .then(res => res.json())
        .then(data => {
            console.log(data.cards)
            const cards = document.getElementById("cards")
            for (const child of cards.children) {
                const card1 = cards.children[0]
                    card1.innerHTML = `
                        <img src=${data.cards[0].image} class="card" />
                    `
                const card2 = cards.children[1]
                    card2.innerHTML = `
                        <img src=${data.cards[1].image} class="card" />
                    `
            }
        })
})

// Instructor Solution

document.getElementById("draw-cards").addEventListener("click", () => {
    fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
        .then(res => res.json())
        .then(data => {
            console.log(data.cards)
            document.getElementById("cards").children[0].innerHTML = `
                <img src=${data.cards[0].image} class="card" />
            `
            document.getElementById("cards").children[1].innerHTML = `
                <img src=${data.cards[1].image} class="card" />
            `
        })
})

// =======================================================================
// War - Determine the winning card part 1

/**
 * Challenge:
 * 
 * Try to determine which of the 2 cards is the "winner" (has higher value)
 * Aces are the card with the highest "score"
 * 
 * In parts:
 * 
 * 1. Create a function that takes 2 card objects as parameters, 
 * `card1` and `card2`. These card objects have a property called
 * `value`, which can be any one of the following strings, in
 * order of rising "score":
 * 
 * "2", "3", "4", "5", "6", "7", "8", "9", 
 * "10", "JACK", "QUEEN", "KING", "ACE"
 * 
 * I.e. "2" is the lowest score and "ACE" is the highest.
 * 
 * The function should determine which of the 2 cards (`card1`
 * or `card2`) has the higher score, or if they have the same score.
 * 
 * Log which card wins (or "It's a tie!" 
 * if they're the same) to the console
 */

function winner(card1, card2){
    let value1 = card1.value
    let value2 = card2.value
    let score1 = 0
    let score2 = 0
    
    if(value1 === "2"){
        score1 += 2
    } else if(value1 === "3"){
        score1 += 3
    } else if(value1 === "4"){
        score1 += 4
    } else if(value1 === "5"){
        score1 += 5
    } else if(value1 === "6"){
        score1 += 6
    } else if(value1 === "7"){
        score1 += 7
    } else if(value1 === "8"){
        score1 += 8
    } else if(value1 === "9"){
        score1 += 9
    } else if(value1 === "10"){
        score1 += 10
    } else if(value1 === "JACK"){
        score1 += 10
    } else if(value1 === "QUEEN"){
        score1 += 10
    } else if(value1 === "KING"){
        score1 += 10
    } else if(value1 === "ACE"){
        score1 += 11
    }
    
        if(value2 === "2"){
        score2 += 2
    } else if(value2 === "3"){
        score2 += 3
    } else if(value2 === "4"){
        score2 += 4
    } else if(value2 === "5"){
        score2 += 5
    } else if(value2 === "6"){
        score2 += 6
    } else if(value2 === "7"){
        score2 += 7
    } else if(value2 === "8"){
        score2 += 8
    } else if(value2 === "9"){
        score2 += 9
    } else if(value2 === "10"){
        score2 += 10
    } else if(value2 === "JACK"){
        score2 += 10
    } else if(value2 === "QUEEN"){
        score2 += 10
    } else if(value2 === "KING"){
        score2 += 10
    } else if(value2 === "ACE"){
        score2 += 11
    }
    
    if (score1 > score2) {
        console.log('Player 1 is the winner')
    } else if (score2 > score1) {
        console.log('Player 2 is the winner')
    } else {
        console.log("It's a tie!" )
    }
}

// Instructor Solution

function determineCardWinner(card1, card2) {
    const valueOptions = ["2", "3", "4", "5", "6", "7", "8", "9", 
    "10", "JACK", "QUEEN", "KING", "ACE"]
    const card1ValueIndex = valueOptions.indexOf(card1.value)
    const card2ValueIndex = valueOptions.indexOf(card2.value)
    console.log("card 1:", card1ValueIndex)
    console.log("card 2:", card2ValueIndex)
}

// =======================================================================
// War - Dtermine the winning card part 2

/**
 * Challenge:
 * 
 * Try to determine which of the 2 cards is the "winner" (has higher value)
 * Aces are the card with the highest "score"
 * 
 * Part 2:
 * Instead of logging the winner to the console, 
 * display an `h2` on the screen above the 2 cards 
 * that declares who the winner is.
 * 
 * If card1 is the higher card, display "Computer wins!"
 * If card2 is the higher card, display "You win!"
 * If they're equal, display "War!"
 */

const card1 = data.cards[0]
const card2 = data.cards[1]
determineCardWinner(card1, card2)

function determineCardWinner(card1, card2) {
    const valueOptions = ["2", "3", "4", "5", "6", "7", "8", "9", 
    "10", "JACK", "QUEEN", "KING", "ACE"]
    const card1ValueIndex = valueOptions.indexOf(card1.value)
    const card2ValueIndex = valueOptions.indexOf(card2.value)
    console.log("card 1:", card1ValueIndex)
    console.log("card 2:", card2ValueIndex)
    
    const winner = document.getElementById('outcome')
    if (card1ValueIndex > card2ValueIndex) {
        winner.innerHTML = '<h2>Computer Wins!</h2>'
    } else if (card1ValueIndex < card2ValueIndex) {
        winner.innerHTML = '<h2>You win!</h2>'
    } else {
        winner.innerHTML = '<h2>War!</h2>'
    }
}

// Instructor Solution

drawCardBtn.addEventListener("click", () => {
    fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
        .then(res => res.json())
        .then(data => {
            cardsContainer.children[0].innerHTML = `
                <img src=${data.cards[0].image} class="card" />
            `
            cardsContainer.children[1].innerHTML = `
                <img src=${data.cards[1].image} class="card" />
            `
            const winnerText = determineCardWinner(data.cards[0], data.cards[1])
            const winnerHtml = document.getElementById('outcome')
            winnerHtml.innerHTML = winnerText
            console.log(winnerText)
        })
})

function determineCardWinner(card1, card2) {
    const valueOptions = ["2", "3", "4", "5", "6", "7", "8", "9", 
    "10", "JACK", "QUEEN", "KING", "ACE"]
    const card1ValueIndex = valueOptions.indexOf(card1.value)
    const card2ValueIndex = valueOptions.indexOf(card2.value)
    
    if (card1ValueIndex > card2ValueIndex) {
        return "Card 1 wins!"
    } else if (card1ValueIndex < card2ValueIndex) {
        return "Card 2 wins!"
    } else {
        return "War!"
    }
}

// =======================================================================
// War - Display remaining cards on new deck

/**
 * Challenge:
 * 
 * Display the number of remaining cards when we request a new deck, 
 * not just when we draw the 2 cards.
 * 
 * Hint: check the data coming back from when we get a new deck.
 */

 function remainingCards(data){
    remainingText.textContent = `Remaining cards: ${data.remaining}`
}

remainingCards(data)

// =======================================================================
// War - Disable the draw button when we get to 0 cards remaining

/**
 * Challenge:
 * 
 * Disable the Draw button when we have no more cards to draw from
 * in the deck.
 * 
 * Disable both the functionality of the button (i.e. change
 * `disabled` to true on the button) AND the styling (i.e. add
 * a `disabled` CSS class to make it look unclickable)
 */

drawCardBtn.disabled = false     
    if (data.remaining === 0){
    drawCardBtn.disabled = true
    drawCardBtn.style.backgroundColor = 'red'        
}

button:disabled {
    cursor: not-allowed;
}

// =======================================================================
// War - Keep score

/**
 * Challenge:
 * 
 * Keep score! Every time the computer wins a hand, add a point to
 * the computer's score. Do the same for every time you win a hand.
 * If it's a war, no points are awarded to either player. If it's 
 * a war (same card values), no one is awarded points.
 * 
 * Display the computer's score above the top card, display your
 * own score BELOW the bottom card.
 * 
 * Track the scores in a global variable defined at the top of this file
 * 
 * Add to the global scores inside the `determineCardWinner` function below.
 */

const cScore = document.getElementById("cScore")
const pScore = document.getElementById("pScore")
let overallScore = 0
let computerScore = 0
let playerScore = 0

function renderCScore(){
        cScore.textContent = `${computerScore}`
}
function renderPScore(){
        pScore.textContent = `${playerScore}`
}

function handleClick() {
    fetch("https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/")
        .then(res => res.json())
        .then(data => {
            remainingText.textContent = `Remaining cards: ${data.remaining}`
            deckId = data.deck_id
            console.log(deckId)
        })
        overallScore = 0
        computerScore = 0
        playerScore = 0
        renderCScore()
        renderPScore()
}

function determineCardWinner(card1, card2) {
    const valueOptions = ["2", "3", "4", "5", "6", "7", "8", "9", 
    "10", "JACK", "QUEEN", "KING", "ACE"]
    const card1ValueIndex = valueOptions.indexOf(card1.value)
    const card2ValueIndex = valueOptions.indexOf(card2.value)
    overallScore = computerScore + playerScore
    
    if (card1ValueIndex > card2ValueIndex) {
        computerScore += 1
        renderCScore()
        return "Card 1 wins!"
    } else if (card1ValueIndex < card2ValueIndex) {
        playerScore += 1
        renderPScore()
        return "Card 2 wins!"
    } else {
        return "War!"
    }
}

// Instructor Solution

// =======================================================================
// War - display the final winner

/**
 * Challenge:
 * 
 * Display the final winner in the header at the top by
 * replacing the text of the h2.
 */

if (data.remaining === 0) {
drawCardBtn.disabled = true
if(computerScore > myScore){
    header.textContent = 'Better luck next time!'
} else if(computerScore < myScore){
    header.textContent = 'Congratulations!'  
} else{
    header.textContent = 'It is War!'  
}
}

// =======================================================================
// A quick look at Async/Await

// Introduced in ECMAScript 2017 (A>K>A ED8)
// Makes asynchronous code appear to be synchronous
// async goes before the function
// await goes before a method/function that returns a promise.

/**
 * Challenge:
 * 
 * Change async operations below to use async/await instead of .then()
 */

 async function handleClick() {
    const response = await fetch("https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/")
    const data = await response.json()
        remainingText.textContent = `Remaining cards: ${data.remaining}`
        deckId = data.deck_id
        console.log(deckId)
}

drawCardBtn.addEventListener("click", async function drawCard() {
    const response = await fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
    const data = await response.json()

            remainingText.textContent = `Remaining cards: ${data.remaining}`
            cardsContainer.children[0].innerHTML = `
                <img src=${data.cards[0].image} class="card" />
            `
            cardsContainer.children[1].innerHTML = `
                <img src=${data.cards[1].image} class="card" />
            `
            const winnerText = determineCardWinner(data.cards[0], data.cards[1])
            header.textContent = winnerText
            
            if (data.remaining === 0) {
                drawCardBtn.disabled = true
                if (computerScore > myScore) {
                    // display "The computer won the game!"
                    header.textContent = "The computer won the game!"
                } else if (myScore > computerScore) {
                    // display "You won the game!"
                    header.textContent = "You won the game!"
                } else {
                    // display "It's a tie game!"
                    header.textContent = "It's a tie game!"
                }
            }
        })

// Instructor Solution

drawCardBtn.addEventListener("click", async () => {
    const res = await fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
    const data = await res.json()
    remainingText.textContent = `Remaining cards: ${data.remaining}`
    cardsContainer.children[0].innerHTML = `
        <img src=${data.cards[0].image} class="card" />....



// =======================================================================
// Solo Project - Movie Watchlist

// Two pages - index.html and watchlist.html
// INdex = search page. Calls to OMDB API with the title searched for
// displays search results
// Button to 'add to watch list' which saves that data to local storage
// Watchlist.html loads and displays data from local storage

// =======================================================================
// Promise Rejection & Capstone
// =======================================================================

// =======================================================================
// Get photo from Unsplash

/**
 * Challenge: get a random image from Unsplash and set it as the background
 * 
 * Part 1:
 * 
 * URL: https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=nature
 * (You can change the "query" at the end to whatever theme you want)
 * 
 * Change the body's backgroundImage to: 
 * `url(<insert the URL of the iamge from the API here>)`
 * 
 * (You may need to dig around the response body a bit to find this URL)
 * 
 * (Note I've already added some CSS to resize the image within the window.
 * Instructions for this were found on CSS Tricks: 
 * https://css-tricks.com/perfect-full-page-background-image/#awesome-easy-progressive-css3-way)
 */

const backgroundDiv = document.querySelector('body')

fetch('https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=nature')
	.then(res => res.json())
	.then(data => {
		const backgroundURL = data.urls.full
		backgroundDiv.style.backgroundImage = `url(${backgroundURL})`
		})

// Instructor Solution

fetch("https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=nature")
    .then(res => res.json())
    .then(data => {
        document.body.style.backgroundImage = `url(${data.urls.full})`
    })

// =======================================================================
// Add Author Info

/**
 * Challenge part 2: Display the image's author
 * 
 * With the data you've already fetched, display the name of the 
 * image author on the page. They show up as the "user" in the data
 * returned from the API.
 * 
 * Don't worry about positioning the author in the lower-left yet.
 */

 fetch("https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=nature")
    .then(res => res.json())
    .then(data => {
        document.body.style.backgroundImage = `url(${data.urls.regular})`
		const imgAuthor = document.getElementById('imageAuthor')
		imgAuthor.textContent = `${data.user.name}`
		
    })

// =======================================================================
// Set up flexbox

/*
Challenge: Set up flexbox so the three elements are
evenly spread vertically on the screen (don't worry
about the horizontal alignment yet)
*/

main {
    height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

// =======================================================================
// Promise rejection

# Resolved promises quiz

1. What is a promise (in your own words)?
A promise represents the eventual completion or failure of a js asynchronous operation.

2. Which part of the code we have so far is a promise?
fetch('') - returns a promise object

3. What are the three states a promise can be in?
Pending
fulfilled
rejected

4. What does it mean when a promise is "resolved" (or fulfilled)?
It means that the promise has been completed and the user/client receives
a response from their request.

5. How do we tell the code to do something only AFTER a
   promise is resolved?
   
   .then() / is used to handled resolved promises e.g recieivng json format, then, accessing the data..

// When is a promise rejected?
// A promise becomes rejected if an error is thrown inside any of the .then()
// blocks or if the programmer manually calls promise.reject()

// If there has been an error in our promise chain, you can handle it with
// .catch(). This method is chained on to the end of the promise chain...

fetch("https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=;hjksdf;kljsdfgl;kdsjfgljksdfglkjhsdfg")
    .then(res => res.json())
    .then(data => {
        throw Error('I am an error!')
        console.log(data)
        document.body.style.backgroundImage = `url(${data.urls.regular})`
		document.getElementById("author").textContent = `By: ${data.user.name}`
    })
    .catch(err => {
        console.log("Something went wrong")
        // can handle the error here
        // choose to add a default background image.
        })

// Experimenting with .catch()

fetch("https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=;hjkdsdf;kljsdfgl;kdsjfgljksdfglkjhsdfg")
    .then(res => res.json())
    .then(data => {
        throw Error("Promise failed to resolve background img")
        console.log(data)
        // document.body.style.backgroundImage = `url(${data.urls.regular})`
		// document.getElementById("author").textContent = `By: ${data.user.name}`
    })
    .catch(err =>  {
        console.error(err)
        // This is where I can handle the error
        // Choose to use a default background image
        document.body.style.background = "red"
    })

// =======================================================================
// Promise rejection practice

/**
    * Challenge: get a URL for a default background image and set it here
    * 
    * 1. Change the query in the URL above back to something real
    * 2. Log the image url to the console (replacing console.log(data) above)
    * 3. Use that URL as the "default" background image to be used if 
    *    the promise is ever rejected.
    */

fetch("https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=nature")
    .then(res => res.json())
    .then(data => {
        console.log(data.urls.regular)
        document.body.style.backgroundImage = `url(${data.urls.regular})`
		document.getElementById("author").textContent = `By: ${data.user.name}`
        throw Error('Promise failed to load background img, default img loaded.')
    })
    .catch(err => {
        console.error(err)
        document.body.style.backgroundImage = `url('https://images.unsplash.com/photo-1469474968028-56623f02e42e?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxNDI0NzB8MHwxfHJhbmRvbXx8fHx8fHx8fDE3NDUyMjcyOTl8&ixlib=rb-4.0.3&q=80&w=1080')`
    })

// Instructor Solution

// =======================================================================
// Crypto - Add cryptocurrency data

/**
Challenge: Get current data on a cryptocurrency from the list below
    * bitcoin
    * dogecoin
    * ethereum
    * litecoin

1. Search the API docs for an endpoint that will 
   get you the "current data for a coin"
   (https://www.coingecko.com/api/documentations/v3#/)

2. Execute a test request from the API docs and skim through 
   the data for anything that you may find interesting to use
   in the dashboard
*/

fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd&include_market_cap=true&include_24hr_vol=true&include_24hr_change=true&include_last_updated_at=true&precision=3')
    .then(res => res.json())
    .then(data => console.log(data))

// =======================================================================
// Crypto - Get Dogecoin data

/**
 * Challenge: Pull down the cryptocurrency data for dogecoin from the 
 * CoinGecko API and log it to the console
 * 
 * Also add a .catch() method to console any errors that might occur to the console
 */

fetch('https://api.coingecko.com/api/v3/coins/dogecoin')
    .then(res => res.json())
    .then(data => {
        console.log(data)
        throw Error('Unable to process cryptocurrency data')
    })
    .catch(err => {
        console.error(err)
    })


// =======================================================================
// Check for error responses

fetch("https://api.coingecko.com/api/v3/coins/dogecoins")
    .then(res => {
        console.log(res.status)
        return res.json()
    })
    .then(data => {
        console.log(data)
    })
    .catch(err => console.error(err))

// ==============================

// Shortuctts for checking error responses
// res.ok = true if the response was successful (status code 200-299)

fetch("https://api.coingecko.com/api/v3/coins/dogecoinsadasd")
    .then(res => {
        if (!res.ok) {
            throw Error("Something went wrong")
        }
        return res.json()
    })
    .then(data => {
        console.log(data)
    })
    .catch(err => console.error(err))

// =======================================================================
// Crypto - Display name and icon

/**
    * Challenge: Add the name and icon of the cryptocurrency
    * to the upper-left of the dashboard page
    * 
    * Use `data.name` and `data.image.small` to access that info
    */

fetch("https://api.coingecko.com/api/v3/coins/dogecoin")
    .then(res => {
        if (!res.ok) {
            throw Error("Something went wrong")
        }
        return res.json()
    })
    .then(data => {
        console.log(data)
        document.getElementById('cryptoInfo').innerHTML = `<img src="${data.image.small}" /><p>${data.name}</p>`

    })
    .catch(err => console.error(err))

// =======================================================================
// Crypto - get prices

/**
    * Challenge: Add the following data points underneath the 
    * name and icon (1 paragraph each):
    * 
    * 1. Current price (data.market_data.current_price.usd)
    * 2. 24-hour high price (data.market_data.high_24h.usd)
    * 3. 24-hour low price (data.market_data.low_24h.usd)
    * 
    * Feel free to check the response data object for your own currency
    * if you don't want to use USD.
    */

document.getElementById("crypto-body").innerHTML = `
    <span>${data.market_data.current_price.usd}</span>
    <span>${data.market_data.high_24h.usd}</span>
    <span>${data.market_data.low_24h.usd}</span>
`

// Instructor Solution

document.getElementById("crypto").innerHTML += `
    <p>🎯: $${data.market_data.current_price.usd}</p>
    <p>👆: $${data.market_data.high_24h.usd}</p>
    <p>👇: $${data.market_data.low_24h.usd}</p>
`

// =======================================================================
// Time - Add current time with JavaScript

/**
 * Challenge: log the current time to the console, formatted
 * like this:
 * 
 * 1:30 PM
 * 
 * Use Google and Stack Overflow to find the best way.
 * 
 * Good luck! 👍
 */

 const dateSnapshot = new Date()

const hours = dateSnapshot.getHours()
const minutes = dateSnapshot.getMinutes()

function formatTime(hours, minutes){
    time = ``
    if (hours < 12 && minutes > 10){
        time += `${hours}:${minutes} AM`
    } else if (hours < 12 && minutes < 10){ 
        time += `${hours}:0${minutes} AM`
    } else if (hours > 12 && minutes > 10){
        time += `${hours}:${minutes} PM`
    } else {
        time += `${hours}:0${minutes} PM`
    }
    return time
}

console.log(formatTime(hours, minutes))

// Instructor Solution

const date = new Date()
console.log(date.toLocaleTimeString("en-us", {timeStyle: "short"}))

// =======================================================================
// Time - Display time on page

/**
 * Challenges:
 * 
 * 1. Display the current time on the dashboard
 * 2. Update the current time every second
 */

 const date = new Date()
let timeInterval

function changeTime() {
    if (!timeInterval) {
        timeInterval = setInterval(timeRefresh, 1000)
    }
}

function timeRefresh() {
    const date = new Date()
    document.getElementById('time').textContent = date.toLocaleTimeString("en-us", { timeStyle: "short" })
}

changeTime()

// Instructor Solution

function getCurrentTime() {
    const date = new Date()
    document.getElementById("time").textContent = date.toLocaleTimeString("en-us", {timeStyle: "short"})
}

setInterval(getCurrentTime, 1000)

// =======================================================================
// Weather - start

/**
 * Challenge: Learn how to access the user's coordinates
 * by using the Geolocation Web API!
 * 
 * Log the user's position to the console.
 */
navigator.geolocation.getCurrentPosition((position) => {
    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid={API key}`)
    .then(res => res.json())
    .then(data => console.log(data))
//   console.log(position.coords.latitude, position.coords.longitude);
});

// =======================================================================
// Thought experiment - getCurrentLocation as a promise-based API?

/**
 * Thought Experiment:
 * 
 * What would getCurrentPosition() look like if it were
 * using promises instead of callbacks? Replace what we have
 * below with your best guess. (It won't function correctly)
 */

 fetch(getCurrentPosition)
    .then(res => res.json)
    .then(position => console.log(position))

 // Instructor solution

navigator.geolocation.getCurrentPosition()
    .then(position => {
        console.log(position)
    })    

// =======================================================================
// Weather - get user's current weather

/**
 * Challenge: Get the user's current weather for their area and 
 * log it to the console
 * 
 * BaseURL: https://apis.scrimba.com/openweathermap/data/2.5/weather
 * Queries to include: 
 *     - lat (latitude)
 *     - lon (longitude)
 *     - units (imperial or metric)
 */

 navigator.geolocation.getCurrentPosition(position => {
    fetch(`https://apis.scrimba.com/openweathermap/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=metric`)
        .then(res => res.json())
        .then(data => console.log(data))
});

// Instructor Solution

navigator.geolocation.getCurrentPosition(position => {
    fetch(`https://apis.scrimba.com/openweathermap/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=imperial`)
        .then(res => {
            if (!res.ok) {
                throw Error("Weather data not available")
            }
            return res.json()
        })
        .then(data => {
            console.log(data)
        })
        .catch(err => console.error(err))
});

// =======================================================================
// Weather - Add icon

/**
 * Challenge: Display the weather icon as an <img />
 * inside the <div id="weather">
 * 
 * This site shows an example URL for the icon:
 * https://openweathermap.org/weather-conditions
 * 
 * Note: the weather icon is found instead data.weather, which is
 * an array of weather for that area. You can just access the first
 * item in that array to get the icon ID.
 */

    .then(data => {
    console.log(data.weather[0].icon)
    document.getElementById('weather').innerHTML = `
    <img src="https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png" />
    `
})

// =======================================================================
// Weather - Add temp and city

/**
 * Challenge: Display the temperature (rounded to the nearest degree)
 * and the city. Don't worry about the layout for now.
 */

.then(data => {
    console.log(data)
    const iconUrl = `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`
    const temperature = `${data.main.temp}`
    const city = `${data.name}`
    document.getElementById("weather").innerHTML = `
        <img src=${iconUrl} />
        <p>${Math.round(temperature)}</p>
        <p>${city}</p>
    `
})

// =======================================================================
// Weather CSS

/**
 * Challenge: Try to lay out the weather similar to how
 * Momentum does it.
 */

.then(data => {
    const iconUrl = `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`
    document.getElementById("weather").innerHTML = `
    <div class="weatherContainer">
        <div class="weatherTop">
            <img src=${iconUrl} />
            <p>${Math.round(data.main.temp)}º</p>
        </div>
        <p>${data.name}</p>
    </div>
    `
})

.weatherContainer{
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}

.weatherContainer > p{
    margin: 0;
}

.weatherTop{
    display: flex;
    flex-direction: row;
    align-items: center;
}

// Instructor Solution

div#weather {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: flex-end;
    align-self: flex-start;
}

div#weather > img {
    width: 70px;
}

p.weather-city {
    width: 100%;
    text-align: right;
    margin: 0;
    margin-top: -10px;
}

p.weather-temp {
    margin: 0;
    font-size: 1.7rem;
    margin-left: -10px;
}

// =======================================================================
// Update - usuing await

const res = await fetch("https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=nature")
const data = await res.json()
document.body.style.backgroundImage = `url(${data.urls.regular})`
document.getElementById("author").textContent = `By: ${data.user.name}`

const res = await fetch("https://api.coingecko.com/api/v3/coins/dogecoin")
if (!res.ok) {
    throw Error("Something went wrong")
}
return res.json()
const data = await res.json()
document.getElementById("crypto-top").innerHTML = `
    <img src=${data.image.small} />
    <span>${data.name}</span>
`
document.getElementById("crypto").innerHTML += `
    <p>🎯: $${data.market_data.current_price.usd}</p>
    <p>👆: $${data.market_data.high_24h.usd}</p>
    <p>👇: $${data.market_data.low_24h.usd}</p>
`
    // .catch(err => console.error(err))

function getCurrentTime() {
    const date = new Date()
    document.getElementById("time").textContent = date.toLocaleTimeString("en-us", {timeStyle: "short"})
}

setInterval(getCurrentTime, 1000)

/**
 * Challenge: Update the callback below to use async/await
 */

 navigator.geolocation.getCurrentPosition(async position => {
    const res = await fetch(`https://apis.scrimba.com/openweathermap/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=imperial`)
    if (!res.ok) {
        throw Error("Weather data not available")
    }
    const data = await res.json()
    const iconUrl = `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`
    document.getElementById("weather").innerHTML = `
        <img src=${iconUrl} />
        <p class="weather-temp">${Math.round(data.main.temp)}º</p>
        <p class="weather-city">${data.name}</p>
    `
    // .catch(err => console.error(err))
});

// =======================================================================
// Update - try...catch

/**
 * Challenge: Update the code below and in the 
 * getCurrentLocation callback to use try...catch
 */

 try {
    const res = await fetch("https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=nature")
    const data = await res.json()
    document.body.style.backgroundImage = `url(${data.urls.regular})`
    document.getElementById("author").textContent = `By: ${data.user.name}`
} catch (err) {
    document.body.style.backgroundImage = `url(https://images.unsplash.com/photo-1560008511-11c63416e52d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwyMTEwMjl8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjI4NDIxMTc&ixlib=rb-1.2.1&q=80&w=1080
)`
    document.getElementById("author").textContent = `By: Dodi Achmad`   
}

// =======================================================================
// Intro to UI design
// =======================================================================

// =======================================================================
// Welcome to Learn UI design

// Design patterns
// dark mode
// card layouts
// modal dialogs
// shopping carts
// breadcrumbs

// =======================================================================
// Common Design & Non-dev Roles

// User researcher
// Understand user behavior and needs
// Gather and analyse user data
// conduct surverys and market research

// UX designer
// Responsible for the overall feel of the product
// Focus on how users will interact with the product
// Use wireframing tools like Balsamiq, or prototyping tools like Figma..

// UI designer
// focus on designing the user interface of a site
// Create detailed mockups developers use to build the final product
// Use design tools like Figma

// User research & testing
// User testing includes ~A/B testing, heatmaps, and user behavior analytics

// =======================================================================
// White Space

// White space is the empty space between the elements in your user interface

// =======================================================================
// Alignment

// Alignment in UI design in the process of ensuring that every element is 
// positioned correctly in relation to other elements.

// =======================================================================
// Design Challenge: 1

// Left aligning text is a lot better than centre.

// =======================================================================
// Contrast

// Contrast is defined as being in a 'strikingly' different state to
// something else.

// WCAG 2.0 Contrast Guidelines
// (Minimum AA)
// The visual presentation of text and images of text has a contrast ratio
// of at least 4.5:1, except for larger text which should have a contrast
// ratio of atleast 3:1.

// Enhanced AAA
// The visual presentation of text and images has a contrast ratio of at 
// least 7:1, except for larger text which should have a contrast ratio
// of at least 4.5:1.

// =======================================================================
// Scale

// Just as with alignment, white space, contrast, and the other fundamentals,
// the size of every UI element must be carefully considered.

// =======================================================================
// Design Challenge 2

.container {
    width: 90%;
}

.card {
    background: #2C3031;
    padding: 1.5em;
}

p.date {
    text-transform: uppercase;
    font-size: .75em;
    letter-spacing: .1em;
    color: #7A8587;
    margin-bottom: .4em;
}

h3 {
    margin: 0 0 .3em;
    color: #B6EAFF;
    font-size: 1.8em;
}

// =======================================================================
// Typography

// Font choices (maximum 2 type faces), visual hierarchy, font size,
// alignment, letter space & line height, font styles, color & contrast

// =======================================================================
// Color

// The first UI design fundamental that shapes a user's experience is color.

// =======================================================================
// Visual Hierarchy

// Every element on a user interface has a level of importance. Some elements
// are more important than others. Visual hierarchy is the process of ensuring that
// the most important elements are the most visible.

// =======================================================================
// The Final Challenge

// =======================================================================
// Build A Simple Layout
// =======================================================================

// =======================================================================
// Making our Layout dark

span {
    position: relative;
}

span:before {
    position: absolute;
    content: '';
    height: .2em;
    width: 80%;
    bottom: .1em;
    z-index: -1;
    background: #71AE21; 
}

// =======================================================================
// React Basics
// =======================================================================

// =======================================================================
// Static Pages
// =======================================================================

// =======================================================================
// First React Code

// In React applications you render all of the markup within javascript files.
// This is done using a library called ReactDOM.
// That is then rendered to the DOM using a function called ReactDOM.render()

<html>
    <head>
        <link rel="stylesheet" href="/index.css">
    </head>
    <body>
        <div id="root"></div>
        <script src="/index.jsx" type="module"></script>
    </body>
</html>

// =================================

// index.jsx
import { createRoot } from "react-dom/client"

// 1. Create a root
const root = createRoot(document.getElementById("root"))
// 2. Render some markup to the root
root.render(<h1>Hello, React!</h1>)

// =================================

import {createRoot} from "react-dom/client"

createRoot(document.getElementById("root")).render(<p>Hi zere</p>)

// =======================================================================
// First React Challenge

/**
 * Challenge: Set up a React app from scratch again.
 * This time, try rendering an unordered list with 2-3 list items inside
 * with why you're excited to be learning React.
 */

import { createRoot } from 'react-dom/client'

const list = createRoot(document.getElementById('root'))

list.render(
    <ul>
        <label for="1">1:</label>
        <li name="1">To build modern interactive web applications</li>
        <label for="2">2:</label>
        <li name="3">To learn a new technology</li>
        <label for="3">3:</label>
        <li name="3">To get a job I find interesting and enjoy</li>
    </ul>
)

// =======================================================================
// Local Setup w/ Vite

// npm create vite@latest
// cd 'project-name'
// npm install
// npm run dev

// =======================================================================
// Libraries/Frameworks

// Libraries
// Collection of reusable code
// Reduces need to write repetitve/complex things from scratch
// You control how/when it's used.
// Examples: React, Lodash, jQuery

// Frameworks
// Predetermined architecture - you follow a specified pattern of development
// You work within the boundaries set by the framework
// 'Right' and 'wrong' ways to use it

// History
// 2006 - jQuery
// 2010 - AngularJS, ember, Backbone.js
// 2013 - React, Vue.js, Angular 2.0
// 2016 - Svelte, Next.js
// 2020+ - Solid.js, Remix, Astro, quik...

// Why choose React?
// Highest job demand
// Largest ecosystem/community
// Less 'magic'
// Composable/Declarative
// Active development

// When you might NOT want a framework
// Small projects (static pages)
// Network load concerns
// Learning curve
// Maintenance conerns


// =======================================================================
// React.createElement()

import { createElement } from "react"
import { createRoot } from "react-dom/client"

const root = createRoot(document.getElementById("root"))
const reactElement = createElement("h1", null, "Hello from createElement!")

console.log(reactElement)

root.render(
    reactElement
)

// {type: 'h1', key: null, props: {children: 'Hello from createElement!'}, _owner: null, _store: {}}

// =======================================================================
// JSX

import { createRoot } from "react-dom/client"

const root = createRoot(document.getElementById("root"))
const reactElement = <h1>Hello from JSX!</h1>

console.log(reactElement)

root.render(
    reactElement
)

// =======================================================================
// Why React? It's Composable!

// Composable - Can create easily reusable and interchangeable 'pieces of the web'
// that can be combined in various ways to create complex systems

<body>
<MyAwsomeNavBar />
<MainContent />
<MyAwesomeFooter />
</body>

/**
 * Challenge:
 * Create your very first custom React component!
 * Call it "MainContent", and have it return a simple
 * h1 element that says "React is great!"
 * 
 * Afterward, render it on the line below MyAwesomeNavbar
 */

import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

function MainContent(){
    return (
        <h1>React is great</h1>
    )
}

root.render(
    <div>
        <MyAwesomeNavbar />
        <MainContent />
    </div>
)

// =======================================================================
// Why React? It's Declarative!

// Declarative - Can lean on library to handle the manual, tedious tasks that
// we otherwise would have to worry about ourselves.

// Declarative: What should be done - 'Just tell the computer what needs to'
// happen, and the computer will worry about how to do it

// Imperative: How should it be done? - Describe to the computer every step
// on how to do something, and the computer will do it.

/* 
Challenge - recreate the above line of code in vanilla JS by creating and
appending an h1 to our div#root (without using innerHTML).

- Create a new h1 element (createElement)
- Give it some textContent
- Give it a class name of "header"
- append it as a child (using `appendChild`) of the div#root

Don't use innerHTML to accomplish any of this.
    
*/

const root = document.getElementById('root')
const h1Element = document.createElement('h1')
h1Element.textContent = 'Hello World'
h1Element.setAttribute('class', 'header')
root.appendChild(h1Element)


// =======================================================================
// Random Housekeeping

/**
 * Challenge: set up a new React app from scratch!
 * Hints:
 * 1. Need to import the method to create a new root 
 *    from the "react-dom/client" package)
 * 2. Use that root to render some JSX. For now, just render
 *    an h1 element that says anything you want.
 */

 // React function's start with a CAPITAL LETTER function ***HelloWorld***

import { createRoot } from 'react-dom/client'

const root = createRoot(document.getElementById('root'))

function HelloWorld(){
    return <h1>Hello World</h1>
}

root.render(
    <div>
    <HelloWorld />
    </div>
)

// Instructor Solution

import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))
root.render(<h1>This is React!</h1>)

// =======================================================================
// ReactFacts Project - Markup

/*
Challenge: Starting from scratch, build and render the 
HTML for our section project. Check the Google slide for 
what you're trying to build.

We'll be adding more styling to it later.

Hints:
* The React logo is a file in the project tree, so you can
  access it by using `src="react-logo.png"` in your image
  element
* You can also set the `width` attribute of the image element
  just like in HTML. In the slide, I have it set to 40px
 */

import { createRoot } from 'react-dom/client'

const root = createRoot(document.getElementById('root'))

function Logo(){
    return <img width="40px" src="react-logo.png" />
}

root.render(
    <main>
    <Logo />
    <h1>Fun Facts About React</h1>
    <ul>
    <li>Was first release in 2013</li>
    <li>Was originally created by Jordan Walke</li>
    <li>Has well over 100k stars on Github</li>
    <li>Is maintained by Meta</li>
    <li>Powers thousands of enterprise apps, including mobile apps</li>
    </ul>
    </main>
)

// Instructor Solution

import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

root.render(
    <main>
        <img src="react-logo.png" width="40px" alt="React logo" />
        <h1>Fun facts about React!</h1>
        <ul>
            <li>Was first release in 2013</li>
            <li>Was originally created by Jordan Walke</li>
            <li>Has well over 200K stars on GitHub</li>
            <li>Is maintained by Meta</li>
            <li>Powers thousands of enterprise apps, including mobile apps</li>
        </ul>
    </main>
)

// =======================================================================
// Pop quiz

// 1. Where does React put all of the elements I create in JSX when I 
//    call `root.render()`?

// All the elements I render get put inside the div with the id of "root"
// (or whatever other element I might select when calling createRoot)

// 2. What would show up in my console if I were to run this line of code:
// ```
// console.log(<h1>Hello world!</h1>)
// ```
// An object! Unlike creating an HTML element in vanilla DOM JS, what
// gets created from the JSX we have in our React code is a plain JS object
// that React will use to fill in the view.

// 3. What's wrong with this code:
// ```
// root.render(
//     <section>
//         <h1>Hi there</h1>
//         <p>This is my website!</p>
//     </section>
// )
// ```
// You can only render 1 parent element at a time. That parent element can have
// as many children elements as you want.


// 4. What does it mean for something to be "declarative" instead of "imperative"?
// *Imperative* means we need to give specific step-by-step instructions on how to
// accomplish a task.
// *Declarative* means we can write our code to simply "describe" *what* should show up
// on the page and allow the rool (React, e.g.) to handle the details on *how* to 
// put those things on the page.

// 5. What does it mean for something to be "composable"?
// We have small pieces that we can put together to make something
// larger or greater than the individual pieces themselves.

// =======================================================================
// Custom Components

/**
 * Challenge (part 1):
 * Create a custom "Page" component
 * 
 * It should return an ordered list with the reasons why you're
 * excited to be learning React :)
 * 
 * Render the Page component.
 */

import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

function Page(){
    return (
        <ul>
            <li>To build modern web applications</li>
            <li>To learn the latest the technology for web development</li>
            <li>To be able to land an interesting job</li>
        </ul>
    )
}

root.render(
    <main>
        <Page />
    </main>
)

// =======================================================================
// Custom Components Challenge Part 2

/**
Challenge: 

Part 2: 
- Add a `<header>` element with an `<img />` element with the image of the 
  React logo inside (src="react-logo.png") and make sure to set the 
  width to something more manageable so it doesn't take up the whole screen.
  Also, as always, you should include some alt text on the image.
- Add an `<h1>` with some text describing the page. (E.g. "Reasons
  I'm excited to learn React"). Place it above the ordered list, then wrap
  the `<h1>` and `<ol>` inside a `<main>` element to keep our semantic
  structure flowing well.
- Add a `<footer>` after the list that says: 
    "© 20xx <last name here> development. All rights reserved."
 */

import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

function Header(){
    return (
        <header>
            <img src="react-logo.png" width="40px" alt="react logo" />
        </header>
    )
}

function Footer(){
    return (
        <footer>
            <p>© 2025 Herbert development. All rights reserved.</p>
        </footer>
    )
}


function Page() {
    return (
        <main>
            <h1>Reasons I am excited to learn React</h1>
            <ol>
                <li>React is a popular library, so I will be able to
                fit in with all the coolest devs out there! 😎</li>
                <li>I am more likely to get a job as a front end developer
                if I know React</li>
            </ol>
        </main>
    )
}

root.render(
    <div>
        <Header />
        <Page />
        <Footer />
    </div>
)

// Instructor Solution

import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

function Page() {
    return (
        <div>
            <header>
                <img src="react-logo.png" width="40px" alt="React logo" />
            </header>
            <main>
                <h1>Reason I am excited to learn React</h1>
                <ol>
                    <li>React is a popular library, so I will be able to fit in with all the coolest devs out there! 😎</li>
                    <li>I am more likely to get a job as a front end developer if I know React</li>
                </ol>
            </main>
            <footer>
                <small>© 2024 Ziroll development. All rights reserved.</small>
            </footer>
        </div>
    )
}

root.render(
    <Page />
)


// =======================================================================
// Customer Components Quiz

// 1. What is a React component?
// React components are functions that return react elements

// 2. What's wrong with this code?
// ```
// function myComponent() {
//     return (
//         <small>I'm tiny text!</small>
//     )
// }
// ```
// There is no parent element such as <header>, <footer>... Which indicates 
// where the markup belongs to. Also, the naming convention of the function 
// isn't appropriate and does not signify the use of the function. They should 
// also start with capital letters.

// 3. What's wrong with this code?
// ```
// function Header() {
//     return (
//         <header>
//             <img src="./react-logo.png" width="40px" alt="React logo" />
//         </header>
//     )
// }

// root.render(Header())
// ```

// the header function has not been imported semantically correct to work 
// with React / Vite - it should be <Header />

// =======================================================================
// Fragments

import { createRoot } from "react-dom/client"
import { Fragment } from 'react'

// No need to use <Fragment></Fragment>

import { createRoot } from "react-dom/client"

const root = createRoot(document.getElementById("root"))

function Page() {
    return (
        <>
            <header>
                <img src="react-logo.png" width="40px" alt="React logo" />
            </header>
            <main>
                <h1>Reason I am excited to learn React</h1>
                <ol>
                    <li>React is a popular library, so I will be able to fit in with all the coolest devs out there! 😎</li>
                    <li>I am more likely to get a job as a front end developer if I know React</li>
                </ol>
            </main>
            <footer>
                <small>© 2024 Ziroll development. All rights reserved.</small>
            </footer>
        </>
    )
}

root.render(
    <Page />
)

// =======================================================================
// Custom Components - Parent/Child Components

/** Mini Challenge:
 * 
 * Move the `header` element from the Page component into 
 * its own component called "Header"
 * 
 * Then render an instance of the Header component inside
 * the Page component where the `header` used to be.
 */

 import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

function Header() {
    return (
        <header>
            <img src="react-logo.png" width="40px" alt="React logo" />
        </header>
    )
}

function Page() {
    return (
        <>
            <Header />
            <main>
                <h1>Reason I am excited to learn React</h1>
                <ol>
                    <li>React is a popular library, so I will be able to fit in with all the coolest devs out there! 😎</li>
                    <li>I am more likely to get a job as a front end developer if I know React</li>
                </ol>
            </main>
            <footer>
                <small>© 2024 Ziroll development. All rights reserved.</small>
            </footer>
        </>
    )
}

root.render(
    <Page />
)

/** Challenge: 
 * Move the `main` element into its own component called "MainContent" 
 * and render that component inside the Page component.
 * 
 * Do the same with the `footer` element, moving it into a new
 * component called "Footer"
*/

import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

function Header() {
    return (
        <header>
            <img src="react-logo.png" width="40px" alt="React logo" />
        </header>
    )
}

function MainContent(){
    return (
        <main>
            <h1>Reason I am excited to learn React</h1>
            <ol>
                <li>React is a popular library, so I will be able to fit in with all the coolest devs out there! 😎</li>
                <li>I am more likely to get a job as a front end developer if I know React</li>
            </ol>
        </main>     
    )
}

function Footer(){
    return (
        <footer>
            <small>© 2024 Ziroll development. All rights reserved.</small>
        </footer>     
    )
}

function Page() {
    return (
        <>
            <Header />
            <MainContent />
            <Footer />
        </>
    )
}

root.render(
    <Page />
)


// =======================================================================
// Styling with Classes

/**
 * Challenge:
 * 
 * Using flexbox, line up the `li`s horizontally and put them inline
 * with the React logo.
 * 
 * NOTE: for practice's sake, don't select any
 * elements, but use classes for all styling.
 */

 header{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
}

.nav-list{
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
    font-size: 1.15rem;
}

.nav-list > li:hover{
    text-decoration: underline;
    cursor: pointer;
}

// =======================================================================
// Organising Components

// =======================================================================
// Make Mental Outline of Project

// =======================================================================
// Initial Project Setup

/**
Challenge: Project setup

- Create an App component in a separate App.jsx file which is a sibling
  to this index.jsx file.
- Create a `components` folder
- Create the following components in separate files inside
  the components folder. In each one, just render an `h1` 
  with the name of the component (e.g. return <h1>Navbar goes here</h1>):
    - Navbar
    - Main
- Have App component import and render the Navbar and Main components
- Import and render the App component inside of index.jsx using ReactDOM
    - At this point you should have your "Navbar goes here" etc. showing up
      in the mini-browser.
- Go to Google fonts and get the "Inter" font with weights 400, 600, and 700.
  Put the `<links />` to those fonts ABOVE the style.css link in index.html.
  You may need to do some extra research to figure out how this 
  works if you haven't done it before.
*/

// =======================================================================
// ReactFacts Project - Navbar & Styling

header{
    display: flex;
    background-color: #21222A;
    height: 91px;
}

nav{
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
    align-items: center;
    margin-left: 1rem;
}

.logo{
    width: 40px;
    height: 40px;
}

.logoText{
    font-weight: 700;
    font-size: 1.5rem;
    color: #61DAFB;
}

// =======================================================================
// ReactFacts Project - Main Content

// =======================================================================
// ReactFacts Project - Coloring the Bullets

.facts-list > li::marker {
    color: #61DAFB;
    font-size: 2rem;
}

// =======================================================================
// ReactFacts Project - Add Background Image

main {
    padding: 60px 30px;
    background-image: url(/images/react-logo-half.png);
    background-repeat: no-repeat;
    background-position: right 70%;
}

// =======================================================================
// Data-Driven React
// =======================================================================

// =======================================================================
// Travel Journal - Header

/**
 * Challenge:
 * 
 * - Create an App component in a separate file.
 *   Import it here and render it
 * - Create a "components" folder and a Header component.
 *   Render the Header inside the App component.
 * - Follow the Travel Journal design to build the Header
 *   for our page.
 */

// Header.jsx

export default function Header(){
    return(
        <header>
            <nav>
                <img src="./globe.png" className="logo" alt="globe logo" />
                <span>my travel journal.</span>
            </nav>
        </header>
    )
}

// App.jsx

import Header from './components/Header.jsx'

export default function App(){
    return (
        <>
            <Header />
        </>
    )
}

// index.jsx

import {createRoot} from "react-dom/client"
import App from './App'

const root = createRoot(document.getElementById("root"))
root.render(
   <App />
)

// =======================================================================
// Aside: JS inside JSX

/**
* Challenge: finish off the h1 below so it says "Hello Joe Schmoe"
*/

import ReactDOM from 'react-dom/client';

function App() {
  const firstName = "Joe"
  const lastName = "Schmoe"
    
  return (
    <h1>Hello {firstName} {lastName}</h1>
  )
}

ReactDOM.createRoot(document.getElementById('root')).render(<App />);

// Other Examples

function App() {
  const hours = new Date().getHours() % 12
  
  return (
    <h1>It is currently about {hours}</h1>
  )
}

/**
* Challenge: change the hard-coded "night" to display the
* text we determined from the logic above.
*/

  const hours = new Date().getHours()
  let timeOfDay

  if (hours < 12) {
    timeOfDay = "morning"
  } else if (hours >= 12 && hours < 17) {
    timeOfDay = "afternoon"
  } else if (hours < 21) {
    timeOfDay = "evening"
  } else {
    timeOfDay = "night"
  }

  return (
    <h1>Good {timeOfDay}</h1>
  )

// =======================================================================
// Props part 5: Recieiving props in a component

/**
 * Challenge: Fix the code below to use the `props`
 * object values in place of the hardcoded values below
 * 
 * Note: There will be a small bug in the code, so do your
 * best to squash it! 🐛
 */

 export default function Contact(props) {
    console.log(props)
    return (
        <article className="contact-card">
            <img
                src={props.img}
                alt="Photo of Mr. Whiskerson"
            />
            <h3>{props.name}</h3>
            <div className="info-group">
                <img
                    src="./images/phone-icon.png"
                    alt="phone icon"
                />
                <p>{props.phone}</p>
            </div>
            <div className="info-group">
                <img
                    src="./images/mail-icon.png"
                    alt="mail icon"
                />
                <p>{props.email}</p>
            </div>
        </article>
    )
}

// =======================================================================
// Prop quiz! (Get it??)

// 1. What do props help us accomplish?
// Make a component more reusable.

// 2. How do you pass a prop into a component?
// <MyAwesomeHeader title="???" />

// 3. Can I pass a custom prop (e.g. `blahblahblah={true}`) to a native
//    DOM element? (e.g. <div blahblahblah={true}>) Why or why not?
// No, because the JSX we use to describe native DOM elements will
// be turned into REAL DOM elements by React. And real DOM elements
// only have the properties/attributes specified in the HTML specification.
// (Which doesn't include properties like `blahblahblah`)

// 4. How do I receive props in a component?
// function Navbar(props) {
//     console.log(props.blahblahblah)
//     return (
//         <header>
//             ...
//         </header>
//     )
// }

// 5. What data type is `props` when the component receives it?
// An object!

// =======================================================================
// Destructuring props

/**
 * Challenge: fix the bug, now that we've 
 * destructured the props object
 */

 export default function Contact({img, name, phone, email}) {
    return (
        <article className="contact-card">
            <img
                src={img}
                alt="Photo of Mr. Whiskerson"
            />
            <h3>{name}</h3>
            <div className="info-group">
                <img
                    src="./images/phone-icon.png"
                    alt="phone icon"
                />
                <p>{phone}</p>
            </div>
            <div className="info-group">
                <img
                    src="./images/mail-icon.png"
                    alt="mail icon"
                />
                <p>{email}</p>
            </div>
        </article>
    )
}

// =======================================================================
// Props practice

/**
 * Challenge: create a page that displays your favorite jokes
 * - Create a Joke component in its own file.
 * - Import and render 4-5 <Joke /> components
 * - Each Joke should receive a "setup" prop and a "punchline" prop
 *   and render those however you'd like
 * - Use your favorite 2-part jokes (setup & punchline), or check
 *   jokes.md file for some examples.
 * 
 * EXTRA CREDIT:
 * Some jokes are only a punchline with no setup:
 * 
 * E.g.: "It’s hard to explain puns to kleptomaniacs because 
 * they always take things literally."
 * 
 * If you don't pass in a "question" prop, how might you make it only 
 * show the punchline?
 */

 // App.jsx

 import Joke from '/Joke.jsx'

export default function App() {
    return (
        <>
            <Joke 
            setup="I got my daughter a fridge for her birthday"
            punchline="I can't wait to see her face light up when she opens it."
            />
            <Joke 
            setup="How did the hacker escape the police?"
            punchline="He just ransomware!"
            />
            <Joke 
            setup="Why don't pirates travel on mountain roads?"
            punchline="Scurvy."
            />
            <Joke 
            setup="Why do bees stay in the hive in the winter?"
            punchline="Swarm."
            />
            <Joke 
            setup="What's the best thing about Switzerland?"
            punchline="I don't know, but the flag is a big plus!"
            />
        </>
    )
}

// Joke.jsx

export default function Joke({setup, punchline}){
    return(
        <>
            <h2>{setup}</h2>
            <p>{punchline}</p>
        </>
    )
}

// =========================

// Conditional Rendering

export default function Joke(props) {
    return (
        <>
            {props.setup && <p className="setup">Setup: {props.setup}</p>}
            <p className="punchline">Punchline: {props.punchline}</p>
            <hr />
        </>
    )
}

// =======================================================================
// Non-string props

export default function App() {
    return (
        <main>
            <Joke
                punchline={"It's hard to explain puns to kleptomaniacs because they always take things literally."}
                upvotes={10}
                isPun={true}
                comments={[
                    {author: "", text: "", title: ""},
                    {author: "", text: "", title: ""}
                ]}
            />

// =======================================================================
// Importing static assets

/**
 * Challenge: pass props to the Entry component to display
 * its data. See the `data.md` file for each prop name and its
 * value.
 * 
 * Then on the Entry component, receive and display the values
 * for those props. In the end, the page should look the same
 * as it does now, but without all the hard-coded data in the
 * component
 */

 // App.jsx

 export default function App() {
    return (
        <>
            <Header />
            <main className="container">
                <Entry 
                    img={{src: "https://scrimba.com/links/travel-journal-japan-image-url", alt: "Mount Fuji"}}
                    title={'Mount Fuji'}
                    country={'Japan'}
                    googleMapsLink={'https://www.google.com/maps/place/Mount+Fuji/@35.3606421,138.7170637,15z/data=!3m1!4b1!4m6!3m5!1s0x6019629a42fdc899:0xa6a1fcc916f3a4df!8m2!3d35.3606255!4d138.7273634!16zL20vMGNrczA?entry=ttu'}
                    dates={'12 Jan, 2021 - 24 Jan, 2021'}
                    text={'Mount Fuji is the tallest mountain in Japan, standing at 3,776 meters (12,380 feet). Mount Fuji is the single most popular tourist site in Japan, for both Japanese and foreign tourists.'}
                />
            </main>
        </>
    )
}

// Entry.jsx

export default function Entry({img, title, country, googleMapsLink, dates, text}) {
    return (
        <article className="journal-entry">
            <div className="main-image-container">
                <img 
                    className="main-image"
                    src={img.src} 
                    alt={img.alt}
                />
            </div>
            <div className="info-container">
                <img 
                    className="marker"
                    src="../images/marker.png" 
                    alt="map marker icon"
                />
                <span className="country">{country}</span>
                <a href={googleMapsLink}>View on Google Maps</a>
                <h2 className="entry-title">{title}</h2>
                <p className="trip-dates">{dates}</p>
                <p className="entry-text">{text}</p>
            </div>
            
        </article>
    )
}

// =======================================================================
// Review - array .map()

/*
Challenge 1:
Given an array of numbers, return an array of each number, squared
*/
const nums = [1, 2, 3, 4, 5]
// -->       [1, 4, 9, 16, 25]
// Your code here

const challenge1 = nums.map((x) => x * x)
console.log(challenge1)

/*
Challenge 2:
Given an array of strings, return an array where 
the first letter of each string is capitalized
*/

const names = ["alice", "bob", "charlie", "danielle"]
// -->        ["Alice", "Bob", "Charlie", "Danielle"]
// Your code here

const challenge2 = names.map((name) => name.charAt(0).toUpperCase() + String(name).slice(1))
console.log(challenge2)

/*
Challenge 2:
Given an array of strings, return an array where 
the first letter of each string is capitalized
*/

const names = ["alice", "bob", "charlie", "danielle"]
// -->        ["Alice", "Bob", "Charlie", "Danielle"]
// Your code here
const capitalized = names.map((name) => {
    return name[0].toUpperCase() + name.slice(1)
})

console.log(capitalized)

/*
Challenge 3:
Given an array of strings, return an array of strings that wraps each
of the original strings in an HTML-like <p></p> tag.

E.g. given: ["Bulbasaur", "Charmander", "Squirtle"]
return: ["<p>Bulbasaur</p>", "<p>Charmander</p>", "<p>Squirtle</p>"]
*/

const pokemon = ["Bulbasaur", "Charmander", "Squirtle"]
// -->          ["<p>Bulbasaur</p>", "<p>Charmander</p>", "<p>Squirtle</p>"]
// Your code here

const challenge3 = pokemon.map((x) => `<p>${x}</p>`)
console.log(challenge3)

// =======================================================================
// React can render arrays

// =======================================================================
// Mapping components

/**
    * Challenge: See if you can correctly pass the necessary props to the 
    * Joke component in the .map() (and render the jokeElements array) so 
    * the jokes show up on the page again
*/

import Joke from "./Joke"
import jokesData from "./jokesData"

export default function App() {
    
    const jokeElements = jokesData.map((joke) => {
        return <Joke  
                setup={joke.setup}
                punchline={joke.punchline}
                />
    })
    return (
        <main>
            {jokeElements}
        </main>
    )
}
    

// =======================================================================
// Map quiz!

// 1. What does the `.map()` array method do?
// Returns a new array. Whatever gets returned from the callback
// function provided is placed at the same index in the new array.
// Usually we take the items from the original array and modify them
// in some way.


// 2. What do we usually use `.map()` for in React?
// Convert an array of raw data into an array of JSX elements
// that can be displayed on the page.


// 3. Critical thinking: why is using `.map()` better than just
//    creating the components manually by typing them out?
//     1. We often don't have the data ahead of time when we're building
//        the app, so we simply can't manually type them out.
//     2. It makes our code more "self-sustaining" - not requiring additional
//        changes to the code whenever the data changes.

// =======================================================================
// Travel Journal: Map Entry components

/**
 * Challenge:
 * - import the array of data from data.js
 * - map over the array to create an <Entry /> component
 *   for every item in the data array.
 * - display the array of Entry components in place of the current
 *   hard-coded <Entry /> instance.
 */

 import Header from "./components/Header"
import Entry from "./components/Entry"
import data from "./data.js"

export default function App() {

    const mappedData = data.map((val) => {
        return (
            <Entry
                img={{ src: val.img.src, alt: val.img.alt }}
                title={val.title}
                country={val.country}
                googleMapsLink={val.googleMapsLink}
                dates={val.dates}
                text={val.text}
            />
        )
    })

    return (
        <>
            <Header />
            <main className="container">
                {mappedData}
            </main>
        </>
    )
}

// =======================================================================
// Travel Journal: key prop

export default function App() {
    
    const entryElements = data.map((entry) => {
        return (
            <Entry
                key={entry.id}
                img={entry.img}
                title={entry.title}
                country={entry.country}
                googleMapsLink={entry.googleMapsLink}
                dates={entry.dates}
                text={entry.text}
            />
        )
    })

// =======================================================================
// Travel Journal: Pass object as props

// App.jsx
export default function App() {
    
    const entryElements = data.map((entry) => {
        return (
            <Entry
                key={entry.id}
                entry={entry}
            />
        )
    })

// Entry.jsx
export default function Entry(props) {
    return (
        <article className="journal-entry">
            <div className="main-image-container">
                <img 
                    className="main-image"
                    src={props.entry.img.src}
                    alt={props.entry.img.alt}
                />
            </div>
            <div className="info-container">
                <img 
                    className="marker"
                    src="../images/marker.png" 
                    alt="map marker icon"
                />
                <span className="country">{props.entry.country}</span>
                <a href={props.entry.googleMapsLink} target="_blank">View on Google Maps</a>
                <h2 className="entry-title">{props.entry.title}</h2>
                <p className="trip-dates">{props.entry.dates}</p>
                <p className="entry-text">{props.entry.text}</p>
            </div>
            
        </article>
    )
}

// =======================================================================
// Travel Journal: Spread object as props

// App.jsx
export default function App() {
    
    const entryElements = data.map((entry) => {
        return (
            <Entry
                key={entry.id}
                {...entry}
            />
        )
    })

// Entry.jsx

/**
 * Challenge: Fix our component! 😱
 */

export default function Entry(props) {
    return (
        <article className="journal-entry">
            <div className="main-image-container">
                <img 
                    className="main-image"
                    src={props.img.src}
                    alt={props.img.alt}
                />
            </div>
            <div className="info-container">
                <img 
                    className="marker"
                    src="../images/marker.png" 
                    alt="map marker icon"
                />
                <span className="country">{props.country}</span>
                <a href={props.googleMapsLink} target="_blank">View on Google Maps</a>
                <h2 className="entry-title">{props.title}</h2>
                <p className="trip-dates">{props.dates}</p>
                <p className="entry-text">{props.text}</p>
            </div>
            
        </article>
    )
}

// =======================================================================
// React State
// =======================================================================

// =======================================================================
// Section 3 Intro

// Read-write: user has ability to change data
// Highly interactive
// Display your data
// Examples: Bank website, Airbnb, eCommerce sites

// =======================================================================
// Chef Clause: Header

/**
 * Challenge: Build the Header component in a separate file
 * and render it here in the App component
 */

 // App.jsx
 import Header from './components/Header.jsx'

export default function App() {
  return (
      <Header />
  )
}

// Header.jsx
export default function Header(){
    return (
        <header>
            <nav>
                <img src="./images/chef-claude-icon.png" alt="logo img of a chef" />
                <span>Chef Calude</span>
            </nav>
        </header>
    )
}

// =======================================================================
// Chef Claude: form

// App.jsx

import Header from "./Header"
import Main from "./Main"

export default function App() {
  return (
    <>
      <Header />
      <Main />
    </>
  )
}

// Main.jsx
export default function Main() {
    return (
        <main>
            <form className="add-ingredient-form">
                <input 
                    type="text"
                    placeholder="e.g. oregano"
                    aria-label="Add ingredient"
                />
                <button>Add ingredient</button>
            </form>
        </main>
    )
}

// CSS
main {
    padding: 30px 30px 10px;
}

.add-ingredient-form {
    display: flex;
    justify-content: center;
    gap: 12px;
    height: 38px;
}

.add-ingredient-form > input {
    border-radius: 6px;
    border: 1px solid #D1D5DB;
    padding: 9px 13px;
    box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);
    flex-grow: 1;
    min-width: 150px;
    max-width: 400px;
}

.add-ingredient-form > button {
    font-family: Inter, sans-serif;
    border-radius: 6px;
    border: none;
    background-color: #141413;
    color: #FAFAF8;
    width: 150px;
    font-size: 0.875rem;
    font-weight: 500;
}

.add-ingredient-form > button::before {
    content: "+";
    margin-right: 5px;
}

// =======================================================================
// Chef Clause: Project overview

// =======================================================================
// Event Listeners

/**
* Challenge: add our new function to the button
*/

import ReactDOM from 'react-dom/client';

function App() {
  
  function handleClick() {
    console.log("I was clicked!")
  }
  
  return (
    <main className="container">
      <img
        src="https://picsum.photos/640/360"
        alt="Placeholder image from Picsum"
      />
      <button onClick={handleClick}>Click me</button>
    </main>
  )
}

ReactDOM.createRoot(document.getElementById('root')).render(<App />);

// ===========================

/**
* Challenge: Log something to the console when the mouse
* hovers over the image
*/

function App() {
  
  function handleMouseOver(){
    console.log('I was hovered')
  }
  
  function handleClick() {
    console.log("I was clicked!")
  }
  
  return (
    <main className="container">
      <img
        onMouseOver={handleMouseOver}
        src="https://picsum.photos/640/360"
        alt="Placeholder image from Picsum"
      />
      <button onClick={handleClick}>Click me</button>
    </main>
  )
}

// =======================================================================
// Chef Clause: Map ingredients list

/**
    * Review Challenge:
    * Map over the list of ingredients and render them as list items
    * 
    * Note: We're doing things a weird way here. Don't worry,
    * we're building up to learning the right way 🙂
    */

export default function Main() {
    const ingredients = ["Chicken", "Oregano", "Tomatoes"]
    
    const ingredientsMap = ingredients.map((item) => (
        <li key={ingredient}>{item}</li>
        ))
    
    return (
        <main>
            <form className="add-ingredient-form">
                <input 
                    type="text"
                    placeholder="e.g. oregano"
                    aria-label="Add ingredient"
                />
                <button>Add ingredient</button>
            </form>
            <ul>
                {ingredientsMap}
            </ul>
        </main>
    )
}

/**
    * Challenge:
    * Add an `onSubmit` event listener on the form. Have the function
    * simply console.log("Form submitted!") for now
*/

function handleSubmit(e){
    e.preventDefault()
    console.log('Form Submitted')
}

    return (
        <main>
            <form onSubmit={handleSubmit} className="add-ingredient-form">
                <input 
                    type="text"
                    placeholder="e.g. oregano"
                    aria-label="Add ingredient"
                    name="ingredient"
                />
                <button>Add ingredient</button>
            </form>
            <ul>
                {ingredientsListItems}
            </ul>
        </main>
    )
}

/**
    * Challenge:
    * Add the new ingredient to the array of ingredients. Also, add a 
    * console.log(ingredients) after adding the ingredient, because 
    * **warning**: you aren't going to see the page update!
    * 
    * Hint: this is a one-liner solution, so don't overthink it 😅
*/

function handleSubmit(event) {
    event.preventDefault()
    const formData = new FormData(event.currentTarget)
    const newIngredient = formData.get("ingredient")
    ingredients.push(newIngredient)
    console.log(ingredients)
}

// =======================================================================
// Props vs. State: Props

// Props refers to the properties being passed into a component in order
// for it to work correctly, similar to how a function receives params
// from above. A component receiving props is now allowed to modify those
// props. (i.e they are 'immutable')

// =======================================================================
// Props vs. State: State

// State refers to values that are managed by the component, similar to 
// variables declared inside a function. Any time you have changing values
// that should be saved/displayed, you'll likely be using state.

// 01 Render
// React runs your function and displays whatever gets returned. The 
// function will only be run again if (1) it recieves new props from above
// or (2) its internal state values change.

// 02 setState
// CHanging a local, non-state variable doesn't cause React to re-render
// the component. Changing state with a built-in 'setState' function does.

// 03 view = function(state)
// Thus, when state changes and React re-runs (re-renders) your component
// something new gets returned and replaces what used to be on the page.

// =======================================================================
// UseState

/**
    * Challenge: Replace our hard-coded "Yes" on the page with 
    * some state initiated with React.useState()
*/

import React from "react"

export default function App() {
    
    const result = React.useState("Yes")
    console.log(result)
    
    return (
        <main>
            <h1 className="title">Is state important to know?</h1>
            <button className="value">{result[0]}</button>
        </main>
    )
}


// =======================================================================
// UseState array destructuring

import React from "react"

export default function App() {
    const [isImportant, func] = React.useState("Yes")
    console.log(isImportant)
    
    return (
        <main>
            <h1 className="title">Is state important to know?</h1>
            <button className="value">{isImportant}</button>
        </main>
    )
}


// =======================================================================
// Challenge state

/**
    * Challenge: 
    * 1. Create a function called `handleClick` that runs
    *    setIsImportant("Definitely")
    * 2. Add a click event listener to the button
    *    that runs `handleClick` when the button is clicked.
*/

import React from "react"

export default function App() {
    
    let [isImportant, setIsImportant] = React.useState("Yes")

    
    function handleClick(){
        setIsImportant('Definetely')
    }
    
    return (
        <main>
            <h1 className="title">Is state important to know?</h1>
            <button onClick={handleClick} className="value">{isImportant}</button>
        </main>
    )
}

// =======================================================================
// State practice

/**
    * Challenge: 
    * Create state to track our count value (initial value is 0)
    * Don't forget to replace the hard-coded "0" with your new state
*/

import React from "react"

export default function App() {
    
    const [count, setCount] = React.useState(0)

    return (
        <main className="container">
            <h1>How many times will Bob say "state" in this section?</h1>
            <div className="counter">
                <button className="minus" aria-label="Decrease count">–</button>
                <h2 className="count">{count}</h2>
                <button className="plus" aria-label="Increase count">+</button>
            </div>
        </main>
    )
}

/**
    * Challenge: 
    * Create a function called `add` that runs
    * when the + button is clicked. (Can just console.log("add") for now)
*/

import React from "react"

export default function App() {
    const [count, setCount] = React.useState(0)
    
    function add(){
        console.log('add')
    }

    return (
        <main className="container">
            <h1>How many times will Bob say "state" in this section?</h1>
            <div className="counter">
                <button className="minus" aria-label="Decrease count">–</button>
                <h2 className="count">{count}</h2>
                <button onClick={add} className="plus" aria-label="Increase count">+</button>
            </div>
        </main>
    )
}

/**
    * Challenge: 
    * See if you can think of a way to add 1 to the count
    * every time the + button is clicked
*/

import React from "react"

export default function App() {
    const [count, setCount] = React.useState(0)
    
    function add() {
        setCount(count + 1)
    }    
    
    return (
        <main className="container">
            <h1>How many times will Bob say "state" in this section?</h1>
            <div className="counter">
                <button className="minus" aria-label="Decrease count">–</button>
                <h2 className="count">{count}</h2>
                <button className="plus" onClick={add} aria-label="Increase count">+</button>
            </div>
        </main>
    )
}

/**
    * Challenge: 
    * Add functionality to the minus button
*/

import React from "react"

export default function App() {
    const [count, setCount] = React.useState(0)
    
    function add() {
        setCount(count + 1)
    }    
    
    function minus() {
        setCount(count - 1)
    }
    
    return (
        <main className="container">
            <h1>How many times will Bob say "state" in this section?</h1>
            <div className="counter">
                <button className="minus" onClick={minus} aria-label="Decrease count">–</button>
                <h2 className="count">{count}</h2>
                <button className="plus" onClick={add} aria-label="Increase count">+</button>
            </div>
        </main>
    )
}

// =======================================================================
// Updating state with a callback function

/**
    * Note: if you ever need the old value of state
    * to help you determine the new value of state,
    * you should pass a callback function to your
    * state setter function instead of using
    * state directly. This callback function will
    * receive the old value of state as its parameter,
    * which you can then use to determine your new
    * value of state.
*/

function add() {
    setCount(prevCount=> prevCount + 1)
    setCount(prevCount=> prevCount + 1)
    setCount(prevCount=> prevCount + 1)
}

function subtract() {
    setCount(count - 1)
    setCount(count - 1)
    setCount(count - 1)
}

// Challenge: update `substract` to use a callback function

function subtract() {
    setCount(prevCount => prevCount - 1)
}

// =======================================================================
// Changing state quiz

// 1. You have 2 options for what you can pass in to a
//    state setter function (e.g. `setCount`). What are they?

//    1. Pass the new version of state that we want to use as the 
//       replacement for the old version of state.
//    2. Pass a callback function. Must return what we want the new
//       value of state to be. Will receive the old version of state
//       as a parameter so we can use it to help determine what we want 
//       the new value of state to be.

// 2. When would you want to pass the first option (from answer
//    above) to the state setter function?
   
//    Whenever we don't really care about (or need) the old value,
//    we simply want to set a new value.

// 3. When would you want to pass the second option (from answer
//    above) to the state setter function?

//    Whenever we do care about the previous value in state and need
//    it to help us determine what the new value should be.

// =======================================================================
// Ternary practice

/**
    * Challenge: Replace the if/else below with a ternary
    * to determine the text that should display on the page
*/

// Remove the code below 👇 once your ternary is done
    if(isGoingOut === true) {
        answer = "Yes"
    } else {
        answer = "No"
    }

let answer = isGoingOut ? 'Yes' : 'No'

/**
    * Challenge: move our ternary directly inside of the JSX
    * so the "Yes" and "No" are determined inside the <h1>
    * 
    * Hint: you will no longer need the `answer` variable
*/

export default function App() {

    const isGoingOut = true

    return (
        <main>
            <h1 className="title">Do I feel like going out tonight?</h1>
            <button className="value">{isGoingOut ? "Yes" : "No"}</button>
        </main>
    )
}

// =======================================================================
// Toggling state

/**
     * Challenge: 
     * - Initialize state for `isGoingOut` as a boolean
     * - Make it so clicking the button flips that
     *   boolean value (true -> false, false -> true)
     * - Display "Yes" if `isGoingOut` is `true`, "No" otherwise
*/

import React from 'react'
import { useState } from 'react'

export default function App() {

    const [isGoingOut, setIsGoingOut] = React.useState(true)
    
    let [text, setText] = React.useState('no')
    
    function stateFlip(){
        setIsGoingOut(isGoingOut => isGoingOut ? false : true)
        setText(isGoingOut ? text = 'yes' : text = 'no')
    }

    return (
        <main>
            <h1 className="title">Do I feel like going out tonight?</h1>
            <button onClick={stateFlip} className="value">{text}</button>
        </main>
    )
}

// Instructor Solution

import React from "react"

export default function App() {
    
    const [isGoingOut, setIsGoingOut] = React.useState(false)
    
    function changeMind() {
        setIsGoingOut(prev => !prev)
    }

    return (
        <main>
            <h1 className="title">Do I feel like going out tonight?</h1>
            <button 
            onClick={changeMind} 
            className="value">{isGoingOut ? "Yes" : "No"}
            aria-label={`Current answer is ${isGoingOut ? "Yes" : "No"}. Click to change it.`}
            </button>
        </main>
    )
}

// =======================================================================
// Complex state: Arrays

  /**
     * Challenge: Convert the code below to use an array
     * held in state instead of a local variable. Initialize 
     * the state array as an empty array
     * 
     * Don't worry about fixing `addFavoriteThing` quite yet.
*/

import {useState} from 'react'

export default function App() {
    
  const [myFavoriteThings, setMyFavoriteThings] = React.useState([])  

  const allFavoriteThings = ["💦🌹", "😺", "💡🫖", "🔥🧤", "🟤🎁", 
  "🐴", "🍎🥧", "🚪🔔", "🛷🔔", "🥩🍝"]

  const thingsElements = myFavoriteThings.map(thing => <p key={thing}>{thing}</p>)

  function addFavoriteThing() {
    // We'll work on this next, nothing to do here yet.
  }
  
  return (
    <main>
      <button onClick={addFavoriteThing}>Add item</button>
      <section aria-live="polite">
        {thingsElements}
      </section>
    </main>
  )
}

/**
    * Challenge: you do it!
    * Every time "Add item" is clicked, it should add another string
    * "Test" to the list on the page
*/

import React from "react"

export default function App() {
  const [myFavoriteThings, setMyFavoriteThings] = React.useState([])
  
  function addFavoriteThing() {
        setMyFavoriteThings(prevFavorite => [...prevFavorite, 'Test'])
  }
  
  return (
    <main>
      <button onClick={addFavoriteThing}>Add item</button>
      <section aria-live="polite">
        {thingsElements}
      </section>
    </main>
  )
}

// Adding elements from the array

import React from "react"

export default function App() {
    const [myFavoriteThings, setMyFavoriteThings] = React.useState([])

    const allFavoriteThings = ["💦🌹", "😺", "💡🫖", "🔥🧤", "🟤🎁",
        "🐴", "🍎🥧", "🚪🔔", "🛷🔔", "🥩🍝"]
        
    const thingsElements = myFavoriteThings.map(thing => <p key={thing}>{thing}</p>)

    function addFavoriteThing() {
        setMyFavoriteThings(
            prevFavThings => [...prevFavThings, allFavoriteThings[prevFavThings.length]])
    }

    return (
        <main>
            <button onClick={addFavoriteThing}>Add item</button>
            <section aria-live="polite">
                {thingsElements}
            </section>
        </main>
    )
}

// =======================================================================
// Chef Claude: Refactor array state

/**
    * Challenge: Update our app so that when the user enters a
    * new ingredient and submits the form, it adds that new
    * ingredient to our list!
*/

import {useState} from 'react'

export default function Main() {

    const [ingredients, setIngredient] = useState(["Chicken", "Oregano", "Tomatoes"])

    const ingredientsListItems = ingredients.map(ingredient => (
        <li key={ingredient}>{ingredient}</li>
    ))

    function handleSubmit(event) {
        event.preventDefault()
        const formData = new FormData(event.currentTarget)
        const newIngredient = formData.get("ingredient")
        
        setIngredient(prevIngredients => [...prevIngredients, newIngredient])
    }

// =======================================================================
// Complex state: Objects

/**
    * Challenge: Fill in the values in the markup
    * using the properties of our state object above
    * (Ignore `isFavorite` for now)
*/

import React from "react"
import avatar from "./images/user.png"
import starFilled from "./images/star-filled.png"
import starEmpty from "./images/star-empty.png"

export default function App() {
    const [contact, setContact] = React.useState({
        firstName: "John",
        lastName: "Doe",
        phone: "+1 (212) 555-1212",
        email: "itsmyrealname@example.com",
        isFavorite: false
    })
    
    function toggleFavorite() {
        console.log("Toggle Favorite")
    }

    return (
        <main>
            <article className="card">
                <img
                    src={avatar}
                    className="avatar"
                    alt="User profile picture of John Doe"
                />
                <div className="info">
                    <button
                        onClick={toggleFavorite}
                        aria-pressed={false}
                        className="favorite-button"
                    >
                        <img
                            src={starEmpty}
                            alt="empty star icon"
                            className="favorite"
                        />
                    </button>
                    <h2 className="name">
                        {`${contact.firstName} ${contact.lastName}`}
                    </h2>
                    <p className="contact">{contact.phone}</p>
                    <p className="contact">{contact.email}</p>
                </div>

            </article>
        </main>
    )
}

/**
    * Challenge: Use a ternary to determine which star image variable
    * should be used based on the `contact.isFavorite` property. Test 
    * your results by manually changing the isFavorite value in state.
    * 
    * `true` => starFilled
    * `false` => starEmpty
*/

let starIcon = contact.isFavorite ? starFilled : starEmpty

/**
    * Challenge:
    * Update the following:
    * - aria-pressed should reflect the same value as contact.isFavorite.
    * - aria-label should switch to say "Remove from favorites" if
    *   contact.isFavorite is `true`.
    * - img alt should say "filled star icon" when it is filled.
*/

return (
<main>
    <article className="card">
        <img
            src={avatar}
            className="avatar"
            alt="User profile picture of John Doe"
        />
        <div className="info">
            <button
                onClick={toggleFavorite}
                aria-pressed={contact.isFavorite}
                aria-label={contact.isFavorite ? 'Remove from favorites' : 'Add to favorites'}
                className="favorite-button"
            >
            <img
                src={starIcon}
                alt={contact.isFavorite ? 'filled star icon' : 'empty star icon'}
                className="favorite"
            />
            </button>



// =======================================================================
// Complex state: updating state objects

// Challenge: re-write it :)

function toggleFavorite() {
    setContact(prevContact => {
        return {
            ...prevContact, isFavorite: !prevContact.isFavorite
        }
    })
}

// =======================================================================
// React forms intro

// https://react.dev/reference/react-dom/components/form#noun-labs-1201738-(2)

// =======================================================================
// Form basics

/**
 * Challenge: add another label and input for the password field
 */

import React from 'react';
import ReactDOM from 'react-dom/client';

function App() {
  return (
    <section>
      <h1>Signup form</h1>
      <form>
        <label htmlFor="email">Email:</label>
        <input id="email" type="email" name="email" placeholder="joe@schmoe.com" />
        <br />
        
        <label> Password:
          <input type='password' name='password' placeholder='FGHJhg^&[' />
        </label>
        
      </form>
    </section>
  )
}

ReactDOM.createRoot(document.getElementById('root')).render(<App />);

// =======================================================================
// Form submission

// Getting form data

function App() {
  
  function handleSubmit(event) {
    event.preventDefault()
    const formEl = event.currentTarget
    const formData = new FormData(formEl)
    const email = formData.get("email")
    // Gather the info from the form
    // Submit it to a backend
    formEl.reset()
  }
  
  return (
    <section>
      <h1>Signup form</h1>
      <form onSubmit={handleSubmit} method="post">
        <label htmlFor="email">Email:</label>
        <input id="email" type="email" name="email" placeholder="joe@schmoe.com" />
        <br />
        
        <label htmlFor="password">Password:</label>
        <input id="password" type="password" name="password" />
        <br />
        
        <button>Submit</button>
        
      </form>
    </section>
  )
}

// =======================================================================
// Form action

// The 'action' paramter in React 19, now handles all of the actions we
// were declaring imperitively through handleSumit()

function App() {
  
  function signUp(formData) {
    const email = formData.get("email")
    console.log(email)
  }
  
  return (
    <section>
      <h1>Signup form</h1>
      <form action={signUp}>

  /**
   * Challenge: get the password from the form too and log
   * it to the console to be sure it came in correctly.
*/

  function signUp(formData) {
    const email = formData.get("email")
    const password = formData.get("password")
    console.log(email)
    console.log(password)
  }

// =======================================================================
// Chef Claude: Refactor form submission

function handleSubmit(event) {
    event.preventDefault()
    const formData = new FormData(event.currentTarget)
    const newIngredient = formData.get("ingredient")
    setIngredients(prevIngredients => [...prevIngredients, newIngredient])
}

/**
    * Challenge: use form action instead of onSubmit to
    * handle the data from the form
*/

function submit(formData) {
    const newIngredient = formData.get("ingredient")
    setIngredients(prevIngredients => [...prevIngredients, newIngredient])
}

// =======================================================================
// Forms: textarea & defaultValue

<label htmlFor="description">Description:</label>
<textarea id="description" name="description"></textarea>

// =======================================================================
// Forms: radio

/**
* Challenge: grab the employment status from the form and log it
* to the console. (Remember to select one of the radios before submitting)
* 
* Note: This won't work the way you might expect quite yet!
*/

function signUp(formData) {
    const email = formData.get("email")
    const password = formData.get("password")
    const employmentStatus = formData.get('employmentStatus')
    console.log(employmentStatus)
  }

<fieldset>
    <legend>Employment Status:</legend>
        <label>
            <input type="radio" value="unemployed" name="employmentStatus" />
            Unemployed
        </label>
        <label>
            <input type="radio" value="part-time" name="employmentStatus" />
            Part-time
        </label>
        <label>
            <input type="radio" value="full-time" name="employmentStatus" />
            Full-time
        </label>
</fieldset>

// =======================================================================
// Forms: checkbox

// getAll
  function signUp(formData) {
    const email = formData.get("email")
    const password = formData.get("password")
    const employmentStatus = formData.get("employmentStatus")
    const dietaryRestrictions = formData.getAll("dietaryRestrictions")
    console.log(dietaryRestrictions)
  }


<fieldset>
    <legend>Employment Status:</legend>
        <label>
            <input type="radio" value="unemployed" name="employmentStatus" />
            Unemployed
        </label>
        <label>
            <input type="radio" value="part-time" name="employmentStatus" />
            Part-time
        </label>
        <label>
            <input type="radio" value="full-time" name="employmentStatus" />
            Full-time
        </label>
</fieldset>

// =======================================================================
// Forms: select and option

  function signUp(formData) {
    const email = formData.get("email")
    const password = formData.get("password")
    const employmentStatus = formData.get("employmentStatus")
    const dietaryRestrictions = formData.getAll("dietaryRestrictions")
    const favColor = formData.get("favColor")
    console.log(favColor)
  }

<label htmlFor="favColor">What is your favorite color?</label>
<select id="favColor" name="favColor" defaultValue="" required>
    <option value="" disabled>-- Choose a color --</option>
    <option value="red">Red</option>
    <option value="orange">Orange</option>
    <option value="yellow">Yellow</option>
    <option value="green">Green</option>
    <option value="blue">Blue</option>
    <option value="indigo">Indigo</option>
    <option value="violet">Violet</option>
</select>

// =======================================================================
// Forms: Object.fromEntries

  function signUp(formData) {
    const data = Object.fromEntries(formData)
    const dietaryData = formData.getAll('dietaryRestrictions')
    console.log(data)
  }

{email: 'joe@schmoe.met', password: 'werwerwerwer', description: 'werwerwerwer',
employmentStatus: 'unemployed', dietaryRestrictions: 'gluten-free', favColor: 'blue'}

// =======================================================================
// Chef Claude: conditional rendering intro

// =======================================================================
// Conditional rendering: &&

/**
    * Challenge:
    * - Create state `isShown` (boolean, default to `false`)
    * - Add a button that toggles the value back and forth
*/

import React from 'react'

export default function Joke(props) {
    
    const [isShown, setIsShown] = React.useState(false)
    
    function toggle(){
        setIsShown(prevState => !prevState)
    }
    
    console.log(isShown)
    return (
        <div>
            {props.setup && <h3>{props.setup}</h3>}
            <button onClick={toggle}>Punchline</button>
            <p>{props.punchline}</p>
            <hr />
        </div>
    )
}

/**
    * Challenge:
    * Only display the punchline paragraph if `isShown` is true
*/

{isShown && <p>{props.punchline}</p>}

import React from "react"

export default function Joke(props) {
    const [isShown, setIsShown] = React.useState(false)
    
    function toggleShown() {
        setIsShown(prevShown => !prevShown)
    }
    
    return (
        <div>
            {props.setup && <h3>{props.setup}</h3>}
            {isShown && <p>{props.punchline}</p>}
            <button onClick={toggleShown}>Show punchline</button>
            <hr />
        </div>
    )
}

// =======================================================================
// Conditional rendering: Why does && work?

// Short circuting 

if (false && console.log("This code is running"))

if (true && console.log("This code is running"))
// This code is running

// =======================================================================
// Conditional rendering practice: &&

/**
    * Challenge:
    * Only display the <h1> below if there are unread messages
*/

import React from "react"

export default function App() {
    const [unreadMessages, setUnreadMessages] = React.useState(["a", "b"])

    return (
        <div>
            {unreadMessages.length > 0 && <h1>You have {unreadMessages.length} unread messages!</h1>}
        </div>
    )
}

/**
    * Challenge:
    * If there are 0 unread messages, display a paragraph that says "You
    * have no unread messages". (So, the logic will be the opposite of
    * what we have for the h1)
    */

    function Messages(){
        if (unreadMessages.length > 0) {
            return <h1>You have {unreadMessages.length} unread messages!</h1>
        } else {
            return <p>You have no unread messages.</p>
        }
    }
    
    return (
        <div>
            <Messages />
        </div>
    )

// Instructor Solution

    return (
        <div>
            {
                unreadMessages.length > 0 && 
                <h1>You have {unreadMessages.length} unread messages!</h1>
            }
            {
                unreadMessages.length === 0 && 
                <p>You have no unread messages</p>
            }
            
            
        </div>
    )

// =======================================================================
// Conditional rendering: ternary

// Conditionally rendering the button, text, ...
return (
    <div>
        {props.setup && <h3>{props.setup}</h3>}
        {isShown ? <p>{props.punchline}</p> : null}
        <button onClick={toggleShown}>{isShown ? "Hide" : "Show"} punchline</button>
        <hr />
    </div>
)

// =======================================================================
// Conditional rendering practice

/**
    * Challenge:
    * - If there are no unread messages, display "You're all caught up!"
    * - If there's exactly 1 unread message, it should read "You have 
    *   1 unread message" (singular)
    * - If there are > 1 unread messages, display "You have <n> unread
    *   messages" (plural)
*/

import React from "react"

export default function App() {
    const [messages, setMessages] = React.useState([])

    return (
        <div>
            <h1>{messages.length > 1 ? `You have ${messages.length} unread messages` : messages.length === 1 ? `You have ${messages.length} unread message` : 'You are all caught up'}</h1>
        </div>
    )
}

// Instructor Solution

import React from "react"

export default function App() {
    const [messages, setMessages] = React.useState(["a", "b"])
    let text
    
    if (messages.length === 0) {
        text = "You're all caught up!"
    } else if (messages.length === 1) {
        text = "You have 1 unread message"
    } else {
        text = `You have ${messages.length} unread messages`
    }
    
    return (
        <div>
            <h1>{text}</h1>
        </div>
    )
}

// Function option

import React from "react"

export default function App() {
    const [messages, setMessages] = React.useState(["a", "b"])


    function determineText() {
        if (messages.length === 0) {
            return "You're all caught up!"
        } else if (messages.length === 1) {
            return "You have 1 unread message"
        } else {
            return `You have ${messages.length} unread messages`
        }
    }

    return (
        <div>
            <h1>{determineText()}</h1>
        </div>
    )
}

// =======================================================================
// Conditional rendering quiz

// 1. What is "conditional rendering"?
// This is hwere you use JS and logic to detmerine what to render to the browser. 


// 2. When would you use &&?
// Is used to conditionally render something based on a truthy value (short citcut from left expression)


// 3. When would you use a ternary?
// For short conditional evaluations, e.g if you are determining whether a condition is true or false.


// 4. What if you need to decide between > 2 options on
//    what to display?

// It is probably best practise to use a tradition if else block, or wrap everything inside of a function. Or even use a switch statement.


// =======================================================================
// Chef Claude: conditional rendering challenge 1

/**
    * Challenge:
    * Using conditional rendering, only render the new <section> IF
    * there are ingredients added to the list of ingredients.
*/

return (
    <main>
        <form action={addIngredient} className="add-ingredient-form">
            <input
                type="text"
                placeholder="e.g. oregano"
                aria-label="Add ingredient"
                name="ingredient"
            />
            <button>Add ingredient</button>
        </form>
        {ingredientsListItems.length > 0 ? <section>
            
            <h2>Ingredients on hand:</h2>
            <ul className="ingredients-list" aria-live="polite">{ingredientsListItems}</ul>
            <div className="get-recipe-container">
                <div>
                    <h3>Ready for a recipe?</h3>
                    <p>Generate a recipe from your list of ingredients.</p>
                </div>
                <button>Get a recipe</button>
            </div>
        </section> : null}
    </main>
)

// Function solution

import React from "react"

export default function Main() {

    const [ingredients, setIngredients] = React.useState([])

    const ingredientsListItems = ingredients.map(ingredient => (
        <li key={ingredient}>{ingredient}</li>
    ))

    function addIngredient(formData) {
        const newIngredient = formData.get("ingredient")
        setIngredients(prevIngredients => [...prevIngredients, newIngredient])
    }
    
    function IngredientRendering(){
        if (ingredientsListItems.length > 0) {
            return (
                <section>
                    <h2>Ingredients on hand:</h2>
                    <ul className="ingredients-list" aria-live="polite">{ingredientsListItems}</ul>
                    <div className="get-recipe-container">
                        <div>
                            <h3>Ready for a recipe?</h3>
                            <p>Generate a recipe from your list of ingredients.</p>
                        </div>
                        <button>Get a recipe</button>
                    </div>
                </section>
            )
        } else {
            return null
        }
    }

    return (
        <main>
            <form action={addIngredient} className="add-ingredient-form">
                <input
                    type="text"
                    placeholder="e.g. oregano"
                    aria-label="Add ingredient"
                    name="ingredient"
                />
                <button>Add ingredient</button>
            </form>
            <IngredientRendering />
        </main>
    )
}

// Instructor Solution

{ingredients.length > 0 ? <section>
    <h2>Ingredients on hand:</h2>
    <ul className="ingredients-list" aria-live="polite">{ingredientsListItems}</ul>
    <div className="get-recipe-container">
        <div>
            <h3>Ready for a recipe?</h3>
            <p>Generate a recipe from your list of ingredients.</p>
        </div>
        <button>Get a recipe</button>
    </div>
</section> : null}

// =======================================================================
// Chef Claude: conditional rendering challenge 2

/**
    * Challenge:
    * Only display the div.get-recipe-container if the ingredients list
    * has more than 3 items in it. (Fewer than that and it might not
    * give great results from the chef 🤖👩‍🍳)
*/

return (
    <main>
        <form action={addIngredient} className="add-ingredient-form">
            <input
                type="text"
                placeholder="e.g. oregano"
                aria-label="Add ingredient"
                name="ingredient"
            />
            <button>Add ingredient</button>
        </form>
            <section>
            {ingredients.length > 0 &&
            <>
                <h2>Ingredients on hand:</h2>
                <ul className="ingredients-list" aria-live="polite">{ingredientsListItems}</ul>
            </>}
            {ingredients.length > 3 &&
            <div className="get-recipe-container">
                <div>
                    <h3>Ready for a recipe?</h3>
                    <p>Generate a recipe from your list of ingredients.</p>
                </div>
                <button>Get a recipe</button>
            </div>}
        </section>
    </main>
)
}

// Instructor Solution

return (
    <main>
        <form action={addIngredient} className="add-ingredient-form">
            <input
                type="text"
                placeholder="e.g. oregano"
                aria-label="Add ingredient"
                name="ingredient"
            />
            <button>Add ingredient</button>
        </form>
        {ingredients.length > 0 && <section>
            <h2>Ingredients on hand:</h2>
            <ul className="ingredients-list" aria-live="polite">{ingredientsListItems}</ul>
            {ingredients.length > 3 && <div className="get-recipe-container">
                <div>
                    <h3>Ready for a recipe?</h3>
                    <p>Generate a recipe from your list of ingredients.</p>
                </div>
                <button>Get a recipe</button>
            </div>}
        </section>}
    </main>
)
}

// =======================================================================
// Chef calude: get reciple placeholder challenge

    /**
     * Challenge:
     * 1. Create a boolean state that, for now, will represent whether
     *    we've gotten a recipe back from the "chef". Default to `false`.
     *    Can call it `recipeShown`.

     * 2. Grab the markup in recipeCode.md and paste it below. This will
     *    be a placeholder for the content that will come back from the 
     *    chef once we set up that feature.

     * 3. When the user clicks the "Get a recipe" button, flip the
     *    `recipeShown` state to true.
     * 4. Only display the recipe code content if `recipeShown` is true.
*/

import React from "react"

export default function Main() {

    const [ingredients, setIngredients] = React.useState(
        ["all the main spices", "pasta", "ground beef", "tomato paste"]
    )

    const [recipeShown, setRecipeShown] = React.useState(false)
    
    function flipRecipeShown(){
        setRecipeShown(prevBool => !prevBool)
    }

    const ingredientsListItems = ingredients.map(ingredient => (
        <li key={ingredient}>{ingredient}</li>
    ))

    function addIngredient(formData) {
        const newIngredient = formData.get("ingredient")
        setIngredients(prevIngredients => [...prevIngredients, newIngredient])
    }

    return (
        <main>
            <form action={addIngredient} className="add-ingredient-form">
                <input
                    type="text"
                    placeholder="e.g. oregano"
                    aria-label="Add ingredient"
                    name="ingredient"
                />
                <button>Add ingredient</button>
            </form>
            {ingredients.length > 0 && <section>
                <h2>Ingredients on hand:</h2>
                <ul className="ingredients-list" aria-live="polite">{ingredientsListItems}</ul>
                {ingredients.length > 3 && <div className="get-recipe-container">
                    <div>
                        <h3>Ready for a recipe?</h3>
                        <p>Generate a recipe from your list of ingredients.</p>
                    </div>
                    <button onClick={flipRecipeShown}>Get a recipe</button>
                </div>}
            </section>}
            {recipeShown === true ?
                <section>
                    <h2>Chef Claude Recommends:</h2>
                    <article className="suggested-recipe-container" aria-live="polite">
                        <p>Based on the ingredients you have available, I would recommend making a simple a delicious <strong>Beef Bolognese Pasta</strong>. Here is the recipe:</p>
                        <h3>Beef Bolognese Pasta</h3>
                        <strong>Ingredients:</strong>
                        <ul>
                            <li>1 lb. ground beef</li>
                            <li>1 onion, diced</li>
                            <li>3 cloves garlic, minced</li>
                            <li>2 tablespoons tomato paste</li>
                            <li>1 (28 oz) can crushed tomatoes</li>
                            <li>1 cup beef broth</li>
                            <li>1 teaspoon dried oregano</li>
                            <li>1 teaspoon dried basil</li>
                            <li>Salt and pepper to taste</li>
                            <li>8 oz pasta of your choice (e.g., spaghetti, penne, or linguine)</li>
                        </ul>
                        <strong>Instructions:</strong>
                        <ol>
                            <li>Bring a large pot of salted water to a boil for the pasta.</li>
                            <li>In a large skillet or Dutch oven, cook the ground beef over medium-high heat, breaking it up with a wooden spoon, until browned and cooked through, about 5-7 minutes.</li>
                            <li>Add the diced onion and minced garlic to the skillet and cook for 2-3 minutes, until the onion is translucent.</li>
                            <li>Stir in the tomato paste and cook for 1 minute.</li>
                            <li>Add the crushed tomatoes, beef broth, oregano, and basil. Season with salt and pepper to taste.</li>
                            <li>Reduce the heat to low and let the sauce simmer for 15-20 minutes, stirring occasionally, to allow the flavors to meld.</li>
                            <li>While the sauce is simmering, cook the pasta according to the package instructions. Drain the pasta and return it to the pot.</li>
                            <li>Add the Bolognese sauce to the cooked pasta and toss to combine.</li>
                            <li>Serve hot, garnished with additional fresh basil or grated Parmesan cheese if desired.</li>
                        </ol>
                    </article>
                </section>
            : null}
        </main>
    )
}

// =======================================================================
// Passing state as props

    /**
     * Challenge:
     * - Create a new component called `Count`
     *    - It should receive a prop called `number`, whose value
     *      is the current value of our count
     *    - Have the component render the h2.count element below
     *      and display the incoming prop `number`
     * - Replace the h2.count below with an instance of
     *   the new Count component, passing the correct value
     *   to its `number` prop.
     * - After doing this, everything should be working the
     *   same as before.
     */

    // Count.jsx
    export default function Count(props){
    return (
            <h2 className="count">{props.number}</h2>   
        )
    }

    // App.jsx
    return (
        <main className="container">
            <div className="counter">
                <button
                    className="minus"
                    onClick={subtract}
                    aria-label="Decrease count"
                >-</button>

                <Count 
                    number={count}
                />
            
                <button
                    className="plus"
                    onClick={add}
                    aria-label="Increase count"
                >+</button>
            </div>
        </main>
    )
}

// =======================================================================
// Setting state from child components

    /**
     * Challenge: Move the star image into its own component (Star)
     * - It should receive a prop called `isFilled` that it
     *   uses to determine which icon it will display. (You'll
     *   need to import the 2 star icons into that new component first).

     * - Import and render that component, passing the value of
     *   `isFavorite` to the new `isFilled` prop.

     * - Don't worry about the abiliity to flip this value quite yet.
     *   Instead, you can test if it's working by manually changing
     *   `isFavorite` in state above.
     */

// Star.jsx
import starFilled from "./images/star-filled.png"
import starEmpty from "./images/star-empty.png"

export default function Star(props) {
    return (
        <button
            aria-pressed={props.isFilled}
            aria-label={props.isFilled ? "Remove from favorites" : "Add to favorites"}
            className="favorite-button"
        >
            <img
                src={props.isFilled ? starFilled : starEmpty}
                alt={props.isFilled ? "filled star icon" : "empty star icon"}
                className="favorite"
            />
        </button>
    )
}

// App.jsx
export default function App() {
    const [contact, setContact] = React.useState({
        firstName: "John",
        lastName: "Doe",
        phone: "+1 (212) 555-1212",
        email: "itsmyrealname@example.com",
        isFavorite: false
    })
    
    let starIcon = contact.isFavorite ? starFilled : starEmpty

    function toggleFavorite() {
        setContact(prevContact => ({
            ...prevContact,
            isFavorite: !prevContact.isFavorite
        }))
    }
    
    return (
        <main>
            <article className="card">
                <img
                    src={avatar}
                    className="avatar"
                    alt="User profile picture of John Doe"
                />
                <div className="info">

                <Star 
                    isFilled={contact.isFavorite}
                />

                    <h2 className="name">
                        {contact.firstName} {contact.lastName}
                    </h2>
                    <p className="contact">{contact.phone}</p>
                    <p className="contact">{contact.email}</p>
                </div>

            </article>
        </main>
    )
}


// =======================================================================
// Passing data around React

// State cannot be passed to sibling elements, it can only be passed down
// from the parent element.
// State should only be global if necessary, and should remain local, if
// the child component is the only component that needs state.

// =======================================================================
// Sound pads challenge, part 1

/**
    * Challenge part 1:
    * 1. Initialize state with the default value of the
    *    array pulled in from pads.js
    * 2. Map over that state array and display each one
    *    as a <button> (CSS is already written for you)
    *    (Don't worry about using the "on" or "color" 
    *    properties yet)
    */

import pads from "./pads"
import React from 'react'
export default function App() {

    const [pad, setPad] = React.useState(pads)
    
    const buttonElements = pads.map(pad => (
        <button key={pad.id}></button>
    ))

    return (
        <main>
            <div className="pad-container">
                {button}
            </div>
        </main>
    )
}


// =======================================================================
// Dynamic styles

/**
    * Challenge: use a ternary to determine the backgroundColor
    * of the buttons
    * If darkMode is true, set them to "#222222"
    * If darkMode is false, set them to "#cccccc"
*/

// index.jsx
import ReactDOM from 'react-dom/client';
import App from "./App"

ReactDOM
    .createRoot(document.getElementById('root'))
    .render(<App darkMode={false} />);

// App.jsx
import React from "react"
import padsData from "./pads"

export default function App(props) {
    const [pads, setPads] = React.useState(padsData)
    
    const backgroundColor = props.darkMode ? "#222222" : "#cccccc"
    
    const buttonElements = pads.map(pad => (
        <button style={{backgroundColor}} key={pad.id}></button>
    ))
    
    return (
        <main>
            <div className="pad-container">
                {buttonElements}
            </div>
        </main>
    )
}

// Instructor Solution

const styles = {
    backgroundColor: darkMode ? "#222222" : "#cccccc"
}

const buttonElements = pads.map(pad => (
        <button style={styles} key={pad.id}></button>
))

// =======================================================================
// Sound pads challenge, part 2

    /**
     * Challenge part 2:
     * 1. Create a separate component called "Pad" and
     *    replace the `button` above with our <Pad /> component
     * 2. Pass the Pad component a prop called `color` with the
     *    value of the same name from the `padsData` objects
     * 3. In the Pad component, apply an inline style to the <button>
     *    to set the backgroundColor of the button.
     * 
     * (We'll deal with the "on" property soon)
     */

// App.jsx
import React from "react"
import padsData from "./pads"
import Pad from './Pad'

export default function App() {
    const [pads, setPads] = React.useState(padsData)

    const buttonElements = pads.map(pad => (
        <Pad 
            id={pad.id}
            color={pad.color}
        />
    ))

// Pad.jsx
export default function Pad({id, color}){
    
    const styles = {
        backgroundColor: color
    }
    
    return (
        <button style={styles} key={id}></button>
    )
}

// Instructor Solution

// App.jsx
const buttonElements = pads.map(pad => (
    <Pad key={pad.id} color={pad.color} />
))

// Pad.jsx
export default function Pad(props) { 
    return (
        <button style={{backgroundColor: props.color}}></button>
    )
}

// =======================================================================
// Sound pads challenge, part 3

/**
    * Challenge part 3:
    * Our buttons got turned off by default! Update the code
    * so if the button is "on", it has the className of "on".
*/

// App.jsx
const buttonElements = pads.map(pad => (
    <Pad key={pad.id} color={pad.color} light={pad.on}/>
))

//Pad.jsx
export default function Pad(props) {

    const buttonLight = props.light ? 'on' : null
    
    return (
        <button 
            style={{backgroundColor: props.color}}
            className={buttonLight}
        ></button>
    )
}

// Instructor Solution

//Pad.jsx
export default function Pad(props) {

    return (
        <button 
            style={{backgroundColor: props.color}}
            className={props.light ? 'on' : undefined}
        ></button>
    )
}

// =======================================================================
// Sound pads challenge part 4.1 - local state

/**
 * Challenge: Create state controlling whether
 * this pad is "on" or "off". Use the incoming
 * `props.on` to determine the initial state.
 * 
 * Create an event listener so when the pad is clicked,
 * it toggles from "on" to "off".
 * 
 * Goal: clicking each pad should toggle it on and off.
 */

import React from 'react'

export default function Pad(props) {
    const [on, setOn] = React.useState(props.on)
    
    function lightSwitch(){
        setOn(on => !on)
    }

    return (
        <button 
            onClick={lightSwitch}
            style={{backgroundColor: props.color}}
            className={on ? "on" : undefined}
        ></button>
    )
}

// =======================================================================
// Sound pads challenge part 4.2 - shared state

/**
    * Challenge: Create a toggle() function that logs
    * "clicked!" to the console
    * 
    * Pass that function down to each of the Pad components
    * and set it up so when they get clicked, the function runs
*/

// =======================================================================
// Sound pads challenge part 4.3 - updating item in array

/**
    * Challenge:
    * Call setPads to update the state of the one pad that was
    * clicked. Map over the previous pads array, and if the current
    * item you're iterating over has the same id as the `id` passed
    * to this function, then return a new object with the `on` value
    * set to the opposite of what it was before.
    * Otherwise (if the ids don't match), just return the previous
    * item as it was, unchanged.
    */

function toggle(id) {
    // prevPads = pads
    setPads(prevPads => 
        prevPads.map(pad => 
        // ternanary to check if pad.id === id
            pad.id === id
                // spread in previous pad, ...pad, but flip on..., else 
                // if no match return the regular pad
                ? { ...pad, on: !pad.on }
                : pad
        )
    )
}

// Instructor Solution


// =======================================================================
// Chef Claude challenge: refactor to separate components

/**
    * Challenge: clean up our code!
    * Let's make a couple new components to make things a
    * little cleaner. (Notice: I'm not suggesting what we
    * have now is bad or wrong. I'm mostly finding an excuse
    * to get in some hands-on practice 🙂)
    * 
    * 1. Move the entire recipe <section> into its own
    *    ClaudeRecipe component
    * 2. Move the list of ingredients <section> into its
    *    own IngredientsList component.
    * 
    * While you're considering how to structure things, consider
    * where state is, think about if it makes sense or not to
    * move it somewhere else, how you'll communicate between
    * the parent/child components, etc.
    * 
    * The app should function as it currently does when you're
    * done, so there will likely be some extra work to be done
    * beyond what I've listed above.
    */


// =======================================================================
// API Sign Ups

// =======================================================================
// AI code walkthrough

// =======================================================================
// Challenge quiz: prep to get recipe from the AI chef

// =======================================================================
// Challenge: Get recipe from the AI chef

/**
 * Challenge: Get a recipe from the AI!
 * 
 * This will be a bit harder of a challenge that will require you
 * to think critically and synthesize the skills you've been
 * learning and practicing up to this point.
 * 
 * Using either the `getRecipeFromChefClaude` function or the 
 * `getRecipeFromMistral` function, make it so that when the user
 * clicks "Get a recipe", the text response from the AI is displayed
 * in the <ClaudeRecipe> component.
 * 
 * For now, just have it render the raw markdown that the AI returns,
 * don't worry about making it look nice yet. (We're going to use a
 * package that will render the markdown for us soon.)
 */

 // Main.jsx

import React from "react"
import IngredientsList from "./components/IngredientsList"
import ClaudeRecipe from "./components/ClaudeRecipe"
import { getRecipeFromChefClaude } from "./ai"

export default function Main() {
    const [ingredients, setIngredients] = React.useState(
        ["all the main spices", "pasta", "ground beef", "tomato paste"]
    )
    
    const [recipeText, setRecipeText] = React.useState("") // Hold Claude response

    async function toggleRecipeShown() {
        try {
            const recipe = await getRecipeFromChefClaude(ingredients)
            setRecipeText(recipe)
        } catch (err) {
            setRecipeText("Sorry, there was an error fetching the recipe.")
            console.error(err)
        } finally {
            console.log('complete')
        }
    }
    
    return (
        <main>

             <ClaudeRecipe recipe={recipeText}/>
        </main>
    )
}

// ClaudeRecipe.jsx
import React from "react"

export default function ClaudeRecipe({ recipe }) {
    if (!recipe) return null

    return (
        <section className="claude-recipe">
            <h2>Chef Claude recommends:</h2>
            <p>{recipe}</p>
        </section>
    )
}


// =======================================================================
// Format recipe response

import ReactMarkdown from "react-markdown"

export default function ClaudeRecipe(props) {
    return (
        <section className="suggested-recipe-container" aria-live="polite">
            <h2>Chef Claude Recommends:</h2>
            <ReactMarkdown>{props.recipe}</ReactMarkdown>
        </section>
    )
}

// =======================================================================
// Side Effects
// =======================================================================

// =======================================================================
// Section 4 intro

// =======================================================================
// Meme Generator Starting POint

// =======================================================================
// Meme Generator State

/**
    * Challenge: move the hardcoded meme info into React
    * state. Use an object with `topText`, `bottomText`,
    * and `imageUrl` properties, and set the initial values to
    * the ones hardcoded below.
*/

const [obj, setObj] = useState({topText: 'One does not simply', 
bottomText: 'Walk into Mordor', imageUrl: 'http://i.imgflip.com/1bij.jpg' })

// =======================================================================
// Meme Generator - Controlled Componenets - part 1

/**
    * Challenge: update the topText value in the meme state
    * object every time the topText input box is changed
    * 
    * Note: don't worry about bottomText at this point.
*/

export default function Main() {
    const [meme, setMeme] = useState({
        topText: "One does not simply",
        bottomText: "Walk into Mordor",
        imageUrl: "http://i.imgflip.com/1bij.jpg"
    })
    
    function handleChange(event) {
        const {value} = event.currentTarget

        setMeme(obj => obj ? {...obj, topText: value } : obj)
    }

// Why the above function works
// 1. The event is passed to the function as an argument
// 2. The event is destructured to get the value of the input field
// 3. SetMeme(obj => ...): Updates state based on previous state
// 4. (obj ? {}...) checks if obj is truthy, 
// 5. {...obj, topText: value} : obj... if obj is truthy, return a new object
// 6. spread in previous object, and set topText to the value of the input
// 7. or if falsy just return the previous object.
// 8. could also do setMeme(obj => obj ? {...obj, topText: value } : null)

// Instructor Solution

function handleChange(event) {
    const {value} = event.currentTarget
    setMeme(prevMeme => ({
        ...prevMeme,
        topText: value
    }))
}

// =======================================================================
// Meme Generator - Controlled Componenets - part 2

// Having a controlled component means that the value will acuratly reflect
// the current value of state.

const [meme, setMeme] = useState({
    topText: "Something different",
    bottomText: "Walk into Mordor",
    imageUrl: "http://i.imgflip.com/1bij.jpg"
})

<label>Top Text
    <input
        type="text"
        placeholder="One does not simply"
        name="topText"
        onChange={handleChange}
        value={meme.topText}
    />
</label>

// Using the same function for both inputs

function handleChange(event) {
    const {value, name} = event.currentTarget
    setMeme(prevMeme => ({
        ...prevMeme,
        [name]: value
    }))
}

// =======================================================================
// Meme Generator - Planning data fetch

// =======================================================================
// Functional programming in React

// Main Principles
// Pure Functions: Functions that return the same output for the same input
// Immutability: Avoid mutating data directly, instead create new copies of data
// Components in React should avoid side effects

// =======================================================================
// Fetching data in React

/**
    * Challenge:
    * Instead of console logging the data, save it in state
    * and display it to the page. (Just replace the hard-coded
    * object inside the `<pre>` element with the data)
*/

import React from "react"

export default function App(props) {
    const [starWarsData, setStarWarsData] = React.useState(null)
    
    fetch("https://swapi.dev/api/people/1")
        .then(res => res.json())
        .then(data => {
            setStarWarsData(starWarsData => starWarsData = data)
        })
    
    return (
        <div>
            <pre>{JSON.stringify(starWarsData)}</pre>
        </div>
    )
}

// Instructor Solution

fetch("https://swapi.dev/api/people/1")
    .then(res => res.json())
    .then(data => setStarWarsData(data))

return (
    <div>
        <pre>{JSON.stringify(starWarsData, null, 2)}</pre>
    </div>
)

// The issue with structurin the fetch request in this way within a 
// React application is that it will infinetely loop / re-render the
// component.


// Why the App is stuck in an infinite loop
// Wehn you change the state of the application, the component re-renders,
// which then calls the fetch request again, which changes the state again...

// =======================================================================
// Intro to useEffect

// What are React's primary tasks?

// 1. Work with the DOM/browser to render UI to the page
// 2. Manage state for us between render cycles (i.e state values are
// 'remembered' from one render to the next)
// 3. Keep the UI updated whenever state or props changes occur

// What can't React handle on its own?
// (Out)side effects
// localStorage, cookies, API/network requests, timers, DOM manipulation,
// subscriptions, etc.

// =======================================================================
// useEffect() syntax and default behavior

React.useEffect(function() {
    fetch("https://swapi.dev/api/people/1")
        .then(res => res.json())
        // .then(data => setStarWarsData(data))
})

React.useEffect(() => {
    fetch("https://swapi.dev/api/people/1")
        .then(res => res.json())
        // .then(data => setStarWarsData(data))

}) 

// Any code you put inside the function passed to useEffect() is guarenteed
// to run only after the component has rendered.

// =======================================================================
// useEffect() Dependencies array

// When you pass an empty array as the second argument to useEffect(), it
// tells React to only run the effect once, when the component mounts.
// However, whatever dependencies you pass in the array will be checked 
// for changes and the effect will run again if any of them change.

import React from "react"

export default function App() {
    const [starWarsData, setStarWarsData] = React.useState({})
    const [count, setCount] = React.useState(0)
    
    console.log("Rendered!")
    
    React.useEffect(function() {
        console.log("Effect ran")
        fetch("https://swapi.dev/api/people/1")
            .then(res => res.json())
            // .then(data => setStarWarsData(data))
    }, [count])

// Adding a [0]

React.useEffect(function() {
    console.log("Effect ran")
    fetch("https://swapi.dev/api/people/1")
        .then(res => res.json())
        // .then(data => setStarWarsData(data))
}, [0])

// When React sees a 0 in the dependencies array, it will run the effect
// then it will never run again. This is because 0 is a constant value
// and will never change. Also, because it has the same value as the
// initial render, React will not run the effect again.

/**
    * Challenge: re-write the useEffect
    * It should run any time `count` changes
    * For now, just console.log("Effect function ran")
*/

React.useEffect(() => {
    console.log('Effect function ran')
}, [count])

// =======================================================================
// useEffect empty dependencies array

// When you pass an empty array as the second argument to useEffect(), it
// tells React to only run the effect once, when the component mounts.

// =======================================================================
// useEffect quiz!

// 1. In what way are React components meant to be "pure functions"
// Pure functions return the same output for the same input. So whatever,
// input is passed into a component e.g variable, prop... Will be output(rendered)
// to the UI.

// 2. What is a "side effect" in React? What are some examples?
// side effects refer to any operation which occurs after a 
// component is rendered, and do not effect the component render 
// cycle. For example, data requests, subscriptions, cookies...

// 3. What is NOT a "side effect" in React? Examples?
// Any value or data set in State, which should cause the component to
// re-render when the value or data changes. For example, if a counter changes,
// a user changes some text on the screen, a button causes a different image to appear...

// 4. When does React run your useEffect function? When does it NOT run
//    the effect function?
// The useEffect function is guarenteed to run after the first render, 
// and will not run again unless there is a dependency added to the array
// which changes on state.

// 5. How would you explain what the "dependecies array" is?
// The dependencies array determines when the useEffect function should run. 

// =======================================================================
// useEffect practice!

/**
    * Challenge part 1:
    * Fetch the data from this url: "https://swapi.dev/api/people/1"
    * and save it in the starWarsData state. Make sure you don't
    * get stuck in an infinite rendering loop!
*/

React.useEffect(() => {
    fetch('https://swapi.dev/api/people/1')
        .then(res => res.json())
        .then(data => setStarWarsData(data))
}, [])

/**
    * Challenge part 2:
    * Combine the "count" state with the request URL
    * so that pressing the "Get next character" button
    * will get a new character from the Star Wars API.
    * Remember to consider the dependencies array!
*/

React.useEffect(() => {
    fetch(`https://swapi.dev/api/people/${count}`)
        .then(res => res.json())
        .then(data => setStarWarsData(data))
}, [count])

// =======================================================================
// Meme Generator - Fetch Memes

/**
    * Challenge:
    * Get an array of memes from the imgflip API as soon as
    * this component renders for the first time.
    * Check the imgflip documentation for the correct URL.
    * Save the array of memes (not the whole response
    * data) to state. (For this app, we'll randomly choose
    * one of the memes from this array when the user clicks
    * the "Get a new meme image" button, but we'll do that in
    * a separate challenge.)
    * 
    * Hint: for now, don't try to use an async/await function.
    * Instead, use `.then()` to resolve the promises
    * from using `fetch`. We'll learn why after this challenge.
*/

    const [memeArray, setMemeArray] = useState(null)
    
    useEffect(() => {
        fetch('https://api.imgflip.com/get_memes')
            .then(res => res.json())
            .then(data => {
                setMemeArray(data.data.memes)
                })
    }, [])

// Instructor Solution

    const [allMemes, setAllMemes] = useState([])
    
    useEffect(() => {
        fetch("https://api.imgflip.com/get_memes")
            .then(res => res.json())
            .then(data => setAllMemes(data.data.memes))
    }, [])

// useEffects() cannot accept async functions, but you can use 
// async/await inside the useEffect function. 
// However, you need to wrap it in an IIFE (immediately invoked function expression).


// =======================================================================
// State and Effect practices

/**
    * Challenge:
    * 1. Create state called `show`, default to `true`
    * 2. When the button is clicked, toggle `show`
    * 3. Only display `<WindowTracker>` if `show` is `true`
*/

// App.jsx
import WindowTracker from "./WindowTracker"
import { useState } from 'react'

export default function App() {

    const [show, setShow] = useState(true)
    
    function toggle(){
        setShow(boolean => !boolean)
    }
    
    return (
        <main className="container">
            <button
                onClick={toggle}
            >
                Toggle WindowTracker
            </button>
            <WindowTracker 
                toggle={show}
            />
        </main>
    )
}

// WindowTracker.jsx
import React from "react"

export default function WindowTracker(props) {
    
    return (
        <h1 className={props.toggle ? 'toggle' : null}>Window width: {window.innerWidth}</h1>
    )
}

// index.css
.toggle{
    display: none;
}

// Conditional rendering / short circuiting

import WindowTracker from "./WindowTracker"
import { useState } from 'react'

export default function App() {

    const [show, setShow] = useState(true)
    
    function toggle(){
        setShow(boolean => !boolean)
    }
    
    return (
        <main className="container">
            <button
                onClick={toggle}
            >
                Toggle WindowTracker
            </button>
            {show && <WindowTracker 
            />}
        </main>
    )
}

/**
    * Challenge:
    * 1. Create state called `windowWidth`, default to 
    *    `window.innerWidth`
    * 2. When the window width changes, update the state
    * 3. Display the window width in the h1 so it updates
    *    every time it changes
*/

import React from "react"

export default function WindowTracker() {
    const [windowWidth, setWindowWidth] = React.useState(window.innerWidth)
    
    React.useEffect(() => {
        window.addEventListener("resize", function() {
            setWindowWidth(window.innerWidth)
        })
    }, [])
    
    return (
        <h1>Window width: {windowWidth}</h1>
    )
}


// =======================================================================
// useEffect cleanup function

React.useEffect(() => {
    // This function will run when the component mounts
    function watchWindowWidth () {
        console.log("Resized")
        setWindowWidth(window.innerWidth)
    }
    // Adds a 'rezise' event listener to the window object
    window.addEventListener("resize", watchWindowWidth)
    // removes the event listener when the component unmounts
    return function() {
        console.log("Cleaning up...")
        window.removeEventListener("resize", watchWindowWidth)
    }
}, [])

// =======================================================================
// Meme Generator - Get random meme

/**
    * Challenge: Get a random image from the array of
    * allMemes when the user clicks the button. Once
    * you've gotten a random image from the array, make
    * sure to write the code that will display that
    * random meme image to the page.
*/

function selectRandomImage(){
    const randomImage = allMemes[Math.floor(Math.random() * allMemes.length)].url
    return (
        setMeme(prevMeme => ({
            ...prevMeme, imageUrl: randomImage
        }))
    )
}

// Instructor Solution

function getMemeImage() {
    const randomNumber = Math.floor(Math.random() * allMemes.length)
    const newMemeUrl = allMemes[randomNumber].url
    setMeme(prevMeme => ({
        ...prevMeme,
        imageUrl: newMemeUrl
    }))
}

// =======================================================================
// Sneak peak: refs

// Refs are similar to state, except:
// 1. You can mutate them directly
// 2. Changing them does not cause a re-render of the component
// They're commonly used for accessing DOM nodes without needing to assign
// ids to elements.

const recipeSection = React.useRef(null)

<input type="text" ref={recipeSection} />

// =======================================================================
// useEffect practice: scrollIntoView()

React.useEffect(() => {
    if (recipe !== "" && recipeSection.current !== null) {
        recipeSection.current.scrollIntoView()
    }
}, [recipe])

// =======================================================================
// scrollIntoView() iFrame bug fix

React.useEffect(() => {
    if (recipe !== "" && recipeSection.current !== null) {
        recipeSection.current.scrollIntoView({behavior: "smooth"})
    }
}, [recipe])

// bug fix for iframe devices
    React.useEffect(() => {
        if (recipe !== "" && recipeSection.current !== null) {
            // recipeSection.current.scrollIntoView({behavior: "smooth"})
            const yCoord = recipeSection.current.getBoundingClientRect().top + window.scrollY
            window.scroll({
                top: yCoord,
                behavior: "smooth"
            })
        }
    }, [recipe])

// =======================================================================
// Capstone Project #1 - Tenzies
// =======================================================================

// =======================================================================
// Tenzies Intro

// =======================================================================
// Tenzies: Setup

/**
 * Challenge: Start a brand new React app!
 * - Create a separate App component
 * - Import and render the App component here
 * - In the App component, render a <main> element
 * - Style everything to look like the slide
 */

 // When setting up the App, make sure to remember to also style <div id="root">

  * {
    box-sizing: border-box;
}

body {
    margin: 0;
    background-color: #0B2434;
    padding: 20px;
    height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

div#root {
    height: 100%;
    width: 100%;
    max-height: 400px;
    max-width: 400px;
}

main {
    background-color: #F5F5F5;
    height: 100%;
    border-radius: 5px;
    
}

// =======================================================================
// Tenzies: Die component

/**
 * Challenge:
 * 
 * - Create a Die component that takes a `value` prop. Should
 *   render a button with that value displayed.
 * - Render 10 instances of the Die component (manually)
 *      - Provide a number between 1-6 for the value on each
 *        for now
 * - Style the <main> and <Die> components 
 *   to look like they do in the slide
 *      - Hints: Create a container to hold the 10 instances
 *        of the Die component, and use CSS Grid to lay them
 *        out evenly in 2 rows of 5 columns
 *      - Use flexbox on main to center the dice container
 *        in the center of the page
 */

 // Die.jsx
 export default function Die(props){
    return(
        <button className='die'>
            {props.value}
        </button>
    )
}

// App.jsx
import Die from './components/Die'

export default function App() {
    return (
        <main>
            <div className='die-container'>
                <Die value={0}/>
                <Die value={1}/>
                <Die value={2}/>
                <Die value={3}/>
                <Die value={4}/>
                <Die value={5}/>
                <Die value={6}/>
                <Die value={1}/>
                <Die value={2}/>
                <Die value={3}/>
            </div>
        </main>
        )
}

// =======================================================================
// Tenzies: Generate 1- random numbers

/**
 * Challenge:
 * 
 * Write a function (generateAllNewDice) that returns an array 
 * of 10 random numbers between 1-6 inclusive.
 * 
 * Log the array of numbers to the console for now
 */

function generateAllNewDice() {
    return (
        Array.from({ length: 10 }, () => Math.floor(Math.random() * (6 - 1) + 1))
    )
}

console.log(generateAllNewDice())

// Instructor Solution

    function generateAllNewDice() {
        const newDice = []
        for (let i = 0; i < 10; i++) {
            const rand = Math.ceil(Math.random() * 6)
            newDice.push(rand)
        }
        return newDice
    }

// Instructor Solution 2

    function generateAllNewDice() {
        return new Array(10)
            .fill(0)
            .map(() => Math.ceil(Math.random() * 6))
    }

// =======================================================================
// Tenzies: Map array to Die components

/**
 * Challenge:
 * 
 * Create state to hold our array of numbers. (Initialize
 * the state by calling our `generateAllNewDice` function so it 
 * loads all new dice as soon as the app loads)
 * 
 * Map over the state numbers array to generate our array
 * of Die components and render those in place of our
 * manually-written 10 Die elements.
 */

const [randomDice, setRandomDice] = useState(generateAllNewDice)

const diceComponents = randomDice.map(x => <Die value={x} />)

// Instructor Solution

const [dice, setDice] = useState(generateAllNewDice())
const diceElements = dice.map(num => <Die value={num} />)

// =======================================================================
// Tenzies: Roll dice button

/**
    * Challenge: Create a `Roll Dice` button that will re-roll
    * all 10 dice
    * 
    * Clicking the button should generate a new array of numbers
    * and set the `dice` state to that new array (thus re-rendering
    * the array to the page)
    */

export default function App() {

    const [dice, setDice] = useState(generateAllNewDice())
    
    function generateAllNewDice() {
        return new Array(10)
            .fill(0)
            .map(() => Math.ceil(Math.random() * 6))
    }
    
    const diceElements = dice.map(num => <Die value={num} />)
    
    function rollNewDice(){
        setDice(generateAllNewDice())
    }
    
    return (
        <main>
            <div className="dice-container">
                {diceElements}
            </div>
            
            { 
                <button 
                onClick={rollNewDice} 
                className="rollBtn">
                Roll
                </button> 
            }
            
        </main>
    )
}

// Instructor Solution

// =======================================================================
// Tenzies: Change dice to objects

/**
    * Challenge: Update the array of numbers in state to be
    * an array of objects instead. Each object should look like:
    * { value: <random number>, isHeld: false }
    * 
    * Making this change will break parts of our code, so make
    * sure to update things so we're back to a working state
*/

const [dice, setDice] = useState(generateAllNewDice())

function generateAllNewDice() {
    return new Array(10)
        .fill({ value: 0, isHeld: false })
        .map(() => ({ value: Math.ceil(Math.random() * 6), isHeld: false }))
}

function rollDice() {
    setDice(generateAllNewDice())
}

const diceElements = dice.map(num => <Die value={num.value} />)

// Instructor Solution

    function generateAllNewDice() {
        return new Array(10)
            .fill(0)
            .map(() => ({value: Math.ceil(Math.random() * 6), isHeld: false}))
    }

// =================================

// Using { nanoid } to generate id numbers for react keys

import { nanoid } from 'nanoid'

function generateAllNewDice() {
    return new Array(10)
        .fill(0)
        .map(() => ({
            value: Math.ceil(Math.random() * 6),
            isHeld: false,
            id: nanoid()
        }))
}

const diceElements = dice.map(dieObj => <Die key={dieObj.id} value={dieObj.value} />)


// =======================================================================
// Tenzies: Styling held dice

/**
    * Challenge: Add conditional styling to the Die component
    * so that if it's held (isHeld === true), its background color
    * changes to a light green (#59E391)
    * 
    * Remember: currently the Die component has no way of knowing
    * if it's "held" or not.
*/

    const diceElements = dice.map(dieObj => 
    <Die 
    conditional={dieObj.isHeld ? 'conditional' : null} 
    key={dieObj.id} 
    value={dieObj.value} 
    />)

    .dice-container button.conditional{
    background-color: #59E391;
    }

    .dice-container button {
        height: 50px;
        width: 50px;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.15);
        border-radius: 10px;
        border: none;
        background-color: white;
        font-size: 1.75rem;
        font-weight: bold;
    }

// Instructor Solution

const diceElements = dice.map(dieObj => (
    <Die key={dieObj.id} value={dieObj.value} isHeld={dieObj.isHeld}/>)
)

export default function Die(props) {
    const styles = {
        backgroundColor: props.isHeld ? "#59E391" : "white"
    }
    
    return (
        <button style={styles}>{props.value}</button>
    )
}

// =======================================================================
// Tenzies: Hold dice - part 1

    /**
     * Challenge: Create a function `hold` that takes
     * `id` as a parameter. For now, just have the function
     * console.log(id).
     * 
     * Then, figure out how to pass that function down to each
     * instance of the Die component so when each one is clicked,
     * it logs its own unique ID property. (Hint: there's more
     * than one way to make that work, so just choose whichever
     * you want)
     */

// App.js

function hold(id){
    console.log(id)
}

const diceElements = dice.map(dieObj => (
    <Die 
    key={dieObj.id} 
    value={dieObj.value} 
    isHeld={dieObj.isHeld}
    onClick={() => hold(dieObj.id)}
    />)
)

//Die.jsx
    return (
        <button 
            style={styles}
            onClick={props.hold}
        >{props.value}</button>
    )

// Instructor Solution
return (
    <button 
        style={styles}
        onClick={() => props.hold(props.id)}
    >{props.value}</button>
)

// =======================================================================
// Tenzies: Hold dice - part 2

/**
    * Challenge: Update the `hold` function to flip
    * the `isHeld` property on the object in the array
    * that was clicked, based on the `id` prop passed
    * into the function.
    * 
    * Hint: as usual, there's more than one way to 
    * accomplish this.
*/ 

// Set new dice state
// get previous dice state, map over array of objects
// if id(previous dice id) === clicked dice.id
// return new object, spread in all other elements but flip isHeld to true
// else return previous dice obj

function hold(id) {
    setDice(prevDice => prevDice.map(diceObj => {
        id === diceObj.id ? {...diceObj, isHeld: !diceObj.isHeld} : diceObj
    }))
}

// Instructor Solution

function hold(id) {
    setDice(oldDice => {
        return oldDice.map(die => {
            return die.id === id ?
                {...die, isHeld: !die.isHeld} :
                die
        })
    })
}

    function hold(id) {
        setDice(oldDice => oldDice.map(die =>
            die.id === id ?
                { ...die, isHeld: !die.isHeld } :
                die
        ))
    }

// =======================================================================
// Tenzies: Hold dice - part 3

/**
    * Challenge: Update the `rollDice` function to not just roll
    * all new dice, but instead to look through the existing dice
    * to NOT role any that are being `held`.
    * 
    * Hint: this will look relatively similiar to the `hold`
    * function below. When we're "rolling" a die, we're really
    * just updating the `value` property of the die object.
*/

function rollDice() {
    setDice(prevDice => {
        return prevDice.map(diceObj => {
            return !diceObj.isHeld ? {...diceObj, value: Math.ceil(Math.random() * 6)} : diceObj
        })
    })
}

function rollDice() {
    setDice(prevDice => prevDice.map(diceObj => 
        !diceObj.isHeld ? 
            {...diceObj, value: Math.ceil(Math.random() * 6)} : 
                diceObj
        )
    )
}

// Instructor Solution

function hold(id) {
    setDice(oldDice => oldDice.map(die =>
        die.id === id ?
            { ...die, isHeld: !die.isHeld } :
            die
    ))
}

// =======================================================================
// Tenzies: End game - part 1

/**
     * Critical thinking time!
     * 
     * We want to indicate to the user that the game is over
     * if (1) all the dice are held, and (2) all the dice have
     * the same value.
     * 
     * How might we do this? Some questions to consider:
     * 
     * 1. Do we need to save a `gameWon` value in state? If so, why?
     *    If not, why not?
     * 
     * Yes, we need to do that to track the whether or not that game
     * has been finalised or not. 
     * 
     * 2. Do we need to create a side effect to synchronize the `gameWon`
     *    value (whether it's in state or not) with the current state of 
     *    the dice?
     * 
     * Yes, because the gameWon value is determined by the isHeld 
     * property of all the dice being true
     * 
     * 
     * Conclusion:
     * 
     * Create a gameWon state and initialise it to a boolean value of false
     * each time the hold function is run and isHeld flips to true, then
     * the id value of that dice is pushed to an array. When the array
     * length === 10, then the gameWon state flips to true. flipping the roll
     * button to 'new game', and droppping the confetti
     * 
     * 
*/

// Instructor Solution

// Not necessary!

// =======================================================================
// Tenzies: End game - part 2

    /**
     * Challenge:
     * Log "Game won!" to the console only if the 2 winning
     * conditions are met.
     * 
     * 1. all the dice are being held, and
     * 2. all the dice have the same value
     * 
     * For now, no need to even save a variable!
*/

const allSameValue = dice.every(diceObj => diceObj.isHeld && diceObj.value === dice[0].value)

allSameValue ? console.log('Game won!') : console.log('keep going')

// Solution 2

dice.every(diceObj => diceObj.isHeld && diceObj.value === dice[0].value ? console.log('Game won!') : null)

// You're on the right track, but your condition checks aren't quite right. How can you ensure both conditions are checked separately before logging 'Game won!'?

// every() returns a boolean! and should not be used for side effects

const allHeld = dice.every(dice => dice.isHeld)
const firstValue = dice[0].value
const allSameValue = dice.every(dice => dice.value === firstValue)

if (allHeld && allSameValue){
    console.log('Game won!')
} else {
    console.log('Keep going')
}

// Instructor Solution

if (
    dice.every(die => die.isHeld) && 
    dice.every(die => die.value === dice[0].value)
) {
    console.log("Game won!")
}

/**
    * Challenge part 2:
    * 1. Create a new `gameWon` variable.
    * 2. If `gameWon` is true, change the button text to
    *    "New Game" instead of "Roll"
*/

const [gameWon, setGameWon] = useState(false)
<button className="roll-dice" onClick={rollDice}>{!gameWon ? 'Roll' : 'New Game'}</button>

// Instructor Solution

const gameWon = dice.every(die => die.isHeld) &&
    dice.every(die => die.value === dice[0].value)

<button className="roll-dice" onClick={rollDice}>
    {gameWon ? "New Game" : "Roll"}
</button>


// =======================================================================
// Tenzies: End game - part 3

/**
    * Challenge:
    * Make the confetti drop when the game is won! 🎉🎊
*/

import Confetti from 'react-confetti'

{gameWon ? <Confetti /> : null}

// Instructor Solution

{gameWon && <Confetti />}

// =======================================================================
// Tenzies: Lazy State Initialization

// Stop React from re-running the function in the background on every re-render
const [dice, setDice] = useState(() => generateAllNewDice())


// =======================================================================
// Tenzies: New game

/**
    * Challenge: Allow the user to play a new game when the
    * button is clicked
*/

function rollDice() {
    if (gameWon){
        setDice(generateAllNewDice())
    }
    else {
        setDice(oldDice => oldDice.map(die =>
        die.isHeld ?
            die :
            { ...die, value: Math.ceil(Math.random() * 6) }
        ))  
    }
}

// =======================================================================
// Tenzies: Accessibility improvements

// Die.jsx
export default function Die(props) {
    const styles = {
        backgroundColor: props.isHeld ? "#59E391" : "white"
    }
    
    return (
        <button 
            style={styles}
            onClick={props.hold}
            aria-pressed={props.isHeld}
            aria-label={`Die with value ${props.value}, 
            ${props.isHeld ? "held" : "not held"}`}
        >{props.value}</button>
    )
}

//App.jsx
    return (
        <main>
            {gameWon && <Confetti />}
            <div aria-live="polite" className="sr-only">
                {gameWon && <p>Congratulations! You won! Press "New Game" to start again.</p>}
            </div>
            <h1 className="title">Tenzies</h1>
            <p className="instructions">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>
            <div className="dice-container">
                {diceElements}
            </div>
            <button className="roll-dice" onClick={rollDice}>
                {gameWon ? "New Game" : "Roll"}
            </button>
        </main>
    )
}

// index.css
.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

// =======================================================================
// Tenzies: Accessibility improvements - part 2

/**
    * Challenge:
    * Make it so when the game is over, the "New Game" button
    * automatically receives keyboard focus so keyboard users
    * can easily trigger that button without having to tab
    * through all the dice first.
    * 
    * Hints:
    * 1. Focusing a DOM element with the DOMNode.focus() method
    *    requires accessing the native DOM node. What tool have
    *    we learned about that allows us to do that?
    * 
    * 2. Automatically calling the .focus() on a DOM element when
    *    the game is won requires us to synchronize the local
    *    `gameWon` variable with an external system (the DOM). What
    *    tool have we learned about that allows us to do that?
    */

    const newGame = React.useRef(null)

    ref={newGame}

    React.useEffect(() => {
        if(gameWon){
            newGame.current.focus()
        }
    }, [gameWon])

// Re-write App
import { useState, useRef, useEffect } from "react"
import Die from "./Die"
import { nanoid } from "nanoid"
import Confetti from "react-confetti"

export default function App() {
    const [dice, setDice] = useState(() => generateAllNewDice())
    const buttonRef = useRef(null)

    const gameWon = dice.every(die => die.isHeld) &&
        dice.every(die => die.value === dice[0].value)
        
    useEffect(() => {
        if (gameWon) {
            buttonRef.current.focus()
        }
    }, [gameWon])

    function generateAllNewDice() {
        return new Array(10)
            .fill(0)
            .map(() => ({
                value: Math.ceil(Math.random() * 6),
                isHeld: false,
                id: nanoid()
            }))
    }
    
    function rollDice() {
        if (!gameWon) {
            setDice(oldDice => oldDice.map(die =>
                die.isHeld ?
                    die :
                    { ...die, value: Math.ceil(Math.random() * 6) }
            ))
        } else {
            setDice(generateAllNewDice())
        }
    }

    function hold(id) {
        setDice(oldDice => oldDice.map(die =>
            die.id === id ?
                { ...die, isHeld: !die.isHeld } :
                die
        ))
    }

    const diceElements = dice.map(dieObj => (
        <Die
            key={dieObj.id}
            value={dieObj.value}
            isHeld={dieObj.isHeld}
            hold={() => hold(dieObj.id)}
        />
    ))

    return (
        <main>
            {gameWon && <Confetti />}
            <div aria-live="polite" className="sr-only">
                {gameWon && <p>Congratulations! You won! Press "New Game" to start again.</p>}
            </div>
            <h1 className="title">Tenzies</h1>
            <p className="instructions">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>
            <div className="dice-container">
                {diceElements}
            </div>
            <button ref={buttonRef} className="roll-dice" onClick={rollDice}>
                {gameWon ? "New Game" : "Roll"}
            </button>
        </main>
    )
}

// =======================================================================
// Tenzies Outro

// =======================================================================
// Assembly: Endgame
// =======================================================================

// =======================================================================
// Intro

// =======================================================================
// Project Planning

/**
 * Project planning:
 * 
 * Questions to ask yourself before writing any code:
 * 
 * - What are the main containers of elements I need
 *   in this app?
 *  1. Header
 *  2. Container holding button elements w/ prog language text
 *  3. contianer holding inline block of input elements
 *  4. container holding 26 buttons w/ alphabet letters
 * 
 * - What values will need to be saved in state vs.
 *   what values can be derived from the state?
 * 
 *  Saved in State: 
 *  - no of attemps
 *  - hidden word
 *  - buttons w/ prog lang text
 *  - initial hidden pass/ fail attempt
 * 
 *  Derived from State:
 *  - re-render of prog lang text
 *  - re-render of hidden word
 *  - banner which shoes pass/fail attempt
    - game status
 * 
 * 
 * - How will the user interact with the app? What
 *   events do I need to handle?
 * 
 *  - clicking on alphabet buttons
 *  - new game button
 * 
 */

// =======================================================================
// Header Section


/**
 * Goal: Build out the main parts of our app
 * 
 * Challenge: Add a header with the game title
 * and description. Startin' out easy 🙂🚶‍➡️
 */

 // Header.jsx
 export default function Header(){
    return(
        <header>
            <h1>Assembly: Endgame</h1>
            <p>Guess the word in under 8 attempts to keep the </p>
            <p>programming world safe from Assembly!</p>
        </header>
    )
}

//index.css
header{
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 325px;
}

header h1, p{
    margin: 0;
    
}

header h1{
    font-size: 1.25rem;
    font-weight: 500;
    color: #F9F4DA;
    line-height: 2rem;
    margin-top: 1.75rem;
}

header p{
    font-size: 0.875rem;
    font-weight: 500;
    color: #8E8E8E;
    line-height: 1.25rem;
}

// Instructor Solution

header {
    text-align: center;
}

header > h1 {
    font-size: 1.25rem;
    font-weight: 500;
    color: #F9F4DA;
}

header > p {
    font-size: 0.875rem;
    max-width: 350px;
    color: #8E8E8E;
}

// =======================================================================
// Status Section

/**
 * Goal: Build out the main parts of our app
 * 
 * Challenge: Build a status section below the header.
 * For now, you can just hard-code in the styles for
 * a winning game, and we'll make it more dynamic
 * later.
 */

 // Status.jsx
 export default function Status(){
    return (
        <div className='status-container'>
            <h2>You win!</h2>
            <p>Well done!🎉</p>
        </div>
    )
}

// =======================================================================
// Languages List

/**
 * Goal: Build out the main parts of our app
 * 
 * Challenge: Create the language chips. Use the
 * `languages.js` file to pull in the array of
 * languages to use, which contains the language
 * name, background color, and text color.
 * 
 * Hint for layout: use a flex container that can wrap
 * to layout the languages.
 */

 // Chips.jsx
 import {languages} from './languages.js'

export default function Chips(){
    
    const chipElements = languages.map(chip => {
        return (
            <div key={chip.name} className="chip" style={{backgroundColor: `${chip.backgroundColor}`, color: `${chip.color}`}}>
                <p>{chip.name}</p>
            </div>
        )
    })
        
    return(
        <div className='chip-container'>
           {chipElements}
        </div>
    )
}

// index.css
div.chip-container{
    display: flex;
    flex-wrap: wrap;
    max-width: 350px;
    justify-content: center;
    gap: 2.5px;
}

// Instructor Solution
    const languageElements = languages.map(lang => {
        const styles = {
            backgroundColor: lang.backgroundColor,
            color: lang.color
        }
        return (
            <span style={styles}>{lang.name}</span>
        )
    })

// CSS
section.language-chips {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    justify-content: center;
    max-width: 350px;
}

span.chip {
    border-radius: 3px;
    padding: 4.5px;
}

// =======================================================================
// Word Display

/**
 * Goal: Build out the main parts of our app
 * 
 * Challenge: 
 * 1. Save a "currentWord" in state. Initialize as "react".
 * 2. Map over the letters of the word (you'll need to turn 
 *    the string into an array of letters first) and display
 *    each one as a <span>. Capitalize the letters when
 *    displaying them.
 * 3. Style to look like the design. You can get the underline 
 *    effect on the box using `border-bottom`.
 */

// App.jsx
const [currentWord, setCurrentWord] = React.useState('React')

const wordArr = []

for(let i = 0; i < currentWord.length; i++){
    wordArr.push(currentWord[i].toUpperCase())
}

const letters = wordArr.map(letter => {
    return (
        <div key={letter} className='empty-letter'>
            <b className='e'>{letter}</b>
        </div>
    )
})

// Index.css
.letters {
width: 100%;
display: flex;
flex-direction: row;
justify-content: center;
text-align: center;
font-size: 1.175rem;
color: #f9f4da;
margin-top: 2rem;
gap: 0.25rem;
}

.e {
opacity: 1;
}

.empty-letter {
width: 2.5rem;
height: 2.5rem;
background-color: #323232;
border-bottom: 1px solid #f9f4da;
display: flex;
flex-direction: column;
justify-content: center;
}

// Instructor Solution

const letterElements = currentWord.split("").map((letter, index) => (
    <span key={index}>{letter.toUpperCase()}</span>
))

// =======================================================================
// Keyboard

/**
 * Goal: Build out the main parts of our app
 * 
 * Challenge: 
 * Display the keyboard ⌨️. Use <button>s for each letter
 * since it'll need to be clickable and tab-accessible.
 */

const alphabet = "abcdefghijklmnopqrstuvwxyz"

const alphabetEl = alphabet.split("").map(letter => (
    <button key={letter} className='button'>{letter.toUpperCase()}</button>
))

// =======================================================================
// Save the guessed letters

/**
 * Goal: Allow the user to start guessing the letters
 * 
 * Challenge: Create a new array in state to hold user's
 * guessed letters. When the user chooses a letter, add
 * that letter to this state array.
 * 
 * Don't worry about whether it was a right or wrong 
 * guess yet.
 */

function letterguess(id){
    setGuessedLetter(prevLetter => [...prevLetter, id]) 
}

const keyboardElements = alphabet.split("").map(letter => (
    <button onClick={() => letterguess(letter)} key={letter}>{letter.toUpperCase()}</button>
))

// Instructor Solution

function addGuessedLetter(letter) {
    setGuessedLetters(prevLetters => 
        prevLetters.includes(letter) ? prevLetters : [...prevLetters, letter]
    )
}

// Solution 2, using sets
function addGuessedLetter(letter) {
    setGuessedLetters(prevLetters => {
        const lettersSet = new Set(prevLetters)
        lettersSet.add(letter)
        return Array.from(lettersSet)
    })
}

// =======================================================================
// Keyboard letter styles for guesses

/**
 * Goal: Allow the user to start guessing the letters
 * 
 * Challenge: Update the keyboard when a letter is right
 * or wrong.
 * 
 * Bonus: use the `clsx` package to easily add conditional 
 * classNames to the keys of the keyboard. Check the docs 
 * to learn how to use it 📖
 */

 // logic for guessed letter. 

const keyboardElements = alphabet.split("").map(letter => {

// Variables used to hold true/false values for letters pressed.
// isGuessed always runs as will be a truthy value.
// isCorrect is either true or false.
// This is then checked in the ternary, and the css class is applied
// based on outcome being true / false.
    const isGuessed = guessedLetters.includes(letter);
    const isCorrect = currentWord.includes(letter);

    return (
        <button
            key={letter}
            onClick={() => addGuessedLetter(letter)}
            className={clsx(
                'keyboard-button', // your base style
                isGuessed && (isCorrect ? 'correct' : 'incorrect')
            )}
        >
            {letter.toUpperCase()}
        </button>
    );
});

.keyboard-button {
    padding: 10px;
    margin: 4px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
}

.correct {
    background-color: green;
    color: white;
}

.incorrect {
    background-color: red;
    color: white;
}

// =======================================================================
// Only display correctly guessed letters in word

/**
 * Goal: Allow the user to start guessing the letters
 * 
 * Challenge: Only display the correctly-guessed letters
 * in the word
 */

// Clsx defaults styling to 'hiddenBtn';

.hiddenBtn{
    color: #323232;
}

// then when a button is pressed, onClick adds the ltter to guessedLetter
// and re-renders the state.
// Then, within the clsx, we check if the guessedLetter array includes
// any of the letters from current word, if so the highlight styling
// is applied

.highlight{
    color: white;
}

const letterElements = currentWord.split("").map((letter, index) => {        
    return (
        <span 
            className={clsx(
                'test',
                guessedLetters.includes(letter) && 'highlight'
            )}
            key={index}
        >
            {letter.toUpperCase()}
        </span>
    )
})

// Instructor Solution

// Instructor used a ternary to check if the guessedletters array,
// includes any of the letters, if so then the letter is rendered,
// if not an empty string is rendered.

const letterElements = currentWord.split("").map((letter, index) => (
    <span key={index}>
        {guessedLetters.includes(letter) ? letter.toUpperCase() : ""}
    </span>
))

// =======================================================================
// Wrong guess count

/**
 * Goal: Add in the incorrect guesses mechanism to the game
 * 
 * Challenge: Derive a variable (`wrongGuessCount`) for the 
 * number of incorrect guesses by using the other state 
 * values we're already holding in the component.
 * 
 * console.log the wrongGuessCount for now
 */

    // Derived values
let wrongGuessCount = 0

guessedLetters.map((letter) => {
    currentWord.split("").includes(letter) ? wrongGuessCount : wrongGuessCount++
})

// Instructor Solution

const wrongGuessCount = 
    guessedLetters.filter(letter => !currentWord.includes(letter)).length
console.log(wrongGuessCount)

// =======================================================================
// Lost languages

/**
 * Goal: Add in the incorrect guesses mechanism to the game
 * 
 * Challenge: When mapping over the languages, determine how
 * many of them have been "lost" and add the "lost" class if
 * so.
 * 
 * Hint: use the wrongGuessCount combined with the index of
 * the item in the array while inside the languages.map code
 */

const languageElements = languages.map((lang, index) => {
    const styles = {
        backgroundColor: lang.backgroundColor,
        color: lang.color
    }
    return (
        <span
            className={clsx(
                'chip',
                index < wrongGuessCount && 'lost'
            )}
            style={styles}
            key={lang.name}
        >
            {lang.name}
        </span>
    )
})

// instructor solution
const languageElements = languages.map((lang, index) => {
    const isLanguageLost = index < wrongGuessCount
    const styles = {
        backgroundColor: lang.backgroundColor,
        color: lang.color
    }
    return (
        <span
            className={`chip ${isLanguageLost ? "lost" : ""}`}
            style={styles}
            key={lang.name}
        >
            {lang.name}
        </span>
    )
})

// Instructor clsx solution
const languageElements = languages.map((lang, index) => {
    const isLanguageLost = index < wrongGuessCount
    const styles = {
        backgroundColor: lang.backgroundColor,
        color: lang.color
    }
    const className = clsx("chip", isLanguageLost && "lost")
    return (
        <span
            className={className}
            style={styles}
            key={lang.name}
        >
            {lang.name}
        </span>
    )
})

// =======================================================================
// isGameOver

/**
 * Goal: Add in the incorrect guesses mechanism to the game
 * 
 * Challenge:
 * 1. Create a variable `isGameOver` which evaluates to `true`
 *    if the user has guessed incorrectly 8 times. Consider how
 *    we might make this more dynamic if we were ever to add or
 *    remove languages from the languages array.
 * 2. Conditionally render the New Game button only if the game
 *    is over.
 */

const isGameover = wrongGuessCount >= languageElements.length

{isGameover && <button className="new-game">New Game</button>}

// Instructor Solution
const isGameWon = 
    currentWord.split("").every(letter => guessedLetters.includes(letter))
const isGameLost = wrongGuessCount >= languages.length - 1
const isGameOver = isGameWon || isGameLost

// =======================================================================
// Display won/lost status

/**
 * Goal: Add in the incorrect guesses mechanism to the game
 * 
 * Challenge:
 * Conditionally render either the "won" or "lost" statuses
 * from the design, both the text and the styles, based on the
 * new derived variables.
 * 
 * Note: We always want the surrounding `section` to be rendered,
 * so only change the content inside that section. Otherwise the
 * content on the page would jump around a bit too much.
 */

 <section 
    className={clsx(
        'game-status',
        isGameWon ? 'green' : isGameLost ? 'red' : 'game-status'
    )}
    >
        {
        isGameWon ? 
        <>
        <h2>You win!</h2>
        <p>Well done! 🎉</p>
        </> : 
        isGameLost ?
        <>
        <h2>Game over!</h2>
        <p>You lose! Better start learning Assembly 😭</p>
        </> :
        ''
        }
</section>

// Instructor Solution
const gameStatusClass = clsx("game-status", {
    won: isGameWon,
    lost: isGameLost
})

<section className={gameStatusClass}>
    {isGameOver ? (
        isGameWon ? (
            <>
                <h2>You win!</h2>
                <p>Well done! 🎉</p>
            </>
        ) : (
            <>
                <h2>Game over!</h2>
                <p>You lose! Better start learning Assembly 😭</p>
            </>
        )
    ) : (
            null
        )
    }
</section>


// =======================================================================
// Quick CSS alignment fix

body {
    margin: 0;
    font-family: "Hanken Grotesk", Arial, sans-serif;
    background-color: #262626;
    color: #D9D9D9;
    padding: 20px;
    height: 100vh;
}

main {
    display: flex;
    flex-direction: column;
    align-items: center;
}

section.game-status {
    display: flex;
    flex-direction: column;
    align-items: center;
    color: #F9F4DA;
    width: 100%;
    max-width: 350px;
    min-height: 60px;
    border-radius: 4px;
    margin-block: 30px;
}

// =======================================================================
// Conditional rendering with a helper function

function renderGameStatus() {
        if (!isGameOver) {
            return null
        }

        if (isGameWon) {
            return (
                <>
                    <h2>You win!</h2>
                    <p>Well done! 🎉</p>
                </>
            )
        } else {
            return (
                <>
                    <h2>Game over!</h2>
                    <p>You lose! Better start learning Assembly 😭</p>
                </>
            )
        }
    }

<section className={gameStatusClass}>
    {renderGameStatus()}
</section>

// =======================================================================
// Backlog inventory

/**
 * Backlog:
 * 
 * - Farewell messages in status section
 * - Fix a11y issues
 * - Make the new game button work
 * - Choose a random word from a list of words
 * - Confetti drop when the user wins
 */

// =======================================================================
// Farewell messages

/**
 * Challenge: Bid farewell to each programming language
 * as it gets erased from existance 👋😭
 * 
 * Use the `getFarewellText` function from the new utils.js
 * file to generate the text.
 * 
 * Check hint.md if you're feeling stuck, but do your best
 * to solve the challenge without the hint! 🕵️
 */

// Return name from languages Array
const getLanguageName = (languages, wrongGuessCount) => {
    if (wrongGuessCount > 0 && wrongGuessCount <= languages.length) {
        return languages[wrongGuessCount - 1].name;
    }
    return ''
};

const languageName = getLanguageName(languages, wrongGuessCount);

//Render
function renderGameStatus() {
    if (!isGameOver) {
        return (
            `"${getFarewellText(languageName)}"`
        )
    }
 
// Conditional Markup
<section className={clsx(
    'tester', 
    wrongGuessCount > 0 && gameStatusClass
)}>
    {renderGameStatus()}
</section> 

// Instructor Solution
// Determine whether recent guess was true/flase
const lastGuessedLetter = guessedLetters[guessedLetters.length - 1]
const isLastGuessIncorrect = lastGuessedLetter && !currentWord.includes(lastGuessedLetter)
console.log(isLastGuessIncorrect)

const gameStatusClass = clsx("game-status", {
    won: isGameWon,
    lost: isGameLost,
    farewell: !isGameOver && isLastGuessIncorrect
})

    function renderGameStatus() {
        if (!isGameOver && isLastGuessIncorrect) {
            return (
                <p 
                    className="farewell-message"
                >
                    {getFarewellText(languages[wrongGuessCount - 1].name)}
                </p>
            )
        }

        if (isGameWon) {
            return (
                <>
                    <h2>You win!</h2>
                    <p>Well done! 🎉</p>
                </>
            )
        } 
        if (isGameLost) {
            return (
                <>
                    <h2>Game over!</h2>
                    <p>You lose! Better start learning Assembly 😭</p>
                </>
            )
        }
        
        return null
    }

// =======================================================================
// Disable keyboard when the game is over

const keyboardElements = alphabet.split("").map(letter => {
    const isGuessed = guessedLetters.includes(letter)
    const isCorrect = isGuessed && currentWord.includes(letter)
    const isWrong = isGuessed && !currentWord.includes(letter)
    const className = clsx({
        correct: isCorrect,
        wrong: isWrong,
        over: isGameOver
    })

    return (
        <button
            className={className}
            key={letter}
            onClick={!isGameOver ? () => addGuessedLetter(letter) : null}
        >
            {letter.toUpperCase()}
        </button>
    )
})

// Instructor Solution
const keyboardElements = alphabet.split("").map(letter => {
    const isGuessed = guessedLetters.includes(letter)
    const isCorrect = isGuessed && currentWord.includes(letter)
    const isWrong = isGuessed && !currentWord.includes(letter)
    const className = clsx({
        correct: isCorrect,
        wrong: isWrong
    })

    return (
        <button
            className={className}
            key={letter}
            disabled={isGameOver}
            onClick={() => addGuessedLetter(letter)}
        >
            {letter.toUpperCase()}
        </button>
    )
})


// =======================================================================
// Make the game more a11y-friendly part 1

<button
    className={className}
    key={letter}
    disabled={isGameOver}
    aria-disabled={guessedLetters.includes(letter)}
    aria-label={`Letter ${letter}`}
    onClick={() => addGuessedLetter(letter)}
>
    {letter.toUpperCase()}
</button>

<section 
    aria-live="polite" 
    role="status" 
    className={gameStatusClass}
>

// Create a hidden section, that reads out each letter, and also
// the blank spaces.

// App.jsx

<section 
    className="sr-only" 
    aria-live="polite" 
    role="status"
>
    <p>Current word: {currentWord.split("").map(letter => 
    guessedLetters.includes(letter) ? letter + "." : "blank.")
    .join(" ")}</p>

</section>

//Index.css
.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

// =======================================================================
// Make the game more a11y-friendly part 2

// Status Updates for screen readers
<section 
    className="sr-only" 
    aria-live="polite" 
    role="status"
>
    <p>
        {currentWord.includes(lastGuessedLetter) ? 
            `Correct! The letter ${lastGuessedLetter} is in the word.` : 
            `Sorry, the letter ${lastGuessedLetter} is not in the word.`
        }
        You have {numGuessesLeft} attempts left.
    </p>
    <p>Current word: {currentWord.split("").map(letter => 
    guessedLetters.includes(letter) ? letter + "." : "blank.")
    .join(" ")}</p>

</section>

// =======================================================================
// Choose random word

//  * Challenge: Choose a random word from a list of words
//  * 
//  * 1. Create a new function in utils.js that chooses a random
//  *    word from the imported array of words and returns it
//  * 2. import the function into this file
//  * 3. Figure out where to use that function.

// Select random word
export function randomWord(){
    return (
        words[Math.floor(Math.random() * words.length)]
    )
}

const [currentWord, setCurrentWord] = useState(() => randomWord())

// =======================================================================
// New game button resets the game

// Game State
function resetGame(){
    setCurrentWord(getRandomWord())
    setGuessedLetters([])
}

{isGameOver && <button onClick={() => resetGame()} className="new-game">New Game</button>}

// =======================================================================
// Display missed letters when lost

const letterElements = currentWord.split("").map((letter, index) => {
    return (
        !isGameOver ?
            <span key={index}>
                {guessedLetters.includes(letter) ? letter.toUpperCase() : ""}
            </span>
            : 
            <span key={index}>
                {guessedLetters.includes(letter) ? letter.toUpperCase() : <span className='reveal'>{letter.toUpperCase()}</span>}
            </span>
    )
})

// Instructor Solution

const letterElements = currentWord.split("").map((letter, index) => {
    const shouldRevealLetter = isGameLost || guessedLetters.includes(letter)
    
    return (
        <span key={index}>
            {shouldRevealLetter ? letter.toUpperCase() : ""}
        </span>
    )
})

// =======================================================================
// Confetti

{isGameWon && <Confetti />}

import Confetti from "react-confetti"

{
    isGameWon && 
        <Confetti
            recycle={false}
            numberOfPieces={1000}
        />
}

// =======================================================================
// Advanced React
// =======================================================================

// =======================================================================
// Reusability
// =======================================================================

// =======================================================================
// Advanced React Intro

// 1. Reusability
// Children, Compound Components, Context, Componsition, 
// Render Props, Custom Cooks

// 2. React Router 6
// Routing Basics, Navigation, Layout and Index Routes, Nested Routes,
// Route and Search Parameters, Protected Routes

// 3. Performance
// How React Renders, Using Dev Tools, Code Splitting, useMemo()
// memo(), useCallback()

// =======================================================================
// Button - props review challenge

/**
 * Challenge: 
 * 
 * Build a Button component in a separate file.
 * (For styling purposes, make sure it renders an HTML <button> element)
 * Your button component should take a `text` prop
 */

 // Button.jsx
 export default function Button({text}){
    return (
        <button>
            {text}
        </button>
    )
}

// App.jsx
function App() {
  return (
    <main>
      <Button 
        text='Hello'
      />
    </main>
  )
}

// =======================================================================
// Aside - children in HTML

// =======================================================================
// Aside - React Children

// App.jsx
function App() {
  return (
    <main>
      <Marquee>🧛‍♀️ Welcome to Horrorville 🧛‍♀️</Marquee>
    </main>
  )
}

// Marquee.js - props.children
import React from "react"

export default function Marquee(props) {
    return (
        <div className="marquee">
            <h1>{props.children}</h1>
        </div>
    )
}

// =======================================================================
// Challenge - Button w/ Children

/**
 * Challenge: Make the Button accept and display children.
 * 
 * Change the text to say "Buy now!" so it's less boring 🥱
 */

 export default function Button(props) {
    return (
        <button>{props.children}</button>
    )
}

function App() {
  return (
    <main>
      <Button>Click here</Button>
    </main>
  )
}

// =======================================================================
// Button - More Complex React Children

/**
 * Challenge: Add the "FaMoneyBill" icon to the left
 * of the "Buy now!" text in the button
 */

import React from 'react';
import ReactDOM from 'react-dom/client';
import Button from "./Button"
import { FaMoneyBill } from "react-icons/fa"

function App() {
  return (
    <main>
      <Button>
        <FaMoneyBill /> 
        Buy now!
      </Button>
    </main>
  )
}

ReactDOM.createRoot(document.getElementById('root')).render(<App />);

// Index.css

button {
    background-color: #E5E7EB;
    color: #4B5563;
    border: 1px solid #6B7280;
    box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.05);
    cursor: pointer;
    font-weight: 700;
    padding: 9px 17px;
    border-radius: 6px;
    line-height: 24px;
    display: flex;
    align-items: center;
}

button > svg {
    margin-right: 7px;
    color: green;
    height: 20px;
    width: 20px;
}

// =======================================================================
// Challenge - add onClick event listener

/**
 * Challenge: Add an onClick handler to the Button
 * component instance (the one on this page). Then
 * make whatever changes you need for it to actually
 * work.
 * 
 * Clicking the button should log "Logging in..." 
 * to the console.
 */

// App.jsx
  function event(){
    return (
      console.log('Logging in...')
    )
  }
  
  return (
    <main>
      <Button event={event}>
        <FcGoogle />
        Log in with Google
      </Button>
    </main>
  )
}

//Button.js
export default function Button(props) {
    return (
        <button onClick={props.event}>{props.children}</button>
    )
}

// Instructor Solution
// <Button onClick={() => console.log("Logging in...")}>

// =======================================================================
// Aside - props spreading

// index.js
<Button variant style={{color: "green"}} onClick={() => console.log("Logging in...")}>
    <FcGoogle />
    Log in with Google
</Button>

//Button.js
<button {...props}>
    {props.children}
</button>

// =======================================================================
// Aside - Destructuring props

export default function Button({children, ...rest}) {
    return (
        <button {..rest}>
            {children}
        </button>
    )
}

// {variant: true, style: {color: 'green'}, onClick: ƒ()}

// =======================================================================
// Button - size prop

/**
    * Challenge: accept the `size` prop and set the `className` of the
    * <button> to:
    * 
    * "button-small" if `size` is "sm"
    * "button-large" if `size` is "lg"
    * 
    * Note: don't try to manually add a `className` to the Button
    * instance in index.js yet. (DO add `className` to this file
    * as part of the challenge, though.)
*/

// Index.js
<main>
    <Button size="lg">Log in with Google</Button>
</main>

// Button.js
<button className={size === 'sm' ? 'button-small' : 'button-large'} {...rest}>
    {children}
</button>

// Instructor Solution
let sizeClass
if (size === "sm") sizeClass = "button-small"
if (size === "lg") sizeClass = "button-large"

return (
    <button className={sizeClass} {...rest}>
        {children}
    </button>

// =======================================================================
// Button - fix className issue

/**
    * Challenge: See if you can fix the problem with the
    * conflicting `className` props. Doesn't need to be
    * elegant, just see if you can get the button to be
    * both large AND with green text
*/

export default function Button({children, className, size, ...rest}) {
    let sizeClass
    if (size === "sm") sizeClass = "button-small"
    if (size === "lg") sizeClass = "button-large"
    
    return (
        <button className={`${sizeClass} ${className}`} {...rest}>
            {children}
        </button>
    )
}

// ===========================

// Using classnames or clsx
import React from "react"
import classnames from "classnames"
export default function Button({children, className, size, ...rest}) {
    let sizeClass
    if (size === "sm") sizeClass = "button-small"
    if (size === "lg") sizeClass = "button-large"
    
    const allClasses = classnames(sizeClass, className)
    console.log(allClasses)
    
    return (
        <button className={allClasses} {...rest}>
            {children}
        </button>
    )
}

// ===========================

// Final Solution

import React from "react"
import classnames from "classnames"
export default function Button({children, className, size, ...rest}) {
    let sizeClass = size ? `button-${size}` : ""
    
    const allClasses = classnames(sizeClass, className)
    console.log(allClasses)
    
    return (
        <button className={allClasses} {...rest}>
            {children}
        </button>
    )
}

// =======================================================================
// Challenge - Button w/ Variants

/**
    * Challenge: 
    * 
    * Accept a `variant` prop and style the Button component
    * accordingly. The values can be `success`, `warning`, or `danger`. 
    * Check the Figma design for the specific colors to be used for each
    * variant.
*/

//index.js
    <main>
      <Button
        variant='danger'
      >Log in with Google</Button>
    </main>

// Button.js
import React from "react"
import classnames from "classnames"
export default function Button({children, className, variant, ...rest}) {

    let variantClass = variant === 'success' ?  `button-${variant}` : 
    variant === 'warning' ? `button-${variant}` : `button-${variant}`

    const allClasses = classnames(className, variantClass)
    
    return (
        <button className={allClasses}>
            {variant}
        </button>
    )
}

// Instructor Solution
import React from "react"
import classnames from "classnames"
export default function Button({children, className, size, variant, ...rest}) {

    let sizeClass = size && `button-${size}`
    let variantClass = variant && `button-${variant}`
    const allClasses = classnames(sizeClass, variantClass, className)
    
    return (
        <button className={allClasses} {...rest}>
            {children}
        </button>
    )
}

// =======================================================================
// Mega Challenge - Overload Avatar Component

// Photo, initials, Anonymous
// Photo = <Avatar src="" alt=""/>
// Initials = <Avatar>BZ</Avatar>
// Anonymous = <Avatar />

/**
 * Challenge: Create a flexible Avatar component!
 * 
 * Check the slides for notes on how the component 
 * should be used.
 * 
 * Each of the 3 different avatars should have a 
 * wrapper div with the classes below:
 * 
 * With image: `avatar`
 * With initials: `avatar avatar-letters`
 * Anonymous: `avatar avatar-icon`
 * 
 * E.g. <Avatar>BZ</Avatar> should render
 * <div className="avatar avatar-letters">...</div>
 * 
 * Check the hints.md file if you are really stuck.
 * 
 * EXTRA CREDIT:
 * Randomize the background color of the non-image
 * avatars. Check the styles.css for some pre-written
 * color classes to add to the wrapper div.
 */

<div className='avatar'><img src={src} alt={alt}></img></div>
<div className='avatar avatar-letters'>{children}</div>
<IoPersonSharp className='avatar avatar-icon'></IoPersonSharp>

// Avatar.js
let colourArray = ['navy', 'pink', 'red', 'blue', 'green']
let randomColour = colourArray[Math.floor(Math.random() * colourArray.length)]

export default function Avatar({children, src, icon, alt, ...rest}) {
    
    
    let imageClass = 'avatar'
    let lettersClass = `avatar avatar-letters`
    let iconClass = `avatar avatar-icon ${randomColour}`
    
    return (
        <>
            {src && 
            <div className={imageClass}>
            <img src={src} alt={alt} />
            </div>}
            
            {children && 
            <div className={lettersClass}>
            {children}
            </div>}
            
           {!children && !src && 
           <div className={iconClass}>
           <IoPersonSharp />
           </div>
           }

// =======================================================================
// Menu Component Intro

// Complications with creating components and hard coding props
// 1. Inflexible / tightly coupled
// 2. Opaque
// 3. Not DRY
// 4. Prop drilling

// What we'll learn
// Compound COmponents
// React.Children API
// Context

// =======================================================================
// Prop Drilling

// Prop drilling happens when a component down the component tree needs
// access to data in a grandparent (or higher) component, and that data
// is manually passed down to each child component until it finally
// reaches the component that needs it.

// Solutions to prop drilling
// Do nothing!
// Compound Components - flattens the structure, easily pass props to more
// deeply-nested components.

// Context
// Access state directly from the components that need it

// =======================================================================
// Aside: Compound Components Intro

// HTML Examples
// <form>, <input>
// <ul>, <li>

// Compound Components
// USe children props
// Have dedicated function/styling
// Make the component strcuture more transparent
// Give more control to the 'user' of the component

// =======================================================================
// Compound Components in React - Part 1

/**
 * Challenge:
 * 1. Convert the Menu component to use props.children 
 *    instead of taking an `items` prop. (We'll update 
 *    the MenuButton and MenuDropdown components later.) 
 *    See note inside the Menu.js file for more info
 * 
 * 2. import MenuButton and MenuDropdown into THIS file
 *    and render them as children of the Menu component. 
 *    Remember to pass the buttonText and items array to 
 *    the components that need those props to function.
 *    (We'll also be updating that soon!)
 * 
 * NOTE: The functionality of the menu will be broken after 
 * these changes, but that's okay! As such, don't worry 
 * about moving the state or toggle function from the Menu; 
 * there's more we need to learn before we can do that.
 */

function App() {
  return (
    <Menu>
      <MenuButton buttonText="Sports"/>
      <MenuDropdown items={["Tennis", "Pickleball", "Racquetball", "Squash"]}/>
    </Menu>
  )
}

// =======================================================================
// Compound Components Quiz

// # Compound Components Quiz

// 1. How would you explain the concept of compound components in React 
// to someone who only knows the very basics of React?

// Compound components are more robust than regular components, that might 
// have been abstracted through multiple layers of parents. They have 
// explicitly set function, styling, and use children props to be passed 
// through multiple layers. This allows them to be more transparent.

// 2. What are some examples of HTML elements that work together to 
// add functionality or styling to each other?
// <ul><li>, <ol><li>, <form><input>


// 3. How can compound components help you avoid having to drill 
// props multiple levels down?

// Because they are created on the top level in the family tree, then 
// seperate components are passed in directly as children, therefor 
// instead of declaring props multiple levels down you can instead 
// just declare children.

// =======================================================================
// Compound Components in React - Part 2

/**
 * Challenge:
 * 1. Convert the MenuButton to accept children and 
 *    render them. (In this case, the children will
 *    just be the button text)
 * 2. Change the MenuButton below to pass "Sports"
 *    in as a child of the component instead of by
 *    using the `buttonText` prop.
 * 
 * NOTE: It's fine that the menu is still broken, I
 * promise we're getting there! 😃
 */

//index.js
<MenuButton>Sports</MenuButton>

// Menubutton.js
export default function MenuButton({ children, onClick }) {
    return (
        <Button onClick={onClick}>{children}</Button>
    )
}

// =======================================================================
// Compound Components in React - Part 3

  /**
   * 1. MenuDropdown should render children instead of items
   * 2. MenuItem (new component you need to create) should also
   *    render children. Grab the <div className="menu-item">
   *    from MenuDropdown before deleting it if you want to be
   *    lazy :)
   * 3. Map over the `sports` array inside MenuDropdown in this
   *    file and render a MenuItem for each sport in the array
*/

//index.js
function App() {
  const sports = ["Tennis", "Pickleball", "Racquetball", "Squash"]
  
  return (
    <Menu>
      <MenuButton>Sports</MenuButton>
      <MenuDropdown>
        {sports.map(sports => (
          <MenuItem key={sports}>{sports}</MenuItem>
        ))}
      </MenuDropdown>
    </Menu>
  )
}

// MenuDropDown
export default function MenuDropdown({ children }) {
    return (
        <div className="menu-dropdown">
            {children}
        </div>
    )
}

// MenuItem
export default function MenuItem({ children }) {
    return (
        <div
            className="menu-item"
        >
            {children}
        </div>
    )
}

// =======================================================================
// Summarize Challenge - Compound Components in React

// =======================================================================
// Prop Drilling Problem #2 - Implicit State

// Prop Drilling
// < App /> -> <Menu /> -> <MenuButton />
//                      -> <MenuDropDown />
//                      -> <MenuItem />
//                      -> <MenuItem />
//                      -> <MenuItem />

// Converted
/* 
// <App />
<Menu>
<MenuButton></MenuButton>
    <MenuDropdown>
        <MenuItem></MenuItem>
        <MenuItem></MenuItem>
        <MenuItem></MenuItem>
    </MenuDropdown>
</Menu>
*/

// Implicit State
// React.Children
// Context

// =======================================================================
// The React.Children API

// React.Children
// Utility that provides methods for interacting with a components
// direct children elements
// React.Children.map()
// React.Children.forEach()

// React.cloneElement()
// Utrility that duplicates a React element and provides a way to inject
// additional props to that element
// When used with React.Children.map(), it can be used to 'augment'
// the original children with new props

/**
    * Challenge: figure out what needs to be passed to the
    * children so they'll have access to new props!
*/

import React from "react"
import MenuButton from "./MenuButton"
import MenuDropdown from "./MenuDropdown"

export default function Menu({ children }) {
    const [open, setOpen] = React.useState(true)

    function toggle() {
        setOpen(prevOpen => !prevOpen)
    }
    
    return (
        <div className="menu">
            {React.Children.map(children, (child) => {
                return React.cloneElement(child, {
                    menuCollapseState: open,
                    toggleMenu: toggle
                })
            })}
        </div>
    )
}

// Instructor Solution
import React from "react"
import MenuButton from "./MenuButton"
import MenuDropdown from "./MenuDropdown"

export default function Menu({ children }) {
    const [open, setOpen] = React.useState(true)

    function toggle() {
        setOpen(prevOpen => !prevOpen)
    }

    return (
        <div className="menu">
            {React.Children.map(children, (child) => {
                return React.cloneElement(child, {
                    open,
                    toggle
                })
            })}
        </div>
    )
}

/**
    * Challenge:
    * Now that MenuButton and MenuDropdown are receiving
    * `open` and `toggle`, accept the necessary props in
    * those components and refactor them to use those props
    * to make the menu work again!
    * 
    * Hint: in MenuDropdown, you'll need to use conditional
    * rendering to either display the div OR display `null`
*/

// Menu.js
export default function Menu({ children }) {
    const [open, setOpen] = React.useState(true)

    function toggle() {
        setOpen(prevOpen => !prevOpen)
    }
    
    return (
        <div className="menu">
            {React.Children.map(children, (child) => {
                return React.cloneElement(child, {
                    open,
                    toggle
                })
            })}
        </div>
    )
}

// MenuButton.js
import React from "react"
import Button from "../Button/Button"

export default function MenuButton({ children, onClick, toggle }) {
    return (
        <Button onClick={toggle}>{children}</Button>
    )
}

// MenuDropdown.js
import React from "react"

export default function MenuDropdown({ children, open }) {
    
    return (
        open ? <div className="menu-dropdown">
            {children}
        </div> : null
    )
}

// =======================================================================
// React.Children shortcomings

// Problems with React.Children

/** Discovery Challenge:
    * In the MenuButton, MenuDropdown, and MenuItem components, 
    * accept `toggle` and `open` props and just console log 
    * both of them in all 3 components.
*/

/** Discovery Challenge:
    * Make it so the children of MenuDropdown also have
    * access to toggle and open.
*/

import React from "react"

export default function MenuDropdown({ children, open, toggle }) {
    
    return open ? (
        <div className="menu-dropdown">
         {React.Children.map(children, (child) => {
                return React.cloneElement(child, {
                    open,
                    toggle
                })
            })}
        </div>
    ) : null
}

// =======================================================================
// Context Intro

// =======================================================================
// createContext() & Content Provider

/**
 * Challenge: set up the context again on your own!
 */

import React from "react"
import Header from "./Header"
import Button from "./Button"

const ThemeContext = React.createContext()

export default function App() {
    return (
        <ThemeContext.Provider value='light'>
            <div className="container dark-theme">
                <Header />
                <Button />
            </div>
        </ThemeContext.Provider>
    )
}

export {ThemeContext}

// =======================================================================
// useContext()

/**
    * Challenge:
    * Part 1: Update our CSS className to use the context 
    * value instead of being hard-coded as "dark". Also,
    * change the text "Dark" in the h1 to correspond with
    * the `value` from context.
*/

import React from "react"
import { ThemeContext } from "./App"

export default function Header() {
    const value = React.useContext(ThemeContext)
    const text = value[0].toUpperCase() + value.slice(1)

    return (
        <header className={`${value}-theme`}>
            <h1>{text} Theme</h1>
        </header>
    )
}

// Instructor Solution
return (
    <header className={`${value}-theme`}>
        <h1>{value === "light" ? "Light" : "Dark"} Theme</h1>
    </header>
)

// Adding to Button.js
import React from "react"
import {ThemeContext} from './App.js'

export default function Button() {

    const value = React.useContext(ThemeContext)
    
    return (
        <button className={`${value}-theme`}>
            Switch Theme
        </button>
    )
}

// =======================================================================
// Add context to the Menu component

/**
 * Challenge:
 * Part 1:
 * 1. Create new context here in the Menu component. Make sure
 *    to export it from this file as well.
 * 2. Wrap the `div` below with the Context Provider
 * 3. Give the Provider a value of the boolean `false` (represents
 *    the hardcoded `open` state for now - we'll fix this very soon.)
 */

 import React from "react"
import MenuButton from "./MenuButton"
import MenuDropdown from "./MenuDropdown"

const MenuContext = React.createContext()

export default function Menu({ children }) {
    const [open, setOpen] = React.useState(true)

    function toggle() {
        setOpen(prevOpen => !prevOpen)
    }
    
    return (
        <MenuContext.Provider value={false}>
            <div className="menu">
                {children}
            </div>
        </MenuContext.Provider>
    )
}

export {MenuContext}

/**
 * Challenge part 2:
 * Pull in the value from context and update the conditional
 * rendering code below to use that value instead of `open`,
 * which used to be passed down via props.
 */

import React from "react"
import MenuContext from '/Menu/Menu.js'


export default function MenuDropdown({ children }) {
    
    const value = React.useContext(MenuContext)
    
    return value ? (
        <div className="menu-dropdown">
            {children}
        </div>
    ) : null
}

// =======================================================================
// State + Context

/**
    * Challenge part 1:
    * Add state to the App component. Default value === "light". 
    * Pass that state as the value to the context provider.
*/

export default function App() {

    const [theme, setTheme] = React.useState('light')

    return (
        <ThemeContext.Provider value={theme}>
            <div className="container dark-theme">
                <Header />
                <Button />
            </div>
        </ThemeContext.Provider>
    )
}

/**
    * Challenge part 2:
    * Create a `toggleTheme` function to that uses `setTheme`
    * to change the value from "light" to "dark" and vice versa.
*/

function toggleTheme(){
    setTheme(theme => theme === 'light' ? 'dark' : 'light')
}

/**
    * Challenge part 3:
    * Figure out how to pass BOTH the `theme` value and 
    * the `toggleTheme` function down through the context value
*/

export default function App() {
    const [theme, setTheme] = React.useState("light")

    function toggleTheme() {
        setTheme(prevTheme => prevTheme === "light" ? "dark" : "light")
    }
    
    return (
        <ThemeContext.Provider value={{theme, toggleTheme}}>
            <div className="container dark-theme">
                <Header />
                <Button />
            </div>
        </ThemeContext.Provider>
    )
}

/**
    * Challenge part 4:
    * Now that we're passing an object instead of a string through
    * context, update the Button and Header components to receive the
    * correct values again.
*/

//Button.js
import React from "react"
import {ThemeContext} from "./App"

export default function Button() {
    const value = React.useContext(ThemeContext)
    
    return (
        <button onClick={value.toggleTheme} className={`${value.theme}-theme`}>
            Switch Theme
        </button>
    )
}

//Header.js
import React from "react"
import { ThemeContext } from "./App"

export default function Header() {
    const value = React.useContext(ThemeContext)
    
    return (
        <header className={`${value.theme}-theme`}>
            <h1>{value.theme === "light" ? "Light" : "Dark"} Theme</h1>
        </header>
    )
}

// =======================================================================
// Theme switcher final touches

/**
    * Final challenge:
    * 1. Update the div below with the className that uses the 
    *    `theme` value from state
    * 2. Add back the onClick handler in our Button component to
    *    use the `toggleTheme` function we're passing down via context
*/

// =======================================================================
// Menu component final touches

/**
    * Challenge:
    * Using what you know now, complete the Menu component so 
    * everything is working again via Context + State
*/

// Menu.js
import React from "react"
import MenuButton from "./MenuButton"
import MenuDropdown from "./MenuDropdown"

const MenuContext = React.createContext()

export default function Menu({ children }) {

    const [open, setOpen] = React.useState(true)

    function toggle() {
        setOpen(prevOpen => !prevOpen)
    }

    return (
        <MenuContext.Provider value={{open, toggle}}>
            <div className="menu">
                {children}
            </div>
        </MenuContext.Provider>
    )
}

export { MenuContext }

// MenuButton.js
import React from "react"
import Button from "../Button/Button"
import {MenuContext} from '/Menu/Menu.js'

export default function MenuButton({ children }) {
    
    const {open, toggle} = React.useContext(MenuContext)
    
    return (
        <Button onClick={toggle}>{children}</Button>
    )
}

// MenuDropdown.js
import React from "react"
import Button from "../Button/Button"
import {MenuContext} from '/Menu/Menu.js'

export default function MenuButton({ children }) {
    
    const {open, toggle} = React.useContext(MenuContext)
    
    return (
        <Button onClick={toggle}>{children}</Button>
    )
}

// =======================================================================
// A11y in menu component

// Adding role='menu'

return (
    <MenuContext.Provider value={{open, toggle}}>
        <div className="menu" role="menu">
            {children}
        </div>
    </MenuContext.Provider>
)

// aria-expanded - Allows user to know if menu is open or not.
export default function MenuButton({ children }) {
    const { toggle, open } = React.useContext(MenuContext)
    return (
        <Button onClick={toggle} aria-expanded={open}>{children}</Button>
    )
}

// aria-haspopup - 

// aria hidden - If you are displaying or hiding elements in CSS include this

// aria-controls - 

// =======================================================================
// Aside - Compound components w/dot syntax

// adding dot notation to components

//index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import Menu from "./Menu/index"

function App() {
  const sports = ["Tennis", "Pickleball", "Racquetball", "Squash"]

  return (
    <Menu>
      <Menu.Button>Sports</Menu.Button>
      <Menu.Dropdown>
        {sports.map(sport => (
          <Menu.Item key={sport}>{sport}</Menu.Item>
        ))}
      </Menu.Dropdown>
    </Menu>
  )
}

ReactDOM.createRoot(document.getElementById('root')).render(<App />)

// Menu // index.js (staging area)
import Menu from "./Menu"
import MenuButton from "./MenuButton"
import MenuDropdown from "./MenuDropdown"
import MenuItem from "./MenuItem"

Menu.Button = MenuButton
Menu.Dropdown = MenuDropdown
Menu.Item = MenuItem

export default Menu

// =======================================================================
// Headless Toggle component

// Headless components don't have any styled UI to display they're purely
// intended to provide functionality.

// =======================================================================
// Toggle - setup

/**
 * Challenge:
 * 
 * 1. Create a Toggle component that initializes its own boolean state.
 * 2. Create a function called `toggle` in that component that flips the 
 *    boolean when the function runs.
 * NOTE: Don't worry about rendering anything yet
 */

import React from 'react'

export default function Toggle(){
        const [state, setState] = React.useState(false)
        
        function toggleState(){
            setState(prevState => !prevState)
        }
}

// Instructor Solution

  /**
   * Challenge: Fix the broken parts! You'll know it's 
   * working when the star is displayed again.
*/

// When setting up a function that uses createContext, remember to 
// setup the intial React.createCOntext() outside of the main export
// default function. Also, REMEMBER to add <NameContext.PROVIDER to
// the return statement.

// Toggle.js
import React from "react"

const ToggleContext = React.createContext()

export default function Toggle({children}) {
    const [on, setOn] = React.useState(false)

    function toggle() {
        setOn(prevOn => !prevOn)
    }
    
    return(
        <ToggleContext.Provider value={{on, toggle}}>
            {children}
        </ToggleContext.Provider>
    )
}

export {ToggleContext}

// Instructor Solution
import React from "react"

export default function Toggle({ children }) {
    const [on, setOn] = React.useState(false)

    function toggle() {
        setOn(prevOn => !prevOn)
    }

    return children
}

// =======================================================================
// Toggle - Planning

// Toggle Compound Components
// Toggle.Button (to flip state)
// On (what to display when Toggle state is 'on')
// Off (what to display when Toggle state is 'off')
// Toggle.Display (expose internal state to give more control to user)

// =======================================================================
// Toggle Context

/**
    * Challenge: set up context!
    * Reminder of the steps:
    * 1. Create a new context (outside the component, but in this file)
    * 2. Export that context instance from the file so we 
    *    can use it eleswhere
    * 3. Use the Context Provider to wrap the `children` returned
    *    from this Toggle component
    * 4. Pass the state values to the context value prop for access
    *    from child components later on
*/

import React from "react"

const ToggleContext = React.createContext()

export default function Toggle({ children }) {
    
    const [on, setOn] = React.useState(false)

    function toggle() {
        setOn(prevOn => !prevOn)
    }

    return (
        <ToggleContext.Provider value={{on, toggle}}>
            {children}
        </ToggleContext.Provider>
    )
}

export { ToggleContext }

// =======================================================================
// Toggle.Button

/**
 * Challenge:
 * 
 * 1. Create a ToggleButton component
 * 2. Receive the `toggle` function from context (2 parts!)
 * 3. Render a div with an onClick that calls `toggle` 
 *    - also renders children
 */

import React from 'react'
import {ToggleContext} from './Toggle.js'

export default function ToggleButton({children}){

const {on, toggle} = React.useContext(ToggleContext)

    return (
        <div onClick={toggle}>
            {children}
        </div>
    )
}

// Augmenting together

// Toggle // index.js
import Toggle from "./Toggle"
import ToggleButton from "./ToggleButton"

Toggle.Button = ToggleButton

export default Toggle

// index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import Star from "./Star"
import Toggle from "./Toggle/index"

function App() {
  return (
    <>
      <Toggle>
        <Toggle.Button>
          <Star />
        </Toggle.Button>
      </Toggle>
    </>
  )
}

ReactDOM.createRoot(document.getElementById('root')).render(<App />);


// =======================================================================
// Toggle.On & Toggle.Off

/**
 * Challenge:
 * 
 * 1. Create a new component, ToggleOn, that accepts children
 *    in props
 * 2. Receive the `on` state from context
 * 3. Conditionally render `children` if `on` is true. If `on`
 *    is false, render `null` instead of `children`
 */

import React from 'react'
import { ToggleContext } from './Toggle.js'

export default function ToggleOn({children}){
    
    const {on} = React.useContext(ToggleContext)
    
    return (
        on ? {children} : null
    )
}

// Instructor Solution
import React from "react"
import { ToggleContext } from "./Toggle"

export default function ToggleOn({ children }) {
    const { on } = React.useContext(ToggleContext)
    
    return on ? children : null
}

/**
 * Challenge: Build the Toggle.Off component!
 */
import React from 'react'
import {ToggleContext} from './Toggle'

export default function ToggleOff({children}){
    const {on} = React.useContext(ToggleContext)
    
    return !on ? children : null
}

// Instructor Solution
import React from 'react'
import {ToggleContext} from './Toggle'

export default function ToggleOff({children}){
    const {on} = React.useContext(ToggleContext)
    
    return on ? null : children
}


// =======================================================================
// Remove Star component

/**
 * Challenge: refactor our app to use the Toggle.On 
 * and Toggle.Off components to conditionally render the
 * star icons from react-icons. (See Star.js for that code).
 * 
 * Reminders:
 * 1. Make sure to copy over the classNames from Star.js too!
 *    I've added some CSS that we don't want to lose.
 * 2. Clicking the Star should flip the Toggle state. Try to
 *    figure out how you can do that 🤔. Hint: we built something
 *    that lets us flip the Toggle state back and forth 😉
 */

import React from 'react';
import ReactDOM from 'react-dom/client';
import Toggle from "./Toggle/index"
import { BsStar, BsStarFill } from "react-icons/bs"

function App() {
  return (
    <>
      <Toggle>
        <Toggle.Button>
          <Toggle.On>
            <BsStarFill className="star filled" />
          </Toggle.On>
          <Toggle.Off>
            <BsStar className="star " />
          </Toggle.Off>
        </Toggle.Button>
      </Toggle>
    </>
  )
}

ReactDOM.createRoot(document.getElementById('root')).render(<App />);

// =======================================================================
// Use Toggle with Menu component

/**
* Challenge: Refactor the Menu components to use the logic 
* from Toggle instead of doing any logic of its own.
* 
* 1. Remove all context and state logic from the menu components
* 2. Using Toggle and its "sub-components", add a menu to this
*    App component below the Star. Make sure to use a separate
*    <Toggle> wrapper so the state isn't tied to the Star's 
*    Toggle state
*/

// index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import Toggle from "./components/Toggle/index"
import Menu from '/components/Menu/index.js'

function App() {

  return (
    <>      
      <Toggle>
        <Menu>
            <Toggle.Button><Menu.Button>Menu</Menu.Button></Toggle.Button>
            <Toggle.On>
              <Menu.Dropdown> 
              <Menu.Item>Test 1</Menu.Item>
              <Menu.Item>Test 2</Menu.Item>
              <Menu.Item>Test 3</Menu.Item>
              </Menu.Dropdown>
            </Toggle.On>
        </Menu>
      </Toggle>
      
    </>
  )
}

ReactDOM.createRoot(document.getElementById('root')).render(<App />);

// =======================================================================
// Composing new components with Toggle

/**
    * Challenge: 
    * Move other Toggle logic to be composed with the Menu
    * components internally, so the person using our Menu
    * component never needs to touch the generic Toggle at all.
*/

// =======================================================================
// onToggle event listener

/**
    * Challenge:
    * 1. Accept `onToggle` as a prop for the Toggle component
    * 2. Using a useEffect, run the function passed to the
    *    onToggle prop anytime the `on` state changes.
    * 3. In Star.js, pass an onToggle prop to the Toggle
    *    component whose value is a function. That function
    *    can just run a console.log for now.
    * Note: There's more we need to do here, you may notice a
    * small bug we'll need to address later.
*/

// Toggle.js
// You add the vairables you want to monitor to the array.
React.useEffect(() => {
    onToggle()
}, [on])

export default function Toggle({ children, onToggle }) {

    const [on, setOn] = React.useState(false)

    function toggle() {
        setOn(prevOn => !prevOn)
    }

    React.useEffect(() => {
        onToggle()
    }, [on])

    return (
        <ToggleContext.Provider value={{ on, toggle }}>
            {children}
        </ToggleContext.Provider>
    )
}

// Star.js
    return (
        <Toggle onToggle={() => onToggle()}>
            <Toggle.Button>
                <Toggle.On>
                    <BsStarFill className="star filled" />
                </Toggle.On>
                <Toggle.Off>
                    <BsStar className="star" />
                </Toggle.Off>
            </Toggle.Button>
        </Toggle>
    )

// Instructor Solution
export default function Star() {
    return (
        <Toggle onToggle={() => console.log("Toggled")}>
            <Toggle.Button>
                <Toggle.On>
                    <BsStarFill className="star filled" />
                </Toggle.On>
                <Toggle.Off>
                    <BsStar className="star" />
                </Toggle.Off>
            </Toggle.Button>
        </Toggle>
    )
}

/**
    * Challenge:
    * 1. Receive a prop called onChange and pass it to the
    *    Toggle's onToggle function
    * 2. Add an onChange prop to the Star component instance
    *    in index.js that just runs a console.log() for now.
*/

// =======================================================================
// Menu onClose event

/**
    * Challenge:
    * 1. Accept `onOpen` as a prop for the Menu component
    * 2. Pass the onOpen prop as the value to Toggle's onToggle prop
    * 3. In index.js, pass an onOpen prop to the Menu
    *    component whose value is a function. 
    *    Just use console.log() for now.
*/



// =======================================================================
// Intro to Refs

// useRef()
// Refs are just like state, except changing them doesn't cause a re-render
// They're frequently used for manual DOM manipulation.

// In the below example we have created a simple button, and a counter, 
// which count's the amount of times that state re-renders. When you click
// the button it flips the boolean saved in useState from true/false/...

// We then use React.useEffect() to update the renderCount. However,
// since useEffect is not monitoring any specific variable for a change, and
// the state is updated within useEffect, this causes an infinite re-loop.

function Main() {
  const [on, setOn] = React.useState(false)
  const [renderCount, setRenderCount] = React.useState(0)

  function forceRender() {
    setOn(prevOn => !prevOn)
  }
  
  React.useEffect(() => {
    setRenderCount(prevCount => prevCount + 1)
  })

  return (
    <>
      <h3>Understanding refs</h3>
      <button onClick={forceRender}>Force re-render w/ state change</button>
      <h4>Render count: {renderCount}</h4>
    </>
  )
}

ReactDOM.createRoot(document.getElementById("root")).render(<Main />);

// ========================

// Usuing useRef(0) instead

function Main() {
  const [on, setOn] = React.useState(false)
  const renderCount = React.useRef(0)

  function forceRender() {
    setOn(prevOn => !prevOn)
  }
  
  
  
  React.useEffect(() => {
    renderCount.current++
  })

  return (
    <>
      <h3>Understanding refs</h3>
      <button onClick={forceRender}>Force re-render w/ state change</button>
      <h4>Render count: {renderCount.current}</h4>
    </>
  )
}
// =======================================================================
// Refs and Dom Manipulation

// Re-manipulating focus using ref on a to-do list
function App() {
  const [text, setText] = React.useState("")
  const [list, setList] = React.useState([])
  *** const inputRef = React.useRef(null) ***

  function handleChange(e) {
    setText(e.target.value)
  }

  function handleSubmit(e) {
    e.preventDefault()
    if (!text) {
      return;
    }
    setList(prevList => [...prevList, text])
    setText("")
    *** inputRef.current.focus() ***
    
  }
  
  return (
    <>
      <h2>React Project Ideas</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          onChange={handleChange}
          value={text}
          placeholder="Idea"
          *** ref={inputRef} ***
        />
        <button>Submit</button>
      </form>

      <ol>
        {list.map((item, i) => <li key={i}>{item}</li>)}
      </ol>
    </>
  )
}

// =======================================================================
// Fix onToggle bug using refs

/**
    * Challenge: We only want to run onToggle() AFTER the
    * first time rendering the component. We can use refs to
    * track whether or not it's the first time this component
    * is rendering
    * 
    * 1. Create a ref called `firstRender` which defaults to `true`
    *    (Since when we first create the ref, it's true that it
    *    is the first time the component is rendering)
    * 2. In the useEffect, check if your ref's value is `true`.
    *    If it is, set it to `false`. If it isn't... can you figure
    *    it out??
    * Hint: don't forget that your boolean value will be saved
    * under `firstRender.current`, not just `firstRender`!
*/

import React from "react"

const ToggleContext = React.createContext()

export default function Toggle({ children, onToggle }) {
    const [on, setOn] = React.useState(false)
    const firstRender = React.useRef(true)

    function toggle() {
        setOn(prevOn => !prevOn)
    }
    
    React.useEffect(() => {
        firstRender.current ? firstRender.current = false : onToggle()
    }, [on])

    return (
        <ToggleContext.Provider value={{ on, toggle }}>
            {children}
        </ToggleContext.Provider>
    )
}

export { ToggleContext }

// =======================================================================
// Fix missing onToggle bug using a noop function

// Setting onToggle in props a default value using 'noop' (no operation)

// Toggle.js
export default function Toggle({ children, onToggle = () => {}}) {

// =======================================================================
// Render Props Part 1

// =======================================================================
// Render Props Part 2

// =======================================================================
// Render Props Part 3

// =======================================================================
// Render Props Part 4 - children as render props

// =======================================================================
// Toggle.Display intro

// =======================================================================
// Toggle.Display

// =======================================================================
// Custom Hooks Intro

// =======================================================================
// Custom Hooks- useEffectOnUpdate

// =======================================================================
// Custom Hooks - useToggle

// =======================================================================
// Custom Hooks - useToggle part 2

// =======================================================================
// Custom Hooks - useToggle part 3

// =======================================================================
// Custom Hooks - useToggle part 4

// =======================================================================
// Custom Hooks - useToggle part 5

// =======================================================================
// Custom Hooks - useToggle part 6

// =======================================================================
// Custom Hooks - useToggle part 7

// =======================================================================
// Custom Hooks - useToggle part 8

// =======================================================================
// Custom Hooks - useToggle part 9

// =======================================================================
// Reusability section recap

// =======================================================================
// Solo Project - Component Library++
