// =======================================================================
// Essential CSS Concepts
// =======================================================================

// =======================================================================
// Build an NFT Site Intro

// =======================================================================
// Semantic HTML - Header, Main, Sector, Footer

// <header> - Site title, logo, and nav
// <section> - A stand-alone section
// <footer> - Copyright, Ts & Cs, ect.
// <main> The page's unique content

// =======================================================================
// Aside: Margins - strange behaviour

// When an element touches its parent, it;s top and bottom margins
// will merge with the margins of the parent element.

// This can be fixed by adding padding to the parent element.

// This is not an issue when you are using flexbox and grid.

// =======================================================================
// Grouping Selectors

// ID beats class, class beats element, element is last
// CSS reads top down
// element = 1 point
// class = 10 points
// id = 100 points

// =======================================================================
// CSS specificity and !important keyword

// =======================================================================
// Aside: buttons/links

// Buttons: For actions that affect the websites front-end or back-end

// Links: for navigation to somewhere on the same page, within the site, 
// or elsewhere on the internet.

// =======================================================================
// Aside: Inline-block

// Block elements
// Stack on top of each other.
// div, p, h1 are all examples of block elements.
// Set height and margin top and bottom

// Inline Elements
// Sit side by side
// span and a are examples of inline elements.
// cannot set height and margin top.

// =======================================================================
// Aside: Overflow

// overflow: hidden; hides excessive content. Useful for maintaining the
// layout but can elad to inaccessible content.

// overflow: scroll;
// adds a scrollbar to the tainer even if there is no overflow

// overflow: auto;
// only adds a scroll bar when needed.

// overflow-x and overflow-y
// control overflow behaviour seperately fopr horizontal and vertical
// content to some extent
// overflow-x: hidden and overflow-y: visible don't work together.

// =======================================================================
// CSS Fundamentals: Challenges
// =======================================================================

// =======================================================================
// CSS Fundamentals: Introduction

// =======================================================================
// CSS Fundamentals: Setting up the layout

// Add the image after the <h1>
// Remember to add alt!!!
// Center the text for the entire page
// Add a new div, give it a class, and assign it a width of 570px
// Center that div on the page

// Solution

body {
    text-align: center;
}

.container {
    width: 570px;
    margin: 0 auto;
}

// =======================================================================
// CSS Fundamentals: Google fonts

// Find 'Roboto' on Google fonts
// Make sure you get the "light" and the "black" weights
// Add the code needed to the HTML
// Set the font family for the entire page to Roboto

// =======================================================================
// CSS Fundamentals: Setting up the typography

// Font sizes
// h1: 60px
// h2: 42px
// h3: 36px
// body: 21px
// small: 16px

// Font weights
// black - 900
// body - 300

// =======================================================================
// CSS Fundamentals: Making things a little more fancy

// The title needs extra styling
// The link needs to be styled.

// h1: 80px
// h2: 60px
// bold must be on it's own line

//link color: #99D930
// link hover color: #131313

h1 span,
h2 span {
    font-weight: 900;
}

<span class="bold-text"></span>

.bold-text {
    font-weight: 900;
    display: block;
}

// =======================================================================
// CSS Fundamentals: Breathing Room

// Each "part" of the site needs 100px of space on the top and bottom

// Each "part" needs a different background color that extends the entire
// width of the viewport

// colors: #d7d7d7, #ffeaea, #eaf9ff    

// =======================================================================
// CSS Fundamentals: Playing with colors

// background color: #252525
// text color: #fff

// =======================================================================
// CSS Fundamentals: The finer details

// =======================================================================
// CSS Fundamentals: Creating buttons

// Include a hover and a focus state

// Use links rather than actual buttons

// normal state, background-color: #99d930, color: #252525
// hover state, background-color: #252525, color: #fff

// =======================================================================
// CSS Fundamentals: Fancier headings

// width 1px
// color #c4c4c4

// =======================================================================
// CSS Fundamentals: Working with what you have

### Instructions
#### All green text
- color: #99d930
- Font-weight: 900

####The headings
- h1: 80px
- h2: 60px

#### Button hover/focus
- background: #fff
- color: #252525


// =======================================================================
// Solo Project - Oldagram

// Create the first post
// Use semantic HTML
// Add hover effects to the icons

// stretch goal
// render out all of the posts using JS
// increase the likes when double clicking the post


