// =======================================================================
// Essential CSS Concepts
// =======================================================================

// =======================================================================
// Build an NFT Site Intro

// =======================================================================
// Semantic HTML - Header, Main, Sector, Footer

// <header> - Site title, logo, and nav
// <section> - A stand-alone section
// <footer> - Copyright, Ts & Cs, ect.
// <main> The page's unique content

// =======================================================================
// Aside: Margins - strange behaviour

// When an element touches its parent, it;s top and bottom margins
// will merge with the margins of the parent element.

// This can be fixed by adding padding to the parent element.

// This is not an issue when you are using flexbox and grid.

// =======================================================================
// Grouping Selectors

// ID beats class, class beats element, element is last
// CSS reads top down
// element = 1 point
// class = 10 points
// id = 100 points

// =======================================================================
// CSS specificity and !important keyword

// =======================================================================
// Aside: buttons/links

// Buttons: For actions that affect the websites front-end or back-end

// Links: for navigation to somewhere on the same page, within the site, 
// or elsewhere on the internet.

// =======================================================================
// Aside: Inline-block

// Block elements
// Stack on top of each other.
// div, p, h1 are all examples of block elements.
// Set height and margin top and bottom

// Inline Elements
// Sit side by side
// span and a are examples of inline elements.
// cannot set height and margin top.

// =======================================================================
// Aside: Overflow

// overflow: hidden; hides excessive content. Useful for maintaining the
// layout but can elad to inaccessible content.

// overflow: scroll;
// adds a scrollbar to the tainer even if there is no overflow

// overflow: auto;
// only adds a scroll bar when needed.

// overflow-x and overflow-y
// control overflow behaviour seperately fopr horizontal and vertical
// content to some extent
// overflow-x: hidden and overflow-y: visible don't work together.

// =======================================================================
// CSS Fundamentals: Challenges
// =======================================================================

// =======================================================================
// CSS Fundamentals: Introduction

// =======================================================================
// CSS Fundamentals: Setting up the layout

// Add the image after the <h1>
// Remember to add alt!!!
// Center the text for the entire page
// Add a new div, give it a class, and assign it a width of 570px
// Center that div on the page

// Solution

body {
    text-align: center;
}

.container {
    width: 570px;
    margin: 0 auto;
}

// =======================================================================
// CSS Fundamentals: Google fonts

// Find 'Roboto' on Google fonts
// Make sure you get the "light" and the "black" weights
// Add the code needed to the HTML
// Set the font family for the entire page to Roboto

// =======================================================================
// CSS Fundamentals: Setting up the typography

// Font sizes
// h1: 60px
// h2: 42px
// h3: 36px
// body: 21px
// small: 16px

// Font weights
// black - 900
// body - 300

// =======================================================================
// CSS Fundamentals: Making things a little more fancy

// The title needs extra styling
// The link needs to be styled.

// h1: 80px
// h2: 60px
// bold must be on it's own line

//link color: #99D930
// link hover color: #131313

h1 span,
h2 span {
    font-weight: 900;
}

<span class="bold-text"></span>

.bold-text {
    font-weight: 900;
    display: block;
}

// =======================================================================
// CSS Fundamentals: Breathing Room

// Each "part" of the site needs 100px of space on the top and bottom

// Each "part" needs a different background color that extends the entire
// width of the viewport

// colors: #d7d7d7, #ffeaea, #eaf9ff    

// =======================================================================
// CSS Fundamentals: Playing with colors

// background color: #252525
// text color: #fff

// =======================================================================
// CSS Fundamentals: The finer details

// =======================================================================
// CSS Fundamentals: Creating buttons

// Include a hover and a focus state

// Use links rather than actual buttons

// normal state, background-color: #99d930, color: #252525
// hover state, background-color: #252525, color: #fff

// =======================================================================
// CSS Fundamentals: Fancier headings

// width 1px
// color #c4c4c4

// =======================================================================
// CSS Fundamentals: Working with what you have

### Instructions
#### All green text
- color: #99d930
- Font-weight: 900

####The headings
- h1: 80px
- h2: 60px

#### Button hover/focus
- background: #fff
- color: #252525


// =======================================================================
// Solo Project - Oldagram

// Create the first post
// Use semantic HTML
// Add hover effects to the icons

// stretch goal
// render out all of the posts using JS
// increase the likes when double clicking the post

// =======================================================================
// Build A Coworking Space Site
// =======================================================================

// =======================================================================
// Intro

// using margin: auto on flex children
// position: absolute & relative
// align-self
// position: fixed

// =======================================================================
// Aside: margin: auto on flexbox children

// <div class="meme-container" role="img" aria-label="A smiling dog">

// WHen setting position absolute and relative, it is the container,
// that should be set to postion: relative, and the element within the 
// container which should be set to absolute.
// Without the container set to relative, the element within the container,
// will just snap to the window. 

// =======================================================================
// Aside: Position Fixed

// Use position: absolute to position an element relative to a containing,
// element. The element scrolls with the content.

// Use position: fixed to lock an element in a position relative to the
// window. It maintains that position even when scrolling.

// =======================================================================
// Aside: z-index

// the z axis order of positioned elements and their descendants
// position: relative, absolute, fixed, sticky

// =======================================================================
// Essential JavaScript concepts
// =======================================================================

// =======================================================================
// Intro

// =======================================================================
// Cookie Consent Intro

// =======================================================================
// Position the modal

/*
Challenge:
1. Make the modal sit on top of the other content. 
2. Make sure it is centrally aligned both horizontally
   and vertically (just like in the slide).
3. When it's positioned correctly, set its display 
   property to 'none'.
*/

position: fixed;
top: 0;
bottom: 0;
left: 0;
right: 0;
margin: auto;

// =======================================================================
// Aside: setTimeout

// With setTimeout() you can remove a block of code from the regular flow
// of the program, and execute it at a later point.

/*
Challenge:
1. Make the third console.log fire 3 seconds after 
   the answer appears.
*/

setTimeout(() => console.log('Ready for next question?'), 6000

// =======================================================================
// Aside: element.style

/*
Challenge
1. When the button is clicked and the answer revealed, 
   change the background color to #68e1fd and text color
   to #1434A4 just in the "question" div.
   ⚠️ You will run into a problem with the background 
   color. See if you can find the solution by googling.
2. When the answer is revealed, make the button disappear.
*/

const revealBtn = document.getElementById('reveal-btn')
const answer = document.getElementById('answer')
const question = document.getElementById('question')

revealBtn.addEventListener('click', () =>{
    answer.style.display = 'block'
    revealBtn.style.display = 'none'
    
    question.style.backgroundColor = '#68e1fd'
    question.style.color = '#1434A4'
})

// =======================================================================
// Make the modal reappear

/*
Challenge:
1. Take control of the 'modal' div with JavaScript.
2. Swap out our console.log for a line of code
   which will change the CSS 'display' property
   of our modal to 'inline'.
*/

const modal = document.getElementById('modal')

setTimeout(() => modal.style.display = 'inline', 1500)

// =======================================================================
// Close the modal

/*
Challenge:
1. Take control of the close button.
2. Use an event listener to set the display 
   property of the modal to 'none' when the
   close button is clicked.
*/

const modal = document.getElementById('modal')
const modalBtn = document.getElementById('modal-close-btn')

setTimeout(() => modal.style.display = 'inline', 1500)

modalBtn.addEventListener('click', () => {
    modalBtn.style.display = 'none'
    modal.style.display = 'none'
})

// =======================================================================
// Aside: Forms

// Forms: Getting input from users

Challenge:
1. Add inputs for the email and password
   fields. Remember to add all necessary
   properties.
2. Give the inputs labels and make it so
   that clicking on the label brings the 
   corresponding input into focus.    
 -->

    <form>
    <label for="astronautName">Astronaut Name 👩‍🚀</label>
    <input
            type="text"
            id="astronautName"
            name="astronautName"
            placeholder="Neil Armstrong"
            >
    <label for="astronautEmail">Astronaut Email</label>
    <input
            type="email"
            id="astronautEmail"
            name="astronautEmail"
            placeholder="n.armstrong@nasa.com"
            >

    <label for="password">Password</label>
    <input
            type="password"
            id="password"
            name="password"
            placeholder="*******"
            >
    </form>

// =======================================================================
// Add a form 1

<!-- 
Challenge: 
1. Create a form using form tags.
2. Add two inputs: one for name and one 
   for email address.
3. Give each input "type", "name" and 
   "placeholder" properties. You can see the
   placeholder text we need in the slide. 
-->	

    <form>
        <input
            type="text"
            id="fullName"
            name="fullName"
            placeholder="Enter your full name"
            >
        <input
            type="email"
            id="emailAddress"
            name="emailAddress"
            placeholder="Enter your email"
            >
    </form>

// =======================================================================
// Aside Validation Attributes

<!-- Challenge:
1. Use 'min' and 'max' to make sure that only ages of 
   21 and over and 120 and under can be inputted.
  -->

    <input 
    required
    type="number" 
    id="astronautAge" 
    name="astronautAge"
    placeholder="21"
    min="21"
    max="120"
    >

// =================================

<!-- Challenge:
1. Make sure users can only input a 3 character country 
   code. These can be lower or upper case but exactly 
   3 characters in length and no special characters or
   numbers.
   
   USA, FRA, GBR, SWE ✅
   US, UK, AB1, !USA ❌ 
  -->

//  You can use the following regex to match a 3-letter country code, 
//  either uppercase or lowercase:

\b[a-zA-Z]{3}\b

// \b  Word boundary, ensures you're matching exactly 3-letter words 
// (not part of a longer word)

// [a-zA-Z] Matches one uppercase or lowercase letter

// {3} Exactly 3 of the previous pattern (i.e. 3 letters)

    <input 
        required
        type="text" 
        id="astronautCountryCode" 
        name="astronautCountryCode"
        placeholder="Fra"
        pattern="\b[a-zA-Z]{3}\b"
    > 

// =======================================================================
// Aside: preventDefault

const loginForm = document.getElementById('login-form')

loginForm.addEventListener('submit', function(e){
    e.preventDefault()
})

// =======================================================================
// preventDefault Challenge

/*
Challenge:
1. Take control of the form element. 
2. Add an eventListener to the form to listen for a
   "submit" event.
3. When a user clicks "accept", prevent the default
   behaviour that triggers the refresh.
4. Log out "form submitted".
*/  

consentForm.addEventListener('submit', (e) => {
    e.preventDefault()
    console.log('form submitted')
})

// =======================================================================
// Add modal message

/*
Challenge:
1. Take control of the "modal-text" element. 
2. Make it so that when a user clicks on 
   the accept button, the HTML string below
   is inserted into the modal-text div.

<div class="modal-inner-loading">
    <img src="images/loading.svg" class="loading">
    <p id="uploadText">
        Uploading your data to the dark web...
    </p>
</div>
*/ 

consentForm.addEventListener('submit', function(e){
    e.preventDefault()
    
    modalText.innerHTML = `<div class="modal-inner-loading">
    <img src="images/loading.svg" class="loading">
    <p id="uploadText">
        Uploading your data to the dark web...
    </p>
</div>`

})
 

// =======================================================================
// Add modal messages 2

/*   
Challenge: 
1. Use a setTimeout to make the phrase "Uploading
   your data to the dark web" change to "Making the 
   sale..." after 1.5 seconds.
⚠️ Do not change the loading svg!
*/   

consentForm.addEventListener('submit', function(e){
    e.preventDefault()
    modalText.innerHTML = `
    <div class="modal-inner-loading">
        <img src="images/loading.svg" class="loading">
        <p id="upload-text">Uploading your data to the dark web...</p>
    </div>` 
    
    setTimeout(function(){
        document.getElementById('upload-text').innerText = `Making the sale...`
    }, 1500) 

})

// =======================================================================
// Add modal messages 3

/*   
Challenge: 
1. Make it so that 1.5 seconds after seeing the 
    "Making the sale..." message, the modal is 
    cleared of its content and the following 
    string of HTML is displayed instead.
    
    `<h2>Thanks you sucker! </h2>
    <p>We just sold the rights to your eternal soul.</p>
    <div class="idiot-gif">
        <img src="images/pirate.gif">
    </div>
    ` 
*/

setTimeout(function(){
    document.getElementById('modal-inner').innerHTML = `
    <h2>Thanks you sucker! </h2>
    <p>We just sold the rights to your eternal soul.</p>
    <div class="idiot-gif">
        <img src="images/pirate.gif">
    </div>
` 
}, 3000)


// =======================================================================
// Aside: FormData

// Using FormData to store submitted form information into an object

const loginForm = document.getElementById('login-form')

loginForm.addEventListener('submit', function(e){
    e.preventDefault()
    
    const loginFormData = new FormData(loginForm)
    console.log(loginFormData)
})

// =======================================================================
// Form Data 1

/*   
Challenge: 
1. Inside the body of this event listener, 
   create a const and set it equals to a new 
   instance of FormData which takes in our HTML 
   form element as a parameter.
2. Log out the const (you should just get 
   a FormData object).
*/ 

const modalFormData = new FormData(consentForm)
console.log(modalFormData)

// =======================================================================
// Aside: FormData methods

// .get() - goes into the object and extracts the values specified.

<input 
    type="text" 
    id="astronautName" 
    name="astronautName"
    placeholder="Neil Armstrong"
    required
    >

const name = loginFormData.get('astronautName')
const email = loginFormData.get('astronautEmail')
const password = loginFormData.get('astronautPassword')
console.log(name) 

// =======================================================================
// Aside: Disabling elements

/*
Challenge:
1. Disable the 'Add to Cart' button when 
   quantity is at zero. Remember: quantity
   will be at zero when the page loads!
*/ 

// =======================================================================
// Disable the close button

modalCloseBtn.disabled = true

// =======================================================================
// Aside: classlist.toggle

<div class="container" id="container">

.reverse{
    flex-direction: row-reverse;
}

sortBtn.addEventListener('click', function(){
    container.classList.toggle('reverse')
})


// =======================================================================
// Pumpkin's Purrfect Meme Picker
// =======================================================================

// =======================================================================
// Aside: for of

const characters = [
    {
        title: 'Ninja',
        emoji: '🥷',
        powers: ['agility', 'stealth', 'aggression'],
    },
    {
        title: 'Sorcerer',
        emoji: '🧙',
        powers: ['magic', 'invisibility', 'necromancy'],
    },
    {
        title: 'Ogre',
        emoji: '👹',
        powers: ['power', 'stamina', 'shapeshifting'],
    },
    {
        title: 'Unicorn',
        emoji: '🦄',
        powers: [ 'flight', 'power', 'purity'],
    }
]

/*
Challenge:
1. Nest a for of inside this for of to iterate over 
   the powers array for each character. Log out each 
   power.
*/

for (let character of characters){
    for (let power of character.powers){
        console.log(power)
    }
}

// magic
// invisibility
// necromancy...

// =======================================================================
// Use a for of

/*
Challenge:
1. Set up a "for of" in getEmotionsArray to iterate 
   over the data.
2. For now, just log out each cat object individually.
*/

const catsData = [
    {
        emotionTags: ["moody"],
        isGif: false,
        image: "angry.jpeg",
        alt: "A cat looking moody",
    },
    {
        emotionTags: ["moody", "insomniac"],
        isGif: false,
        image: "angry2.jpeg",
        alt: "A cat looking moody",
    },
    {
        emotionTags: ["moody"],
        isGif: false,
        image: "angry3.jpeg",
        alt: "A cat looking moody",
    },
    {
        emotionTags: ["confused", "sad"],
        isGif: false,
        image: "confused.jpeg",
        alt: "A cat looking confused",
    },
    {
        emotionTags: ["dominant", "moody"],
        isGif: false,
        image: "dominant.jpeg",
        alt: "A cat looking dominant",
    },
    {
        emotionTags: ["happy", "relaxed"],
        isGif: false,
        image: "happy.jpeg",
        alt: "A cat looking happy",
    },
    {
        emotionTags: ["hungry"],
        isGif: false,
        image: "hungry.jpeg",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["hungry"],
        isGif: false,
        image: "hungry1.jpeg",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["insomniac"],
        isGif: false,
        image: "insomnia.jpeg",
        alt: "A cat looking insomniac",
    },
    {
        emotionTags: ["insomniac"],
        isGif: false,
        image: "insomnia1.jpeg",
        alt: "A cat looking insomniac",
    },
    {
        emotionTags: ["relaxed"],
        isGif: false,
        image: "lazy.jpeg",
        alt: "A cat looking lazy",
    },
    {
        emotionTags: ["scared"],
        isGif: false,
        image: "nervous.jpeg",
        alt: "A cat looking nervous",
    },
    {
        emotionTags: ["sad"],
        isGif: false,
        image: "sad.jpeg",
        alt: "A cat looking sad",
    },
    {
        emotionTags: ["sad", "moody"],
        isGif: false,
        image: "sad1.jpeg",
        alt: "A cat looking sad",
    },
    {
        emotionTags: ["moody"],
        isGif: true,
        image: "angry.gif",
        alt: "A cat looking moody",
    },
    {
        emotionTags: ["moody"],
        isGif: true,
        image: "angry2.gif",
        alt: "A cat looking angry",
    },
    {
        emotionTags: ["confused"],
        isGif: true,
        image: "confused2.gif",
        alt: "A cat looking confused",
    },
    {
        emotionTags: ["dominant"],
        isGif: true,
        image: "dominant.gif",
        alt: "A cat looking dominant",
    },
    {
        emotionTags: ["happy"],
        isGif: true,
        image: "happy.gif",
        alt: "A cat looking happy",
    },
    {
        emotionTags: ["hungry", "sad", "confused"],
        isGif: true,
        image: "confused.gif",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["hungry"],
        isGif: true,
        image: "hungry.gif",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["hungry"],
        isGif: true,
        image: "hungry2.gif",
        alt: "A cat looking hungry",
    },
    {
        emotionTags: ["insomniac", "scared"],
        isGif: true,
        image: "insomnia2.gif",
        alt: "A cat looking insomniac",
    },
    {
        emotionTags: ["relaxed"],
        isGif: true,
        image: "lazy.gif",
        alt: "A cat looking relaxed",
    },
    {
        emotionTags: ["relaxed"],
        isGif: true,
        image: "relaxed2.gif",
        alt: "A cat looking relaxed",
    },
    {
        emotionTags: ["scared", "sad"],
        isGif: true,
        image: "nervous.gif",
        alt: "A cat looking nervous",
    },
    {
        emotionTags: ["scared"],
        isGif: true,
        image: "nervous2.gif",
        alt: "A cat looking scared",
    },
    {
        emotionTags: ["sad"],
        isGif: true,
        image: "sad.gif",
        alt: "A cat looking sad",
    },
]

function getEmotionsArray(cats){
    for (let cat of cats) {
        console.log(cat)
    }
}

getEmotionsArray(catsData)

// {emotionTags: ['moody'], isGif: false, image: 'angry.jpeg', alt: 'A cat looking moody'}
// {emotionTags: ['moody', 'insomniac'], isGif: false, image: 'angry2.jpeg', alt: 'A cat looking moody'}
// {emotionTags: ['moody'], isGif: false, image: 'angry3.jpeg', alt: 'A cat looking moody'}

// =======================================================================
// Nest the for of

/*
Challenge:
1. Add a nested "for of" to log out just 
   the emotions from the emotionTags array 
   in each object.
*/  

function getEmotionsArray(cats){
    for (let cat of cats){
        for (let emotions of cat.emotionTags)
        console.log(emotions)
    }
}

// ===============================

/*
Challenge:
1. Set up a const and initialise it with 
   an empty array.
2. Instead of logging out each emotion, 
   push each one to the new array.
3. At the end of the function, log out the 
   const holding the new array.
*/ 

function getEmotionsArray(cats){
    const emptyEmotionsArray = []
    for (let cat of cats){
        for (let emotion of cat.emotionTags){
            emptyEmotionsArray.push(emotion)
        }
        
    }
    console.log(emptyEmotionsArray)
}

// =======================================================================
// Render out the emotions 1

/*
Challenge:
1. Have the new function "renderEmotionsRadios" 
   take in a single parameter. Name that parameter
   "cats". 
2. Inside renderEmotionsRadios, set up a const called 
   "emotions" and set it equals to whatever is returned 
   by calling getEmotionsArray, passing in "cats" as an 
   argument.
3. For now, renderEmotionsRadios should just log out 
   "emotions".
4. Call renderEmotionsRadios passing in catsData.
*/

function renderEmotionsRadios(cats){
    const emotions = getEmotionsArray(cats)
    
    console.log(emotions)
}

renderEmotionsRadios(catsData)

// =======================================================================
// Render out the emotions 2

/*
Challenge:
1. Take control of the 'emotion-radios' div.
2. In renderEmotionsRadios, set up a let 
   to hold our string of HTML. You can initialise
   it with an empty string.
3. Iterate over "emotions" and put each emotion 
in a <p> tag and then add them to the let you 
created in step 2. 
4. Render the string to the 'emotion-radios' div.
*/ 

const emotionRadios = document.getElementById('emotion-radios')

function renderEmotionsRadios(cats){
    const emotions = getEmotionsArray(cats)
    
    let emotionsString = ''
    
    emotions.forEach((emotion) => emotionsString += `<p>${emotion}</p>`)
    
    emotionRadios.innerHTML = emotionsString
    
}

renderEmotionsRadios(catsData)

// ===============================

// Instructor Solution

function renderEmotionsRadios(cats){
    let radioItems = ``
    const emotions = getEmotionsArray(cats)
    for (let emotion of emotions){
        radioItems += `<p>${emotion}</p>`
    }
    emotionRadios.innerHTML = radioItems
}

// =======================================================================
// Import the data

// data.js 

export const catsData = []

// index.js

import { catsData } from '/data.js'

// =======================================================================
// Aside: Radio Inputs

    <div class="radio">
        <input 
        type="radio"
        id="horses"
        value="horses"
        name="choice-radios"
        >
        <label for="horses">5 duck-sized horses</label>
    </div>

// =======================================================================
// Render the radio inputs

/*
Challenge:
1. Swap out `<p>${emotion}</p>` for HTML
   that will render a radio input for each
   emotion. Remember to use "type", "id", 
   "value", and "name" properties on each radio.
   ("id" and "value" can both be set to the
   "emotion").
2. Remember to give each radio a label.
   (What property does a label need?)
3. Enclose each individual radio input in this div:
   <div class="radio">
      **RADIO HERE**
   </div>
*/ 

function renderEmotionsRadios(cats){
    
    let radioItems = ``
    const emotions = getEmotionsArray(cats)
    for (let emotion of emotions){

        radioItems += `<div class="radio">
           <input
           type="radio"
           id="${emotion}"
           value="${emotion}"
           name="emotion-radio"
           >
        <label for="${emotion}">${emotion}</label> 
        </div>`
        
    emotionRadios.innerHTML = radioItems
    }
}

// =======================================================================
// Aside: .includes()

// A method for checking if an array holds a given value. 
// Returns true || false

/*
Challenge:
1. Add an if else to the event listener's function.
2. Only add an item to the shoppingList array if it 
   is not already in the shoppingList array.
3. If an item is a duplicate, clear the input field
   and log out "no duplicates".
*/

addItemBtn.addEventListener('click', function(){
        if (!shoppingList.includes(itemInput.value)) {
            shoppingList.push(itemInput.value)
            render() 
        } else {
          itemInput.value = '' 
          console.log('no duplicates')
        }    
})

// Instructor Solution

addItemBtn.addEventListener('click', function(){
        if(shoppingList.includes(itemInput.value)){
            console.log('no duplicates')
        }
        else{
            shoppingList.push(itemInput.value)
            render()        
        }
        itemInput.value = '' 
})


// =======================================================================
// remove duplicates

/*
Challenge:
1. Refactor this nested for of so that an 
   emotion is only pushed to emotionsArray
   if it is not already in emotionsArray.
   Extra kudos if you use the "logical not"
   operator - feel free to google it!
*/

function getEmotionsArray(cats){
    const emotionsArray = []
        
    for (let cat of cats){
        for (let emotion of cat.emotionTags){
            if (!emotionsArray.includes(emotion)) {
                emotionsArray.push(emotion)
            }
        }
    }
    return emotionsArray
}

// =======================================================================
// Aside: e.target

container.addEventListener('click', function(e){
    console.log(e.target.id)
})


// =======================================================================
// Get the id of the clicked option

/*
Challenge:
1. Add an eventListener to emotionRadios that will listen 
   out for any *change* in our radio buttons. When it detects
   a change, it should log out the id of the element that 
   was selected.
⚠️️ ️T️h️is won't work if the eventListener is listening out for a 
   'click'. Google what event to listen for - I've already 
   given you a clue!
*/

emotionRadios.addEventListener('change', (e) => {
    console.log(e.target.id)
})

// =======================================================================
// Aside: parentElement

// Accessing the parent when you know the children

container.addEventListener('click', function(e){
    console.log(document.getElementById(e.target.id).parentElement)
})

// <div class='product'>

container.addEventListener('click', function(e){
    document.getElementById(e.target.id).parentElement.style.backgroundColor = 'lightblue'
})

// =======================================================================
// Aside: classlist add/remove

/*
Challenge:
1. Remove the "unread" class from the 
   parentElement of the clicked element.
*/

document.addEventListener('click', function(e){

    document.getElementById(e.target.id).parentElement.classList.remove('unread')
    document.getElementById(e.target.id).parentElement.classList.add('read')
    
})

// =======================================================================
// Add colour to the selected emotion

/*
Challenge:
1. highlightCheckedOption should take control 
   of the selected radio input and add the CSS
   class of "highlight" to its classlist.
*/

emotionRadios.addEventListener('change', highlightCheckedOption)

function highlightCheckedOption(e){

    document.getElementById(e.target.id).classList.add('highlight')
}

// ===============================

/*
Challenge:
1. Change the code in line 8 so we add the 
   'highlight' class to the parent of the 
   selected input radio.
*/

emotionRadios.addEventListener('change', highlightCheckedOption)

function highlightCheckedOption(e){
    document.getElementById(e.target.id).parentElement.classList.add('highlight')

}

// =======================================================================
// Aside: getElementsByClassName

// Grabbing all elelemtns with a given class with one line of code

/*
Challenge:
1. Finish setting up this array of 
   elements with the "product" class.
2. Iterate over this array and remove 
   the "purchase" class and add the 
   "on-offer" class.
*/

const productsArray = document.getElementsByClassName('product')
for (let product of productsArray){
    product.classList.remove('purchased')
    product.classList.add('on-offer')
}

// =======================================================================
// Remove the highlight class

/*
Challenge:
1. Create an array of all items that have 
   the "radio" class.
2. Iterate over the array and remove the 
   "highlight" class from each one.
*/ 

function highlightCheckedOption(e){
    
    const radioArray = document.getElementsByClassName('radio')
    for (let radio of radioArray) {
        radio.classList.remove('highlight')
    }    
    
    document.getElementById(e.target.id).parentElement.classList.add('highlight')
}

// =======================================================================
// Aside: querySelector and why it's useful

// A more powerful way of grabbing elements

const submitBtn = document.getElementById('submit-btn')

submitBtn.addEventListener('click', function(){
    const checkedRadio = document.querySelector('input[type="radio"]:checked')
    console.log(checkedRadio.value)
})

// =======================================================================
// Connect the button

/*
Challenge:
1. Set up an eventlistener which calls a new
   function called "getMatchingCatsArray" when
   the "Get Image" button is clicked.
2. getMatchingCatsArray should save the value
   of the checked radio input to a const and 
   log out that const.
*/

const getMatchingCatsArray = (() => {
    const checkedRadio = document.querySelector('input[type="radio"]:checked').value
    console.log(checkedRadio)
})

getImageBtn.addEventListener('click', getMatchingCatsArray)

// =======================================================================
// Has an emotion been chosen?

/*
Challenge:
1. Add code to getMatchingCatsArray so 
   that the two existing lines of code 
   only run if an emotion has been selected.
*/

if (document.querySelector('input[type="radio"]:checked')) {
    const selectedEmotion = document.querySelector('input[type="radio"]:checked').value
    console.log(selectedEmotion)
}

// =======================================================================
// Aside: checkbox

// Getting a straight true or false form our users

<label for="accept-terms">
    I accept these terms and conditions
</label>
<input type="checkbox" id="accept-terms">

const continueBtn = document.getElementById('continue-btn')
const acceptTerms = document.getElementById('accept-terms')

continueBtn.addEventListener('click', function(){
    
    console.log(acceptTerms.checked)
})

// true

// ===============================

/*
Challenge:
1. Add a second checkbox to see if a user
   wants to be added to the mailing list.
2. If they do, log out "mail accepted" when 
   the continue button is clicked. If they
   don't, log out "mail not accapted."
*/

const continueBtn = document.getElementById('continue-btn')
const acceptTerms = document.getElementById('accept-terms')
const mailingBox = document.getElementById('mailing-list')

continueBtn.addEventListener('click', function(){
    
    if (acceptTerms.checked && mailingBox.checked){
        console.log("Terms accepted!")    
        console.log("mail accepted!")    
    } else if (acceptTerms.checked && !mailingBox.checked) {
        console.log("Terms accepted!")
        console.log("mail not accepted!")
    }
    else {
        console.log("Terms refused!")         
        console.log("mail not accepted!")
    }
})
// =======================================================================
// isGif

/*
Challenge:
1. Take control of the gifs only option checkbox.
2. Set up a const in getMatchingCatsArray to store 
   a boolean which will be set to true if the 
   "gifs only" option is checked and false if it's
   not. (Think what a good name for this const would 
   be.)
3. Log it out to check it's working.
*/

const getGifs = document.getElementById('gifs-only-option')

const getGifsCheck = getGifs.checked
console.log(getGifsCheck)

// =======================================================================
// Aside: filter()

// Getting only the elements we want from an array

/*
Challenge:
1. Get rid of the if statement and reduce the 
   logic in this function to just one line 
   of code.
*/

const adults = ages.filter((age) => age >= 18)

// ===============================

/*
Challenge:
1. Use the .filter method to create an array 
   called "children" which holds all of the ages 
   that are under 18.  
*/

const children = ages.filter((age) => age < 18)

// =======================================================================
// Aside: filter() 2

/*
Challenge:
1. Use the .filter() method to create an array
   of all of the thrillers.
*/

const thrillerGenre = series.filter(function(show){
    return show.genres.includes('thriller')
})

console.log(thrillerGenre)

// =======================================================================
// Find matches with .filter()

/*
Challenge:
1. Use the .filter() and .includes() methods to get 
   an array of cats which have the selected emotion
   in their emotionTags array. 
2. Store this array in a const and log it out to check
   it's working. Think: what would be a good name for the
   const?
*/  

const getMatchingEmotions = catsData.filter((emotion) => {
    return emotion.emotionTags.includes(selectedEmotion)
})

console.log(getMatchingEmotions)

// =======================================================================
// Animated GIFs Only

/*
Challenge:
1. Change the .filter() method's function so it returns an 
   array that only has GIFs if the 'GIFs only' option is 
   checked. If the 'GIFs only' option is not checked, it
   should return an array of all matches as it does now.
*/ 

const matchingCatsArray = catsData.filter(function(cat){
    if(isGif){
        return cat.emotionTags.includes(selectedEmotion) && cat.isGif
    }
    else{
        return cat.emotionTags.includes(selectedEmotion)
    }
    
})
console.log(matchingCatsArray)

// =======================================================================
// If there's only one cat...

/*
Challenge:
1. Set up an if to check if there is only one
   cat object in the array. If there is, log
   out that cat object (but not the whole array!)
   {}
   Test: "happy", animated GIFS only checked.
*/  

if (catsArray.length === 1) {
    catsArray.forEach((element) => {
        console.log(element)
    })
}

// =======================================================================
// If there's more than one cat

/*
Challenge:
1. If catsArray has more than one object, 
   select an object at random and log it out.
*/ 

function getSingleCatObject(){
    
    const catsArray = getMatchingCatsArray()
    
    if (catsArray.length === 1){
        console.log(catsArray[0])
    }
    else {
        const random = Math.floor(Math.random() * catsArray.length)
        console.log(catsArray[random])
    }
    
}

// =======================================================================
// RenderCat()

/*
Challenge:
1. Take the object that is returned by 
   getSingleCatObject and save it to a const 
   called "catObject".
2. Set memeModalInner’s innerHTML to the HTML 
   string below, remembering to insert the relevant 
   data from catObject to replace the UPPERCASE text.
3. Set memeModal’s display property to "flex". 
 
       `<img 
        class="cat-img" 
        src="./images/CAT IMAGE"
        alt="CAT ALT TEXT"
        >`
*/ 

function renderCat(){

    const catObject = getSingleCatObject()
    
    memeModalInner.innerHTML = 
    `
    <img 
        class="cat-img" 
        src="./images/${catObject.image}"
        alt="${catObject.alt}"
        >
    `

    memeModal.style.display = 'flex'
    
}

// =======================================================================
// Close the modal

/*
Challenge:
1. Wire up the X button in the modal so
   it closes the modal.
*/ 

const memeModalBtn = document.getElementById('meme-modal-close-btn')

memeModalBtn.addEventListener('click', () => {
    memeModal.style.display = 'none'
})


// =======================================================================
// Twimba: Twitter Clone
// =======================================================================

// =======================================================================
// Import the data

/*
Challenge:
1. Put all of the data in its own file called
   data.js, and export it back into index.js. 
   Make any changes to index.html that are
   necessary to make this work.
2. Log out tweetsData.
*/

// =======================================================================
// Aside: TextArea

// A multiline input field

<textarea 
    placeholder="Ask me anything!" 
    id="chat-input"></textarea>

textarea{
    width: 239px;
    height: 50px;
    margin: 0px;
    padding: 5px;
    resize: none;
}

<!-- 
Challenge
1. Add a textarea.
2. Give it placeholder text as shown in the 
   slide and an id of "tweet-input".
-->

// =======================================================================
// Tweet Boilerplate

/*
Challenge:
1. Use a "for of" to iterate over the data and 
   create HTML string for each tweet using the 
   boilerplate below. Replace UPPERCASE text
   with data from the tweets. 
2. Store this HTML in a let called "feedHtml".
3. Log out feedHtml.
4. Call getFeedHtml to check it's working.
*/  

{
    handle: `@TrollBot66756542 💎`,
    profilePic: `images/troll.jpg`,
    likes: 27,
    retweets: 10,
    tweetText: `Buy Bitcoin, ETH Make 💰💰💰 low low prices. 
        Guaranteed return on investment. HMU DMs open!!`,
    replies: [],
    isLiked: false,
    isRetweeted: false,
    uuid: '4b161eee-c0f5-4545-9c4b-8562944223ee',
}

// =======================================================================
// Tweet Boilerplate Challenge

function getFeedHtml() {
    
    let feedHtml = ''

    for (let data of tweetsData) {
        feedHtml += `<div class="tweet">
    <div class="tweet-inner">
        <img src="${data.profilePic}" class="profile-pic">
        <div>
            <p class="handle">${data.handle}</p>
            <p class="tweet-text">${data.tweetText}</p>
            <div class="tweet-details">
                <span class="tweet-detail">
                    ${data.replies.length}
                </span>
                <span class="tweet-detail">
                    ${data.likes}
                </span>
                <span class="tweet-detail">
                    ${data.retweets}
                </span>
            </div>   
        </div>            
    </div>
</div>`
    }

    console.log(feedHtml)
}

// =======================================================================
// Aside: forEach()

// A method for iterating over arrays

/*
Challenge:
1. Nest a forEach to log out each individual
   power in each characters powers array.
*/

characters.forEach(function(character){
    character.powers.forEach((power) => {
        console.log(power)
    })
})

characters.forEach(function(character, index){
    console.log(index, character.title)
})


// 0 Ninja
// 1 Sorcerer
// 2 Ogre
// 3 Unicorn

// =======================================================================
// Render the tweets to the feed

    /*
Challenge:
1. Take control of the ‘feed’ div.
2. Render the HTML returned by the getFeedHtml 
   function to the 'feed' div. 
   See if you can do this with just one line of code!
*/

function render(){
    document.getElementById('feed').innerHTML = getFeedHtml()
}

// =======================================================================
// Aside: CDN Font Awesome

// CDN (Content delivery network)
// A remote service
// Provides assets to web applications
// E.g functions, styles, icons
// Gives us a snipper of code that will bring the asset into our application

<!-- 
Challenge:
1. Find the icons for location, email and calendar
   on Font Awesome and add them here. Use the
   slide to remind you what we are aiming for. 
-->

<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" 
integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" 
crossorigin="anonymous" referrerpolicy="no-referrer" />

<i class="fa-solid fa-house"></i>
<i class="fa-solid fa-location-dot"></i>
<i class="fa-solid fa-envelope"></i>
<i class="fa-solid fa-calendar-days"></i>

// =======================================================================
// Aside: Data attritbutes new

// Storing extra information in HTML elements

// data-unique-name = "your string"

<i class="fa-solid fa-share" data-share="image-1"></i>

// =======================================================================
// Aside: Data Attr JS and Challenge

document.addEventListener('click', function(e) {
    console.log(e.target.dataset.share)
})

<!--
Challenge:
1. Add a data attribute holding the id of the 
   image to the heart icon's tag'.	
-->

<i class="fa-solid fa-heart" data-heart="image-1"></i>

/*
Challenge:
2. Make clicking on the heart icon log out
   the id of the image.
*/

document.addEventListener('click', function(e) {
    if (e.target.dataset.share){
        console.log(e.target.dataset.share)
    }
    
    else if (e.target.dataset.heart) {
        console.log(e.target.dataset.heart)
    }

})

// =======================================================================
// Aside: Data Attributes Naming Issues

// Don't use uppercase letters when naming data-attributes in HTML

// Seperate words with dashes in the HTML
// USe camelCase in the JavaScript

// =======================================================================
// Like a tweet part 2: data attributes

// =======================================================================
// Like a tweet part 3: eventListener

/*
Challenge:
1. When a like icon is clicked, this function 
   should log out the contents of the 'data-like' 
   data-attribute.

⚠️ Clicking on the page but not on the like icon
   will log out 'undefined'. That is absolutely fine.
*/

document.addEventListener('click', function(e){
    if (e.target.dataset.like) {
        console.log(e.target.dataset.like)
    }
})

// =======================================================================
// Like a tweet part 4: handleClick()

/*
Challenge:
1. If a like icon has been clicked, call handleLikeClick
   passing in the uuid that is stored in the like icon's 
   data attribute. 
*/

document.addEventListener('click', function(e){

    if (e.target.dataset.like) {
      handleLikeClick(e.target.dataset.like)  
    }

})

/*
Challenge:
2. handleLikeClick should take in a parameter. 
   You can call this parameter 'tweetId'. For 
   now just log out tweetId.
*/

function handleLikeClick(tweetId){
    console.log(tweetId)
}

// =======================================================================
// Like a tweet part 5: find the tweet object

/*
Challenge:
1. Iterate over tweetsData and use the uuid 
   saved in tweetId to identify the liked
   tweet's object. Save that object to a 
   new const called 'targetTweetObj'.
⚠️ targetTweetObj should hold an object, NOT
   an array.
2. Increment targetTweetObj's 'likes' count 
   by 1.
3. Log out targetTweetObj.
*/

function handleLikeClick(tweetId){
    const targetTweetObj = tweetsData.find((tweet) => tweet.uuid === tweetId)
    
    if (targetTweetObj) {
        targetTweetObj.likes += 1
    }
    console.log(targetTweetObj)
}

// ===============================

// Instructors Solution

const targetTweetObj = tweetsData.filter(function(tweet){
    return tweet.uuid === tweetId
})[0]
targetTweetObj.likes++
console.log(tweetsData)

// =======================================================================
// Aside: Copying objects and arrays

// =======================================================================
// Like a tweet part 6: render the increment

function handleLikeClick(tweetId){ 
    const targetTweetObj = tweetsData.filter(function(tweet){
        return tweet.uuid === tweetId
    })[0]
    targetTweetObj.likes++
    render()
}

// =======================================================================
// Unlike a tweet

/*
Challenge:
1. When a tweet is liked, it's 'isLiked' property
   should be set to true.
2. When a tweet is unliked, it's 'isLiked' property
   should be set to false and its 'likes' count
   should be decremented.
*/  

function handleLikeClick(tweetId){ 
    const targetTweetObj = tweetsData.filter(function(tweet){
        return tweet.uuid === tweetId
    })[0]
    
    if (targetTweetObj.isLiked === false) {
        targetTweetObj.isLiked = true
        targetTweetObj.likes++   
    } else {
        targetTweetObj.isLiked = false
        targetTweetObj.likes--   
    }
    render()
}

// =======================================================================
// Flip a boolean

/*
Challenge:
1. Delete the two lines of code marked below and
   replace them with just one line of code outside 
   of the if else.
   Hint: Google the logical NOT operator (!)
*/ 

if (targetTweetObj.isLiked){
    targetTweetObj.likes--
}
else{
    targetTweetObj.likes++ 
}
targetTweetObj.isLiked = !targetTweetObj.isLiked

// =======================================================================
// Retweet a tweet

/*
Challenge:
1. Make this eventListener call "handleRetweetClick" 
   when the retweet icon is clicked, passing in the
   uuid from that tweet.  
*/

/*
Challenge:
2. Find the retweeted tweet's object in tweetsData 
   and save it to a const.
3. Increment or decrement the retweet count of the 
   tweet and flip its isRetweeted boolean.
4. Call the render function.  
*/   

function handleRetweetClick(tweetId){
    const targetTweetObj = tweetsData.filter(tweet => tweet.uuid === tweetId)[0]

    if (targetTweetObj.isRetweeted){
        targetTweetObj.retweets--
    }   else {
        targetTweetObj.retweets++
    }
    targetTweetObj.isRetweeted = !targetTweetObj.isRetweeted
    render()
}

// =======================================================================
// Aside: Conditionally render CSS class

// Giving elements different clases under different conditions


// =======================================================================
// Color the icons

/*
Challenge:
1. Use an if statement to set the value of 
   'likeIconClass' to the string 'liked' 
   if the tweet has been liked. 
2. In the like icon tag, add 'likeIconClass' 
   to the list of classes.
*/  

/*
Challenge:
1. Use an if statement to set the value of 
   'retweetIconClass' to the string 
   'retweeted' if the tweet has been retweeted. 
2. In the retweet icon tag, add 'retweetIconClass' 
   to the list of classes.
*/

// =======================================================================
// Replies 1: get uuids of tweets with replies

    /*
Challenge:
1. Use an if statement to check if a tweet has replies.
2. If it does, log out the uuid for that tweet.
*/

// =======================================================================
// Replies 2: HTML string for replies and add to parent div

/*
Challenge:
1. If a tweet has replies, iterate through the replies
   and wrap each one in the HTML template provided below. 
   Make sure to replace words in UPPERCASE with data from 
   the tweet. On each iteration, add this HTML to repliesHtml.
   
<div class="tweet-reply">
    <div class="tweet-inner">
        <img src="PROFILE PIC" class="profile-pic">
            <div>
                <p class="handle">HANDLE</p>
                <p class="tweet-text">TWEET TEXT</p>
            </div>
        </div>
</div>
*/

if (tweet.replies.length > 0) {
    tweet.replies.forEach((reply) => {
        repliesHtml += `<div class="tweet-reply">
        <div class="tweet-inner">
            <img src="${reply.profilePic}" class="profile-pic">
                <div>
                    <p class="handle">${reply.handle}</p>
                    <p class="tweet-text">${reply.tweetText}</p>
                </div>
            </div>
    </div>`
    })
}

// =======================================================================
// Replies 3: toggle hidden

/*
Challenge:
1. Use the uuid stored in 'replyId' to take control 
   of the div containing that tweet’s replies. 
   (Check the HTML string below to remind yourself 
   what id that div will have.)  
2. Toggle the CSS class "hidden" on that div. 
*/ 

function handleReplyClick(replyId){ 
    document.getElementById(`replies-${replyId}`).classList.toggle('hidden')  
}

// =======================================================================
// Refactor the tweet btn

/*
Challenge:
1. Add an else if so that if the Tweet button
   is clicked, handleTweetBtnClick is called.
*/ 

else if (e.target === tweetBtn) {
    handleTweetBtnClick()
}

// =======================================================================
// Aside: UUID

import { v4 as uuidv4 } from 'https://jspm.dev/uuid';
console.log(uuidv4()) // 1dbea420-b8fd-4839-88a3-51f3a24573fb

// =======================================================================
// Build the new Tweet object

/*
Challenge:
2. When the Tweet button is clicked, log out an object
   for a new tweet. Make sure you include the text of 
   the tweet (how can you get that?) and a unique 
   identifier using uuidjs.
   
   The handle @Scrimba (or whatever you prefer) and 
   the profile pic scrimbalogo.png can be hard-coded.
*/ 

console.log({
    handle: `@Scrimba`,
    profilePic: `images/scrimbalogo.png`,
    likes: 0,
    retweets: 0,
    tweetText: `tweetInput.value,
    replies: [],
    isLiked: false,
    isRetweeted: false,
    uuid: uuidv4()})
    

// =======================================================================
// Render a new tweet

/*
Challenge:
1. Add the new tweet object to 'tweetsData'
   and make it render at the top of the feed. 
*/ 

function handleTweetBtnClick(){
    tweetsData.unshift ({
        handle: `@Scrimba`,
        profilePic: `images/scrimbalogo.png`,
        likes: 0,
        retweets: 0,
        tweetText: tweetInput.value,
        replies: [],
        isLiked: false,
        isRetweeted: false,
        uuid: uuidv4()
    })
    render()
}

// =======================================================================
// UX fixes

/*
Challenge:
1. No empty tweets!
2. Clear the textarea after tweeting!
*/

function handleTweetBtnClick(){
    if (!tweetInput.value) {
        return
    } else {
        tweetsData.unshift({
            handle: `@Scrimba`,
            profilePic: `images/scrimbalogo.png`,
            likes: 0,
            retweets: 0,
            tweetText: tweetInput.value,
            replies: [],
            isLiked: false,
            isRetweeted: false,
            uuid: uuidv4()
        })  
    }
    tweetInput.value = ''
    render() 
}

// ===============================

// Instructor Solution

function handleTweetBtnClick(){
/*
Challenge:
1. No empty tweets!
2. Clear the textarea after tweeting!
*/
    if(tweetInput.value){
        tweetsData.unshift({
            handle: `@Scrimba`,
            profilePic: `images/scrimbalogo.png`,
            likes: 0,
            retweets: 0,
            tweetText: tweetInput.value,
            replies: [],
            isLiked: false,
            isRetweeted: false,
            uuid: uuidv4()
        })
    render()
    tweetInput.value = ''
    }

}

// =======================================================================
// Recap

// Add the ability to reply to a specific tweet
// Save tweets, likes and retweets to localStorage
// Allow a user to delete a tweet
// Your own idea, dark / light

// =======================================================================
// Essential JS Mini Projects
// =======================================================================

// =======================================================================
// Object Destructing

// Extract properties from objects
// Object Destructuring enables us to extract properties from objects into
// distinct variables.

const favouriteFilm = {
    title: "Top Gun",
    year: "1986",
    genre: "action",
    star: "Tom Cruise",
    director: "Tony Scott"
} 

const {title, year, genre, star, director} = favouriteFilm

// =======================================================================
// Object Destructuring Challenge

    const dreamHoliday = {
    destination: 'Asia',
    activity: 'travel around all countries',
    accommodation: 'Hostels',
    companion: 'single, or partner.'
}

const {destination, activity, accommodation, companion} = dreamHoliday

console.log(`I would love to go to ${destination}, and ${activity}. I would stay in ${accommodation} and probably travel ${companion}`)

// =======================================================================
// The .map() Method

// Iterating over arrays
// The map method gives you a new array

const distanceWalkedMilesArr = [140, 153, 161, 153, 128, 148]

const conversionFactorMilesToKm = 1.6

function convertMilesToKms() {
    return distanceWalkedMilesArr.map(function (distanceMiles, index) {
        return `Month ${index}: ${distanceMiles * conversionFactorMilesToKm}KM`
    })
}

console.log(convertMilesToKms())

// ['Month 0: 224KM', 'Month 1: 244.8KM', 'Month 2: 257.6KM', 'Month 3: 244.8KM', 'Month 4: 204.8KM', 'Month 5: 236.8KM']

// =======================================================================
// The .map() Method Challenge

/*
Challenge
1. Refactor the code below to use .map() 
   instead of the for loop.
   ⚠️ Don't worry about the commas for now.
*/

const playlistHtml = []

for (let i = 0; i < playlistArr.length; i++) {
    playlistHtml.push(
`<section class="card">
    <div class="card-start">
        <img src="/images/${playlistArr[i].albumArt}">
    </div>
        <div class="card-mid">
            <h4 class="card-title">${playlistArr[i].title}</h4>
            <p class="card-artist">${playlistArr[i].artist}</p>
        </div>
    <div class="card-end">
        <p class="card-menu">...</p>
    </div>
</section>
    `
    )
}

// Solution

const playlistHtml = playlistArr.map((element) => {
    return `<section class="card">
    <div class="card-start">
        <img src="/images/${element.albumArt}">
    </div>
        <div class="card-mid">
            <h4 class="card-title">${element.title}</h4>
            <p class="card-artist">${element.artist}</p>
        </div>
    <div class="card-end">
        <p class="card-menu">...</p>
    </div>
</section>
    `
}).join('')

document.getElementById('container').innerHTML = playlistHtml

// =======================================================================
// The .join() Method

// Strings from arrays
// Concatenates elements of array into a string
// You choose how the elements are sepeated
// Returns the new string

// =======================================================================
// .map() vs .forEach()

// ForEach does not return a new array, whilst map does not.
// USe .map() if you need to make use of the new array it returns.
// Use .forEach() if you don't need to create a new array.

// =======================================================================
// For loop Break and Continue

// Only use the break keyword when the data is formatted chronologically.

const expensesAndRefunds = [
    { description: 'Groceries', amount: 50, year: 2023 },
    { description: 'Electronics', amount: -30, year: 2023 },
    { description: 'Dinner', amount: 40, year: 2023 },
    { description: 'Clothing', amount: 60, year: 2023 },
    { description: 'Entertainment', amount: 25, year: 2023 },
    { description: 'Rent', amount: -500, year: 2024 },
    { description: 'Utilities', amount: 100, year: 2024 },
    { description: 'Books', amount: 20, year: 2024 },
    { description: 'Fitness', amount: 30, year: 2024 },
    { description: 'Gifts', amount: 15, year: 2024 },
]

let totalSpent = 0
const cutoffDate = 2024

for (let i = 0; i < expensesAndRefunds.length; i++) {
    const currentExpenseOrRefund = expensesAndRefunds[i]
    
    if (currentExpenseOrRefund.year >= cutoffDate) {
        console.log(`Reached cutoff date, exiting loop`)
        break   
    }
    
    if (currentExpenseOrRefund.amount < 0) {
        console.log(`Skipping ${currentExpenseOrRefund.description} due to refund`)
        continue
    } 
    
    totalSpent += currentExpenseOrRefund.amount 
}


console.log(`Total amount spent on items in 2023: $${totalSpent}`)

// Skipping Electronics due to refund
// Reached cutoff date, exiting loop
// Total amount spent on items in 2023: $175

// =======================================================================
// The dangers of innerHTML

// Avoid using innerHTML with anything that a user is inputting into the
// DOM, as this can change the actual HTML structure of the site (locally)

/*
Challenge:
1. Find a way of adding an inputted film to the list 
   which does not allow malicious JavaScript to be executed.
2. Implement it. 
*/

const filmInput = document.getElementById('film-input')
const addBtn = document.getElementById('add-btn')
const filmList = document.getElementById('film-list')

addBtn.addEventListener('click', function() {
    filmList.innerHTML += `
        <div class="film-item">${filmInput.value}</div>
        `
    filmInput.value = ''
}) 

// Instructors Solution

const filmInput = document.getElementById('film-input')
const addBtn = document.getElementById('add-btn')
const filmList = document.getElementById('film-list')

addBtn.addEventListener('click', function() {
    const newFilm = document.createElement('div')
    newFilm.classList.add('film-item')
    newFilm.textContent = filmInput.value
    filmList.appendChild(newFilm)
    filmInput.value = ''
}) 

// =======================================================================
// Beyond Function Declarations 1: Function Expressions

// Function expressions are not hoisted

helloWorld() // Error

const helloWorld = () => {
    console.log('HelloWorld')
}

helloWorld // works

// =======================================================================
// Beyond Function Declarations 2: Function Expression Challenge

/*
Challenge:
    1. Convert this function declaration to a function expression.
*/

function getTheftAlert(numberOfTransactionsHour) {
    if (numberOfTransactionsHour > 5) {
        return `You have made ${numberOfTransactionsHour} transactions 
                in the past hour. We think your card might have been 
                compromised`
    }
}

// ===============================

const getTheftAlert = (numberOfTransactionsHour) => {
    if (numberOfTransactionsHour > 5) {
        return `You have made ${numberOfTransactionsHour} transactions 
                in the past hour. We think your card might have been 
                compromised`
    }
}

console.log(getTheftAlert(6))
// =======================================================================
// Aside: Arrow functions challenge

/*
Challenge
1. Refactor this function to use an arrow function.
2. Make sure you write the least code possible.
*/

const speedWarning = (speed) => `You are going at ${speed} mph!`

console.log(speedWarning(40))
// =======================================================================
// Import Export (default)

// If you are importing functions, you need to attach export default to
// the start of the function.
// on import you can also name it whatever you want, rather than the 
// actual name of the function

import filterFunction from '/searchFunction.js'

export default function getMatchingTripsArr(arr, keyword){
    return arr.filter(function(trip){
        return trip.description.toLowerCase().includes(keyword)
    })
}

// =======================================================================
// Aside: array.reduce()

// Accumulates elements in an array

const rainJanuaryByWeek = [ 10, 20, 0, 122 ]

const totalRainfallJanuary = rainJanuaryByWeek.reduce(function(total, currentElement){
    return total + currentElement
})

console.log(totalRainfallJanuary)

// =======================================================================
// Aside: array.reduce() challenge

/*
Challenge
1. Use the .reduce() method to find the total of all of the students grades.
2. Do some simple maths to log out the class average. 
*/

const grades = [75, 83, 66, 43, 55, 99, 87, 16, 89, 64, 70, 80, 94, 77, 66, 73]

const totalGrades = grades.reduce((acc, ind) => {
    return acc + ind
}, 0)


console.log(`The class average is ${Math.round(totalGrades / grades.length)}`)

// =======================================================================
// The reduce() Method with Objects

import { studentsArr } from '/studentsArr'

function calculateClassAverage(studentsArr) {
    const totalGrades = studentsArr.reduce(function(total, currentStudent){
        return total + currentStudent.grade
    }, 0)
    return totalGrades / studentsArr.length
}

console.log(calculateClassAverage(studentsArr))

// ===============================

const calculateClassAverage = (studentsArr) => {
    const totalGrades = studentsArr.reduce((acc, ind) => {
        return acc + ind.grade
    }, 0)
    return Math.round(totalGrades / studentsArr.length)
}

// =======================================================================
// The .reduce() Method with Objects Challenge

/*
Challenge:
1. Use the reduce method to calculate the total 
   cost of items which have been bought.
*/

import { itemsBoughtArr } from '/itemsBoughtArr.js'

const calculateTotalCost = (itemsBoughtArr) => {
    const total = itemsBoughtArr.reduce((acc, ind) => {
        return acc + ind.priceUSD
    }, 0)
    return total
}

console.log(calculateTotalCost(itemsBoughtArr))

// =======================================================================
// Default Parameters

import { itemsBoughtArr } from '/itemsBoughtArr.js'

function calculateTotalCost(itemsBoughtArr, discount = 0) {

    const total = itemsBoughtArr.reduce((total, currentItem) => {
        return total + currentItem.priceUSD
    }, 0
    )
    return total - discount
}

console.log(calculateTotalCost(itemsBoughtArr))

// =======================================================================
// Super Challenge Set-up

/*
SUPER CHALLENGE 💪

Render out a card for each of the properties in the propertyForSaleArr array (in the 'properties' folder). Each card should have an image, a property location, a price, a comment and the TOTAL property size in square metres (each object has an array with the size in square metres of the individual rooms).

If no array of properties is passed to getPropertyHtml, the placeholder property stored in placeholderPropertyObj (in the 'properties' folder) should be rendered instead.

This is the JS I want you to use to complete this challenge 👇
- import/export
- .map()
- .join()
- Object destructuring
- .reduce()
- Default parameters

The HTML and CSS have been done for you. 
This is the HTML template 👇. Replace everything in UPPERCASE with property data.
*/

import { placeholderPropertyObj} from '/properties/placeholderPropertyObj.js'
import { propertyForSaleArr} from '/properties/propertyForSaleArr.js'

const getPropertyHtml = (arr = [placeholderPropertyObj]) => {
    const propertyAssigment = arr.map((element) => {
        
        const {propertyLocation, priceGBP, roomsM2, comment, image} = element
        
        const squareMeters = roomsM2.reduce((acc, ind) => {
           return acc + ind 
        }, 0)
        
        return `<section class="card">
            <img src="/images/${image}">
            <div class="card-right">
                <h2>${propertyLocation}</h2>
                <h3>${priceGBP}</h3>
                <p>${comment}</p>
                <h3>${squareMeters} m&sup2;</h3>
            </div>
        </section> `
        
    }).join('')
    return propertyAssigment
}
/***** Modify 👇 by adding an argument to the function call ONLY. *****/
document.getElementById('container').innerHTML = getPropertyHtml()


// =======================================================================
// The Ternary Operator for Complex Conditionals

const exerciseTimeMins = 20

const message = exerciseTimeMins < 30 ? 'You need to try harder!' 
    : exerciseTimeMins < 60 ? 'Doing good!' 
    : 'Excellent!'

console.log(message)

// =======================================================================
// Ternary Operator Challenge

/*
Challenge 
1. Refactor the if else statement to use a ternary operator.
*/

let message = ''

let message = playerGuess === correctAnswer ? 'Correct' : 'Wrong!'

console.log(message)
/*
Challenge
1. Now improve the functionality of this code by 
   letting the player know if their guess was too high, 
   too low, or exactly right.
*/

// let message = playerGuess > correctAnswer ? 'too high' : playerGuess < correctAnswer ? 'too low' : 'exactly right                   


// =======================================================================
// Twimba Ternanary Refactor

/*
Challenge:
1. Refactor the two lets and conditionals on 
   lines 85-95 to use ternary operators.
   ⚠️ You might need to do some research!
*/

// let likeIconClass = ''

// if (tweet.isLiked){
//     likeIconClass = 'liked'
// }

let likeIconClass = tweet.isLiked ? 'liked' : ''

// =======================================================================
// The Rest Parameter

// Catching the rest of the arguments

function setPermissionLevel(permissionLevel, ...names) {
    console.log(names)
}

setPermissionLevel('admin', 'Dave', 'Sally')

// ["Dave", "Sally"]

// ===============================

function setPermissionLevel(permissionLevel, ...names) {
    names.forEach((name) => 
    console.log(`${name} now has admin level access`))
}


// =======================================================================
// The Rest Parameter Challenge
/*
Challenge:
1. Add parameters.
2. Update the HTML template where you 
   see **NAME**.
3. Return HTML template for each label.
*/

const getLabelsHtml = (text, sender, ...name) => {
    let test = ''
    name.forEach((element) => {
        test += `<div class="label-card">
                <p>Dear ${element.name} </p>
                <p>${text}</p>
                <p>Best wishes,</p>
                <p>${sender}</p>
                </div>`
    })
    return test
}

const text = 'Thank you for all your hard work throughout the year! 🙏🎁'
const sender = 'Tom'

document.getElementById('labels-container').innerHTML = getLabelsHtml(
    text, 
    sender, 
    {name: 'Sally'}, 
    {name: 'Mike'}, 
    {name: 'Rob'}, 
    {name: 'Harriet'}
    ) 

// ===============================

// Instructors Solution

function getLabelsHtml(text, sender, ...staffObjs) {
    const labelsHtml = staffObjs.map(staffObj => 
`<div class="label-card">
    <p>Dear ${staffObj.name}</p>
    <p>${text}</p>
    <p>Best wishes,</p>
    <p>${sender}</p>
</div>`
    ).join('')
    return labelsHtml
}

const text = 'Thank you for all your hard work throughout the year! 🙏🎁'
const sender = 'Tom'

document.getElementById('labels-container').innerHTML = getLabelsHtml(
    text, 
    sender, 
    {name: 'Sally'}, 
    {name: 'Mike'}, 
    {name: 'Rob'}, 
    {name: 'Harriet'}
    ) 

// =======================================================================
// Spread Syntax (...)

// Expanding and joining arrays
// Can be used to copy an array

const lunchMenu = ['Greek Salad', 'Open Sandwich', 'Parsnip Soup', 'Flatbread and Dip']
const dinnerMenu = ['Lasagne', 'Strogonoff', 'Tagine', 'Katsu Curry']
const sweetMenu = ['Mixed Berry Ice Cream', 'Chocolate Brownie', 'Orange Cheesecake']

const eventMenu = [...lunchMenu, ...dinnerMenu, ...sweetMenu]

console.log(eventMenu)

// =======================================================================
// Spread Syntax (...) Challenge

/*
Challenge:
2. Find the highest number from the array 
   and store it in the const 'highest'. 
3. Find the lowest number from the array 
   and store it in the const 'lowest'. 
*/

/*
Challenge:
1. Call this function with one array holding 
   all of the data from the 4 arrays above.
*/

const averageSharePriceByMonthQ1 = [109.6, 103.3, 89.4]
const averageSharePriceByMonthQ2 = [109.3, 126.1, 103.3]
const averageSharePriceByMonthQ3 = [120.8, 102.3, 106.8]
const averageSharePriceByMonthQ4 = [110.9, 119.8, 113.7]

const findPriceExtremes = (arr) => {
    const highest = Math.max(...arr)
    const lowest = Math.min(...arr)
    console.log(`The highest average share price was ${highest}`)
    console.log(`The lowest average share price was ${lowest}`)
}

findPriceExtremes([...averageSharePriceByMonthQ1, ...averageSharePriceByMonthQ2, ...averageSharePriceByMonthQ3, ...averageSharePriceByMonthQ4])

// =======================================================================
// Short-circuiting with OR (||)

// More concise code for conditional logic.

const jobHunter = {
    name: 'Tom Chant',
    // jobSearchArea: 'Europe',
}

const workLocation = jobHunter.jobSearchArea || 'Worldwide'
console.log(`${jobHunter.name}s work location is ${workLocation}`)

// Tom Chant's work location is Europe

// =======================================================================
// Short-circuiting with OR (||) Challenge

/*
Challenge:
1. Make it so that if the jobHunter object does not have 
   a name property, the username is used instead.
*/

const jobHunter = {
    name: 'Tom Chant',
    username: 'TChant44',
    workLocation: 'Europe',
    }
    
// Complete this line of code 👇
const jobHunterName = jobHunter.name || jobHunter.username

console.log(`Hey ${jobHunterName}!`)

// =======================================================================
// Short-circuiting with AND (&&)

// If the code on the left hand side of the && operator is truthy, then
// the code on the right hand side will execute

const user = {
    userName: 'Tom',
    role: 'admin',
}

user.role === 'admin' && console.log('Dashboard Displayed')

// Dashboard Displayed

// =======================================================================
// Short-circuiting with AND (&&) Challenge

/*
Challenge:
1. If the passcode passed into authenticationCheck 
   exists in swissBankPassCodesArr, authenticationCheck 
   should log out accountBalanceUsd. 
   
   If the passcode does not exist in swissBankPassCodesArr 
   then authenticationCheck need not do anything.
   
⚠️ Make sure you short-circuit with &&
   hint.md for help!
*/

const accountBalanceUsd = '$45,000,000,000 🤑💰'
const swissBankPassCodesArr = [1234,5678,9876,3434]

const authenticationCheck = (passCode) => {
   swissBankPassCodesArr.includes(passCode) && console.log(accountBalanceUsd)
}

authenticationCheck(3434)

// =======================================================================
// Switch Statements (new)

// Select one of many code blocks to execute

function selectItem(item) {
    let price = 0
    
    switch(item) {
        case 'coffee':
            price = 2
            break    
    }
    return `You selected ${item}. That will be $${price}`
}

console.log(selectItem('biscuits'))

/*
Challenge:
1.  Add the remaining price list items as cases.
*/   

function selectItem(item) {
    let price = 0
/*
Challenge:
1.  Add the remaining price list items as cases.
*/    
    switch(item) {
        case 'coffee':
            price = 2
            break   
        case 'Sandwiches':
            price = 5
            break   
        case 'Salad':
            price = 4
            break   
        case 'Lemon Cake':
            price = 3
            break
        default:  
            return 'we do not sell that item'

    }
    return `You selected ${item}. That will be $${price}`
}

console.log(selectItem('biscuits'))

// =======================================================================
// Constructors: Date()

const dateSnapshot = new Date()

console.log(dateSnapshot)

// 2023-07-27T12:50:43.463Z

console.log(dateSnapshot.toString())

// Thu Jul 27 2023 13:55:21 GMT+0100 (British Summer Time)

/*
Challenge:
1. Search online to find out how we can get just the year 
   using the Date() constructor and update the console.log above.
*/

console.log(`Copyright ${dateSnapshot.getFullYear()}`)


// =======================================================================
// The Error() Constructor

function checkUsername(userName) {
    if (userName) {
        console.log(userName)
    } else {
        console.log(new Error('No username provided'))
    }
}

checkUsername()

// Error: No username provided.

// ===============================
// Throw
// Stops any code afterwards from being executed. 

function checkUsername(userName) {
    if (userName) {
        console.log(userName)
    } else {
        throw new Error('No username provided')
        console.log('I will never execute')
    }
}

checkUsername()

// ! Error: no username provided

// =======================================================================
// Objects with Methods and 'this'

// functions within objects are called methods.

const gamer = {
    name: 'Dave',
    score: 0,
    incrementScore: function(){
        gamer.score++   
    }
}

console.log(gamer)
gamer.incrementScore()
console.log(gamer)

// {name: 'Dave', score: 0, incrementScore: ƒ()}
// {name: 'Dave', score: 1, incrementScore: ƒ()}

// ===============================
// Using this
// You cannot use arrow functions with objects / this

const gamer = {
    name: 'Dave',
    score: 0,
    incrementScore: function(){
        this.score++   
    }
}

console.log(gamer)
gamer.incrementScore()
console.log(gamer)

// {name: 'Dave', score: 0, incrementScore: ƒ()}
// {name: 'Dave', score: 1, incrementScore: ƒ()}

// =======================================================================
// Objects to Constructor Functions

// Constructing your own objects

function Gamer(name, score){
    this.name = name
    this.score = score
    this.incrementScore = function(){
        this.score++  
    }
}

const dave = new Gamer('Dave', 0)
dave.incrementScore()
console.log(dave)

// Gamer {name: 'Dave', score: 1}

// ===============================

// Hard coding properties

function Gamer(name){
    this.name = name
    this.score = 0
    this.incrementScore = function(){
        this.score++  
    }
}

const dave = new Gamer('Dave')
const sarah = new Gamer('Sarah')
const kerry = new Gamer('Kerry')
dave.incrementScore()
sarah.incrementScore()
sarah.incrementScore()
kerry.incrementScore()
kerry.incrementScore()
kerry.incrementScore()
console.log(dave)
console.log(sarah)
console.log(kerry)

// Gamer {name: 'Dave', score: 1}
// Gamer {name: 'Sarah', score: 2}
// Gamer {name: 'Kerry', score: 3}

// =======================================================================
// Constructor Function Challenge

/*
Challenge:
1. Create a constructor function called 'Character'.
2. Give it 'name' and 'collectedItemsArr' properties. 
    - 'name' should hold the character’s name.
	- 'collectedItemsArr' should hold an array of items. 
       Initialise it to an empty array.
3. Create an 'addItem' method which takes in an item as 
   a parameter and adds it to 'collectedItemsArr'.
4. The addItem method should log out a sentence like 
   `Merlin now has: wand, map, potion`.
5. Check it’s working by creating several instances of 
   Character and adding items to their arrays.
*/

function Character(name){
    this.name = name
    this.collectedItemsArr = []
    this.addItem = function(item){
        this.collectedItemsArr.push(item)
            console.log(`${this.name} now has: ${this.collectedItemsArr.join(', ')}`)
    }
}

const merlin = new Character('Merlin')
merlin.addItem('wand')
merlin.addItem('arrow')
merlin.addItem('bow')

// =======================================================================
// Constructor Functions to Classes

// A class is a special kind of function that works as a tempplate for
// creating objects.
// Construtor functions can be hoiste, whereas Classes cannot.

class Gamer {
    constructor(name, score) {
        this.name = name
        this.score = score
    }
    
    incrementScore() {
        this.score++  
    }
}

const dave = new Gamer('Dave', 0)
dave.incrementScore()
console.log(dave)

// Gamer {name: 'Dave', score: 1}

// =======================================================================
// Constructor Functions to Classes Challenge

/*
Challenge:
Rebuild this constructor function as a class.
*/

class Character {
    constructor(name) {
        this.name = name
        this.collectedItemsArr = []
    }
    
    addItem(item) {
        this.collectedItemsArr.push(item)
        console.log(`${this.name} now has: ${this.collectedItemsArr.join(', ')}`)
    }
}

const wizard = new Character('Merlin')
wizard.addItem('a wand')


// =======================================================================
// Debugging: Errors

// =======================================================================
// Debugging: try...catch

function addTouristSurcharge(payment) {
    try {
        if (typeof payment === 'number') {
            console.log(payment + 10)
        } else {
            throw new ReferenceError('payment is not a number')
        }
    } catch (err) {
        console.error('Error: ' + err)
    }
}

addTouristSurcharge('60')

// ===============================

// More advancved debugging options

// Breakpoints
// Run code until a breakpoint, allowing you to see what happens up to
// that point

// Watchers
// Monitor the values of variables or expressions over time as you step
// through your code

// =======================================================================
// Solo Project Restaurant ordering App

// =======================================================================
// Build a Responsive Site
// =======================================================================

// =======================================================================
// Aside: Relative units and percentages

// Absolute units like pixels will always appear the same size no matter
// where you view it

// Relative units
// Relative to another value
// Dynamic flexibility
// Resize and scale

// Percentage units
// When using a percentage for width, the percentage is based on the 
// width of its parent element

// =======================================================================
// Create flexible containers with percentage units

// 90% is a common width for containers on a narrow screen.

// =======================================================================
// Controlling the width of images

/*
  Challenge:
    - Make each .feature-image fluid using a percentage
    - The images should display proportionally on the same line, 
      each taking up about half of the space
*/

.feature-image {
    width: 48.8%;
    border-radius: 4.6px;
}

// =======================================================================
// Set width constraints with max-width

/*
  Challenge:
   1. Google "how to set the maximum width of an element"  
   2. Apply a maximum width of 800px to .container
*/

.container {
    max-width: 800px;
    width: 90%;
    margin: 0 auto;
}

/*
  Challenge:
   1. Apply a maximum width to .main-image
   2. Make the image slightly narrower than 
     its container and center it on the page 
*/

.main-image {
    width: 100%;
    max-width: 640px;
    display: block;
    margin-bottom: 32px;
    margin: 0 auto 32px;
}

// =======================================================================
// Aside: The em unit

// 1em is equal to the parent elements font-size value
// default font size is 16px, unless explicitly changed in the body

// =======================================================================
// Aside: Margin and padding with em

// Margin and padding values in em are relative to the element's current
// font-size value

// If the element does not have a font size, then it will be inhereited
// from the parent element, or from the default font size of 16px.

// =======================================================================
// Set margin and padding with em

// REMEMBER: if font not defined, inhereited from body font size.

// =======================================================================
// Aside: The compounding issue with em

// AN em value can compound from one element to another.

// =======================================================================
// Aside: The rem unit

// A rem unit is always relative to the root <html> element
// BY default, a rem value will be a multiple of 16px

// =======================================================================
// Text line height

body {
    color: #2b283a;
    font-family: 'Roboto', sans-serif;
    margin: 0;
    line-height: 2;
}

// The line heigh inherits from the default browser line height of 16px
// So setting to 2, will equal 2 times the browers line height (32px)

// ==============================

// However, individual elements line height inherit's from the elements
// font size.

// Always set line-height at approximately 1.5 times the font size.

p {
    font-size: 1.125rem;
    line-height: 1.5;
}

// =======================================================================
// How do you decide which unit to use?

// Font sizes
// Use Rems

// Margins & padding
// Use em

// Line height
// Unitless

// Width
// percentages

// Max-width
// use px

// =======================================================================
// Aside: Media queries

/*
 Challenge: 
   - Create a media query that targets a minimum
     browser width of 500px
   - In the media query, update the body's color and background
*/

@media (min-width: 500px) {
    body {
        color: blue;
        background-color: #faf9f6;
    }
}

@media (min-width: 500px) and (max-width: 799px) {
    body {
        color: aliceblue;
        background-color: cornflowerblue;
    }
    
    h1 {
        font-size: 3.5rem;
    }
}


// =======================================================================
// Add media queries to your site

/*
  Challenge:
    1. Create a media query that targets a browser width
       of 480px or wider
    2. Within the media query, select .section-two-image-container
       and add the flexbox property to display the images on the same row
    3. Inside the media query, select .feature-image and 
       add the fluid width for wider screens only
*/

@media (min-width: 480px) {
    .section-two-image-container {
        flex-direction: row;
    }
    
    .feature-image {
    width: 48.8%;
}

}

// =======================================================================
// Think "mobile-first"

// Mobile-first: optimizing the experience for mobile users and putting
// their needs first.

// Write your base CSS with mobile devices in mind first
// Then adjust for larger screens.

// Simpler, more optmized CSS

// =======================================================================
// Common Breakpoints

// 480px width is for phones
// 768px width is for tablets
// 1024px is for smaller computer screens / laptops
// 1280px is for desktop.

// =======================================================================
// Add new breakpoint

// Mobile first also means content first
// Display the content users need on mobile devices and nothing extra

/*
  Challenge:
    1. Create a new media query that targets a browser width of 768px or wider. 
    2. Within the media query, select the header, section, and footer elements
       and apply a top and bottom padding of 2.875em.
    3. Adjust the initial padding for the header, section and footer elements.
       Set a top and bottom padding value in em equal to 20px.
*/

@media (min-width: 768px) {
    header, 
    section, 
    footer {
    padding: 2.875em 0;
    } 
}

header, 
section, 
footer {
    padding: 1.25em 0;
}

// =======================================================================
// Adapt the buttons for smaller screens

// On mobile devices buttons are usually styled as block level elements

/*
  Challenge:
    - On narrow screens, each button should take up the full width
      of their container 
    - The buttons should display on the same row only at the 768px breakpoint
*/

.btn {
    font-size: 1.125rem;
    text-align: center;
    font-weight: 500;
    text-decoration: none;
    display: block;
    padding: 0.5em 1em;
    margin-bottom: 1em;
    border-radius: 4.6px;
}

@media (min-width: 768px) {
    header,
    section,
    footer {
        padding: 2.875em 0;        
    }
    
    .btn {
        display: inline-block;
        margin-right: 0.5em;
    }
}

// =======================================================================
// Adjust font size for smaller screens

/*
  Challenge: Responsive text
    - h2:
        - Initial size: rem value equal to 22px
        - At 768px: increase to 1.75rem
    - .subheading:
        - Initial size: suitable for smaller screens
        - At 768px: increase to 1.25rem  
    - Paragraphs:
        - At 768px: increase to rem value equal to 18px
*/

// =======================================================================
// Create a mobile-first navigation

// nav link settings
// font size: relative value equal to 18px
// padding: relative top and bottom padding values

nav a {
    color: #fff;
    text-decoration: none;
    font-size: 1.125rem;
    padding: 0.85em 0;
    display: block;
}

// =======================================================================
// Challenge: Narrow screens

/* ----- NAVIGATION ----- */

/*
  Challenge: Write initial nav styles
    1. Center-align the header content
    2. Apply a top margin to the nav element to create space
       between the nav and subheading
    3. Make sure that the center alignment, the nav’s top margin,
       and dotted borders between links display only on viewport widths
       narrower than 768px
*/

@media (max-width: 767px) {
    
    header {
        text-align: center;
    }
    
    header nav {
    text-align: center;
    margin-top: 1em;
    }
    
    li:not(:last-child) {
    border-bottom: 1px dotted #a190b6;
    }
}

// =======================================================================
// Challenge: Wider screens

.nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

nav ul {
display: flex;
gap: 1rem; /* spacing between nav items */
list-style: none;
margin: 0;
padding: 0;
}


// =======================================================================
// Solution: Wider screens

// Instructor solution

header .container,
nav ul {
    display: flex;
}

header .container {
    justify-content: space-between;
}

// =======================================================================
// The viewport meta tag

<meta name="viewport" content="width=device-width, initial-scale=1" />

// =======================================================================
// Aside: Create a flexbox image grid

.image-container {
    max-width: 800px;
    line-height: 0;
    margin: 0 auto;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
}

.pet-item {
    flex-basis: 220px;
    flex-grow: 1;
    flex: 1 220px; // shorthand
}

img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

// =======================================================================
// Wrap the featured items with flexbox

/*
  Challenge: Wrap the feature-item divs with flexbox
    1. Each .feature-item should grow from an initial main size of 220px
    2. Allow the items inside .section-two-image-container to
       wrap onto multiple lines
    3. Apply a gap between each .feature-item
*/

.section-two-image-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
}

.feature-item {
    flex: 1 220px;
}

// =======================================================================
// Build a Product Splash Page
// =======================================================================

// =======================================================================
// Style the intro container

/* 
  Challenge: Style the .intro section
    - Convert into a flex container; 
      display its content in a column
    - Set a minimum height of 250px
    - Center-align its content
    - Vertically center the content
    - Remove the space around the edges of the page
*/

.intro { 
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 250px;
    text-align: center;
    color: #fff;
    background-color: #9480e4;
}

// =======================================================================
// Style main content

/* 
  Challenge: Style the main content
    - Use flexbox to horizontally center all items inside 
      .main-content. The <p> text should remain left-aligned.
    - Use em to give .main-content a top padding equal to 40px
      and a left and right padding equal to 32px.
    - Set the width of .img-main to 120px and display it as a rounded image.
*/

.main-content{
    display: flex;
    flex-direction: column;
    text-align: center;
    padding-top: 2.5em;
    padding-left: 2em;
    padding-right: 2em;
}

.main-content p {
    text-align: left;
}

.img-main{
    width: 120px;
    margin: 0 auto;
    border-radius: 50%;
}

// ==============================

// Instructor Solution

.main-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    
    padding-top: 2.5em; /* 40 / 16 = 2.5 */
    padding-left: 2em; /* 32 / 16 = 2 */
    padding-right: 2em;
}

.img-main {
    width: 120px;
    border-radius: 50%;
}

// =======================================================================
// Style the text

/* 
  Challenge: Set the initial styles for text
    - Set the h1 to a relative font-size value equal to 40px
    - Apply a text shadow to the h1 using the color value #816fca
*/

h1 {
    font-weight: 400;
    font-size: 2.5rem;
    text-shadow: 0px 2px #816fca;
}

/* 
  Challenge: Set the initial styles for text
    - Set the h2 to a relative font-size value equal to 36px
    - Give the h2 a top and bottom margin value in em equal to 6px
*/

h2 {
    font-size: 2.25rem;
    margin: 0.1875em 0;
}

/* 
  Challenge: Set the initial styles for text
    - Set the paragraph to a relative font-size value equal to 18px
    - Set the p line-height to 1.35 times its font-size value
    - Give .subheading a bottom margin in em equal to half its font-size value
*/

p {
    font-size: 1.125rem;
    line-height: 1.35;
}

.subheading {
    color: #575757;
    font-weight: 900;
    margin-bottom: 0.5625em;
}

// =======================================================================
// Aside: Transform test

.headline {
    line-height: 1.3;
    text-transform: capitalize;
}

// =======================================================================
// Uppercase text

/* 
  Challenge: 
    - Set .beta-text and .subheading to appear in all-uppercase
*/

.beta-text,
.subheading {
    text-transform: uppercase;
} 

// =======================================================================
// Add a breakpoint for wider screens

/* 
  Challenge: Adjust the layout for wider screens
    - Add a media query that targets a browser width of 576px or wider
    - Within the media query, convert the parent element of .intro and 
      .main-content to a flex container
    - Set the width .intro and .main-content to exactly
      half the total width of their parent container
*/

@media (min-width: 576px){
    body{
        display: flex;
    }
    .intro,
    .main-content{
        width: 50%;
    }
}

    .intro,
    .main-content{
        flex-basis: 50%;
        flex: 1;
    }

// =======================================================================
// Aside: Viewport units

//Viewport units
// vh - viewport height
// vw - viewport width

// 1vh is equal to 1% of the viewport height
// 1 vw is equal to 1% of the viewport width

nav {
    width: 175px;
    min-height: 100vh;
    background: #3d5a80;
}

.headline {
    font-size: 6vw;
    text-transform: capitalize;
    line-height: 1.3;
    margin-top: 0;
}

// =======================================================================
// Viewport sized intro container

/* 
  Challenge:
    - Expand the height of .intro so that it takes up
      the full height of the browser window
*/

.intro{
    min-height: 100vh;
}

.main-content{
    justify-content: center;
    padding-top: 0;
}

// =======================================================================
// Adjust content for wider screens

/* 
  Challenge: Adjust text for wider screens
    - In the media query, increase the h1 font-size to
      a rem value equal to 52px
    - Increase the h2 font-size to a rem value equal to 42px
    - Increase the font-size of .beta-text to a 
      rem value equal to 20px
*/

h1 {
    font-size: 3.25rem;
}

h2 {
    font-size: 2.625rem;
}

.beta-text {
    font-size: 1.25rem;
}

// Setting font-size of h1 to a viewport unit

h1 {
    font-size: 5.5vw;
}

// =======================================================================
// Apply a full background image

/* 
  Challenge: Apply a full background image
    - Set the background of .intro to the image `intro-bg.png`
    - The background image should scale to fill the entire
      width and height of .intro while preserving its ratio
*/

.intro { 
    background: #9480e4 url("images/intro-bg.png");
    background-size: cover;
    justify-content: center;
    min-height: 250px;
    text-align: center;
    color: #fff;
}

// =======================================================================
// Style the form inputs

/* 
  Challenge: Style the form inputs
    - Display each input on a separate line so they
      expand to the full width of their container
    - Use a bottom margin to create space between the input elements
    - Apply a padding in em that's equal to half the input's
      font-size to all 4 sides
*/

input{
    width: 100%;
    margin-bottom: .5em;
    padding: .5em;
}

// =======================================================================
// Style the focus state

/* 
  Challenge: Style the form inputs
    - Give the inputs a solid 2px border using the value #d1d5db
    - Round the corners of the input fields by 5px
    - On focus, update an input’s border color to #8a71ec
      and background color to #e6e8ec
*/

input {
    font-family: inherit;
    width: 100%;
    padding: 0.5em;
    margin-bottom: 0.75em;
    border: solid 2px #d1d5db;
    border-radius: 5px;
}

input:focus {
    border-color: #8a71ec;
    background-color: #e6e8ec;
}

// =======================================================================
// Style the submit button

/* 
  Challenge: Style the submit button
    - The button should have the same font-family, width
      and border-radius of the input elements
    - Use the .btn selector to set the custom button styles;
      use the slide as a guide
    - Button colors:
      - Background: #8a71ec
      - Background on hover: #b7a7f6
*/

span {
    border-top: 5px solid;
}

.btn{
    font-family: inherit;
    letter-spacing: .1rem;
    text-transform: uppercase;
    font-weight: 600;
    width: 100%;
    border: none;
    border-radius: 5px;
    Background: #8a71ec;
    color: whitesmoke;
    padding: 0.75em;
    margin-top: 1em;
}

.btn:hover{
    background-color: #b7a7f6;
}

// =======================================================================
// Aside: Reordering flex items

// order values
// -1 display first
// 1 display last

// =======================================================================
// Adjust visual order of the intro text

/* 
  Challenge: 
    Adjust the visual order of .top-text and re-distribute
    the space inside .intro: 
      - Display .top-text above the h1 and align it to 
        the top edge of the .intro section
      - Evenly distribute the content inside .intro
      - The top border of .top-text should match the width of the text
*/

<p class="top-text"><span>Powered by Scrimba</span></p>

span {
      border-top: 5px solid;  
}

.top-text {
    order: -1; ///
    font-size: 0.875rem;
    font-weight: 900;
    margin: 0; ///
    padding-top: 0.25em;
}

.intro,
.main-content {
    display: flex;
    flex-direction: column; 
    justify-content: space-between; ///
    padding-left: 2em;
    padding-right: 2em;   
}

// ==============================

// Instructor Solution

.top-text {
    font-size: 0.875rem;
    font-weight: 900;
    padding-top: 0.25em;
    border-top: 5px solid;
    order: -1;
    margin: 0 auto;
}

// =======================================================================
// Aside: Control the size of elements with box-sizing

// box-sizing: border-box;

// Alters the total size of the border-box to make sure it fits the dimensions
// initially set in the width and height.

*, *::before, *::after {
    box-sizing: border-box;    
}

// =======================================================================
// Apply box-sizing to the page

*, *::before, *::after {
    box-sizing: border-box;    
}

// =======================================================================
// Build a responsive layout with CSS Grid
// =======================================================================

// Intro

// It's 2 dimensions, with precise positioning control
// Source order independence.

// =======================================================================
// Aside: Grid Columns and Gap

// Setting display grid:
// Margins no longer collapse
// Elements in a grid container become grid items
// Grid items fall into place on the grid

.grid-container {
    display: grid;
    grid-template-columns: 5em 10em;
    /* row-gap: .3em;
    column-gap: .6em; */
    gap: .5em;
    border: 2px solid black;
}

// =======================================================================
// Aside: fr units

// 'fr' is short for fraction, and the fr unit represents a fraction of
// the available space in the grid

.grid-container {
    display: grid;
    gap: .5em;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    border: 2px solid black;
} 

// =======================================================================
// The Mobile Layout

/* 
Challenge:
    1. Set up the "main" element as a grid container. 
    2. Specify a template of one column with 1fr width.
    3. Place 1em of space between each grid item. 
*/

main {
    display: grid;
    gap: 1em;
    grid-template-columns: 1fr;
}

// =======================================================================
// Aside: Grid rows and implicit grid

// Shorthand fro templates and rows

.grid-container {
    border: 2px solid black;
    display: grid;
    /* grid-template-columns: 1fr 1fr;
    grid-template-rows: 5em 5em; */
    grid-template: 5em 5em / 1fr 1fr;
    gap: .5em;
    /* align-items: center; */
}

// =======================================================================
// Aside: Span

.grid-container {
    display: grid;
    grid-template: 1fr 3fr 1fr / 1fr 2fr;
}

.grid-item {
    padding: .5em;
    font-size: 2em;
    color: black;
    display: flex;
    align-items: center;
    justify-content: center;
}
    
header {
    background-color: palegoldenrod;
    grid-column: span 2;
}
nav {
    background-color: lightcoral;
}
main {
    background-color: lightgreen;
}
footer {
    background-color: gold;
    grid-column: span 2;
}

/* 
Challenge:
Change the span counts we are using on these 
selectors 👇 to fix this layout. 
You will also need to add some spans for rows. 
Think about how you do that!
 */

.grid-container {
    display: grid;
    grid-template: 1fr 1fr 1fr 1fr 1fr / 1fr 1fr 1fr;
}

header {
    background-color: palegoldenrod;
    grid-column: span 3;
}
nav {
    background-color: lightcoral;
    grid-row: span 3;
}
main {
    background-color: lightgreen;
    grid-row: span 3;
    grid-column: span 2;
}
footer {
    background-color: gold;
    grid-column: span 3;
}

// =======================================================================
// Tablet view with span

/*
Challenge:
    1. Make our layout look like the screenshot. 
    (📝 Try to write the least CSS possible.)  
*/

main {
    display: grid;
    grid-template: 1fr 1fr 1fr 1fr / 1fr 1fr;
} 
.technology {
    grid-row: span 4;
    grid-column: span 2;
}
.nasa {
    grid-row: span 2;
    grid-column: span 1;
}
.health {
    grid-row: span 4;
    grid-column: span 2;
}  

// ==============================

// Instructor Solution

main {
    grid-template-columns: 1fr 1fr;
} 
.technology {
    grid-column: span 2;
}
.environment {   
}
.nasa {
    grid-row: span 2;
}
.physics {
}
.health {
    grid-column: span 2;
}  

// =======================================================================
// Aside: Repeat function

.grid-container {
    display: grid;
    gap: .5em;
    grid-template-columns: repeat(8, 1fr);
    /* repeat(how many times, what to repeat) */
    border: 2px solid black;
}

// =======================================================================
// Aside: grid lines

.grid-container {
    display: grid;
    grid-template: repeat(5, 1fr) / repeat(12, 1fr);
}

header {
    background-color: palegoldenrod;
    /* grid-column-start: 1;
    grid-column-end: 13; */
    grid-column: 1 / 13;
}

header {
    background-color: palegoldenrod;
    /* grid-column-start: 1;
    grid-column-end: 13; */
    grid-column: 1 / -1;
}

/* 
Challenge:
   1. Add the necessary grid-column and grid-row 
   lines to complete this layout. Only write 
   the CSS you need - let the algorithm do the rest. 

 */

// =======================================================================
// Laptop view with grid lines

/*
Challenge:
    1. Create a 12 column layout. 
       (Don’t write 1fr 12 times 😡)
    2. Place the items using grid lines.
       (📝 Try to write as little CSS as possible.)  
*/

main {
    grid-template: repeat(2, 1fr) / repeat(12, 1fr);
}

.technology {
    grid-column: 1 / 6;
}

.environment {
    grid-column: 6 / 9;
}
    
.nasa {
    grid-column: 9 / 13;
}

.physics { 
    grid-column: 1 / 3;
}

.health {
    grid-column: 3 / 9;
}

// =======================================================================
// Aside: grid template areas and Dev Tools

.grid-container {
    display: grid;
    grid-template: repeat(5, 1fr) / repeat(12, 1fr);
    grid-template-areas: 
        "head head head head head head head head head head head head"
        "nav nav main main main main main main main aside aside aside"
        "nav nav main main main main main main main aside aside aside"
        "nav nav main main main main main main main aside aside aside"
        "foot foot foot foot foot foot foot foot foot foot foot foot";
}

header {
    grid-area: head;
    background-color: palegoldenrod;
}

// =======================================================================
// Convert to grid template areas

/*
Challenge 2:
    1. Use grid-template-areas to define 
       the layout at each size.
       (Keep the existing column templates.) 
*/

main {
    display: grid;
    gap: 1em;
    grid-template-columns: 1fr;
    grid-template-areas: 
    "t"
    "e"
    "n"
    "p"
    "h";
}

@media (min-width: 500px) {
    main {
        grid-template-columns: 1fr 1fr;
        grid-template-areas: 
        "t t"
        "e n"
        "p n"
        "h h"
        ;
    } 
}

@media (min-width: 870px) {
    main {
        grid-template-columns: repeat(12, 1fr);
        grid-template-areas: 
        "t t t t t t e e e n n n"
        "p p p h h h h h h n n n"
        ;
    }
}

// =======================================================================
// Aside: A responsive image grid

// grid-auto-rows
// Specify a given height value to all implicitly generated row tracks

.grid-container {
    display: grid;
    grid-gap: .5em;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-rows: 75px;
}

// auto-fit
// Fit as many columns to the grid as possible.

.grid-container {
    display: grid;
    grid-gap: .5em;
    grid-template-columns: repeat(auto-fit, 100px);
    grid-auto-rows: 75px;
}

// =======================================================================
// Aside: grid-auto-flow: dense and MinMax

// grid-auto-flow: dense
// Pack the grid items as densely as possible.

// minmax(min, max)
// Defines a size range greater than or equal to min and less then or 
// equal to max

.grid-container {
    display: grid;
    grid-gap: .5em;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-auto-rows: 75px;
    grid-auto-flow: dense;
}

// =======================================================================
// Use minmax

/*
Challenge:
    1. Make sure the last 3 columns are a minimum 
       of 70px each and a maximum of 1fr.
*/

main {
    /* grid-template-columns: repeat(12, 1fr); */
    grid-template-columns: repeat(9, 1fr), repeat(3, minmax(70px, 1fr));
    grid-template-areas: 
        "tech tech tech tech tech tech envi envi envi nasa nasa nasa"
        "phys phys phys heal heal heal heal heal heal nasa nasa nasa"
}

// =======================================================================
// The header and footer

/* 
Challenge:
    1. Get the header, main, and footer 
       into a vertical column. 
    2. Put an em of space between them 
       vertically.
    3. Put an em of space above the header, 
       below the footer, and to the left and 
       right of all three elements.  
    🤔 Have you learned any good techniques 
       for creating empty rows/columns in a grid?
    ⚠️ You do NOT need to use the 'margin' 
       property to complete this challenge.
    🛟 hint.md for help!
 */

 body {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 1em;
    grid-template-areas: 
    ". h ."
    ". m ."
    ". f ."
    ;
}

// Instructor Solutiuon

body {
    display: grid;
    grid-template-columns: 1em 1fr 1em;
    grid-template-areas: 
        ".... head ...."
        ".... main ...."
        ".... foot ....";
    gap: 1em 0;
}

.site-header {
    grid-area: head;
}

footer {
    grid-area: foot;
}

// =======================================================================
// Full project CSS
// =======================================================================

html, body {
    margin: 0;
    padding: 0;
    font-family: 'Manrope', sans-serif;
}

/* =================
    Site Layout 
   ================= */
/* 
Challenge:
    1. Get the header, main, and footer 
       into a vertical column. 
    2. Put an em of space between them 
       vertically.
    3. Put an em of space above the header, 
       below the footer, and to the left and 
       right of all three elements.  
    🤔 Have you learned any good techniques 
       for creating empty rows/columns in a grid?
    ⚠️ You do NOT need to use the 'margin' 
       property to complete this challenge.
    🛟 hint.md for help!
 */

body {
    display: grid;
    grid-template-columns: 1em 1fr 1em;
    grid-template-areas:
        ".... .... ...." 
        ".... head ...."
        ".... main ...."
        ".... foot ...."
        ".... .... ....";
    gap: 1em 0;
}

.site-header {
    grid-area: head;
}

footer {
    grid-area: foot;
}

/* =================
    Main Element Layout 
   ================= */
   
main {
    grid-area: main;
    display: grid;
    gap: 1em;
    grid-template-columns: 1fr;
    grid-template-areas: 
        "tech"
        "envi"
        "nasa"
        "phys"
        "heal";     
}

@media(min-width: 500px) {
    main {
        grid-template-columns: 1fr 1fr;
        grid-template-areas: 
            "tech tech"
            "envi nasa"
            "phys nasa"
            "heal heal"
    } 
}
   
@media(min-width: 870px){
    main {
        grid-template-columns: repeat(12, 1fr);
        grid-template-columns: repeat(9, 1fr) repeat(3, minmax(70px, 1fr));
        grid-template-areas: 
            "tech tech tech tech tech tech envi envi envi nasa nasa nasa"
            "phys phys phys heal heal heal heal heal heal nasa nasa nasa"
    }
}

.technology {
    grid-area: tech;
}
    
.environment {
    grid-area: envi;
}

.nasa {
    grid-area: nasa;
}

.physics { 
    grid-area: phys;
}

.health {
    grid-area: heal;
}

/* =================
    Article Card 
   ================= */
   
a:hover, a:focus {
    filter: brightness(0.9);
}

a:focus {
    outline: 3px solid #5a5a5a;
    box-shadow: 0 0 0 3px rgba(135,18,113,0.5); 
    transition: outline 0.2s ease, box-shadow 0.2s ease;
}

article {
    border-radius: 0.2em;
    background-color: #e5e5e5;
    height: 100%;
}

.article-header {
    box-sizing: border-box;
    padding: 1em;
    width: 100%;
}


/* =================
    Typography 
   ================= */

h1 {
    color: #0F0F0F; 
    letter-spacing: 0.04em;
    font-family: "Source Code Pro", sans-serif;
    margin: 0;
    padding: 0;
}

a {
    text-decoration: none;
}

h2 {
    font-size: 0.88rem;
    color: #5D0E50;
    margin: 0;
    letter-spacing: 0.065em;
    text-transform: uppercase;
}

h3 {
    font-size: 1rem;
    margin: .4em 0;
    letter-spacing: 0.03em;
    color: #111111;
    font-weight: 500;
}

p {
    margin: 0;
    font-size: .85rem;
    color: #7c7c7c;
}

/* =================
    Images 
   ================= */

img {
    width: 100%;
    border-top-left-radius: .2em;
    border-top-right-radius: .2em;
}

// =======================================================================
// Solo Project: Learning Journal
// =======================================================================

// Solo project requirments
// Build each page from scratch
// Make all pages responsive
    // Relative units
    // Mobile-first design
    // Media queries
    // Viewport meta tag

// Stretch goals
// Make it your own!
// Add custom images
// Make the content about your learning experiences
// Add new pages
// Display other recent posts after clicking "View More"
// Display a hamburger menu on mobile devices

// =======================================================================
// SSH/GPG Keys in Github
// =======================================================================

// A method for securely passing data from one place to another
// Provides a very high level of confidence that data is coming from the
// it claims to be coming from

// =======================================================================
// Intro to APIs & BoredBot
// =======================================================================

// =======================================================================
// Intro

// Why APIs?
// Access real data
// Build more interesting apps
// Prepare to learn full-stack

// =======================================================================
// What is an API?

// Application Programming Interface
// An API is any tool that helps connect your program with someone
// else's program.

// API Examples
// Getting data from a server
// The server hots "An API" - exposes "endpoints" we can access for
// getting data from the server.

// Pre-written code we can use to build applications
// DOM API (.getElementById, e.g)

// =======================================================================
// Clients & Servers

// A client is any device that connects to the internet to get data
// from somewhere (makes a 'request').

// A service is just a computer. Accepts requests from clients asking for
// something, then responds to the client with the data it asked for.

// =======================================================================
// JSON Review

// JavaScript Object Notation

// =======================================================================
// First fetch

/**
Challenge:

1. Google for "how to use fetch with json"
2. Should find a top result from MDN
3. MANUALLY copy over the fetch, but using the URL below 👇
    https://dog.ceo/api/breeds/image/random
*/

async function getData() {
  const url = "https://dog.ceo/api/breeds/image/random";
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Response status: ${response.status}`);
    }

    const json = await response.json();
    console.log(json);
  } catch (error) {
    console.error(error.message);
  }
}

// Instructor Solution

fetch("https://dog.ceo/api/breeds/image/random")
    .then(response => response.json())
    .then(data => console.log(data))

// {message: 'https://images.dog.ceo/breeds/terrier-australian/n02096294_6213.jpg', status: 'success'}

// =======================================================================
// Dog API Fetch and DOM Practise

/**
Challenge:

1. Fetch a random image from the Dog API again 
(https://dog.ceo/api/breeds/image/random)

2. Access the DOM and insert the URL you got from the
API as an image `src` property (probably easiest if 
you create the image completely here in the JS and add 
it as the innerHTML of another element on the DOM)
*/

fetch("https://dog.ceo/api/breeds/image/random")
    // turns the response into a JSON/JS object
    .then(response => response.json())
    .then(data => {
        const imgURL = data.message
        const imgL = document.createElement("img")
        const imgContainter = document.getElementById("domIMG")
        imgL.src = imgURL
        imgContainter.innerHTML = imgL.outerHTML
    })

// Instructor Solution

fetch("https://dog.ceo/api/breeds/image/random")
    .then(response => response.json())
    .then(data => {
        console.log(data)
        document.getElementById("image-container").innerHTML = `
            <img src="${data.message}" />
        `
    })

// =======================================================================
// Fetch idea from Bored API

/**
Challenge: 

1. Fetch a random activity from the Bored API
url: https://apis.scrimba.com/bored/api/activity

2. Display the text of the activity in the browser
*/

fetch("https://apis.scrimba.com/bored/api/activity")
    .then(response => response.json())
    .then(data => {
        const text = document.getElementById('textContainer')
        const textHTML = `<h1>${data.activity}</h1>`
        text.innerHTML = textHTML
    })

// Instructor Solution

fetch("https://apis.scrimba.com/bored/api/activity")
    .then(response => response.json())
    .then(data => {
        console.log(data)
        document.getElementById("activity-name").textContent = data.activity
    })

// =======================================================================
// BoredBot - HTML

/**
Challenge: 

- Start building out the BoredBot Skeleton however you'd like. 
    That will include:
    - A title for the app ("BoredBot" might be a good start 😉)
    - A placeholder element that will be populated with the random 
      idea we get from the API
    - A button to click for triggering the GET request to the Bored API. 
      (Don't worry about implementing the button quite yet)
*/

<html>
    <head>
        <link rel="stylesheet" href="index.css">
    </head>
    <body>
        <title>BoredBot</title>
        <div class="activityPlaceholder" id="activityPlaceholder"></div>
        <button class="boredButton" id="boredButton"></button>
        <script src="index.js"></script>
    </body>
</html>

// Instructor Solution

<html>
    <head>
        <link rel="stylesheet" href="index.css">
    </head>
    <body>
        <h1>🤖 BoredBot 🤖</h1>
        <h4>Find something to do</h4>
        <button></button>
        <script src="index.js"></script>
    </body>
</html>

// =======================================================================
// BoredBot - CSS

/**
Challenge: 

- Add some styling! Be creative, play with layout a bit
  (Spoiler: I'm going to use a single-column flexbox layout)
  add some color, grab a font from Google fonts - whatever
  you'd like!
*/

<div class="container">
    <h1>🤖 BoredBot 🤖</h1>
    <h4>Find something to do</h4>
    <button></button>  
</div>


.container{
    display: flex;
    flex-direction: column;
    align-items: center;
}

button {
    padding: 3rem;
    border-radius: 50%;
    border: none;
    background-color: red;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    
}

button:hover {
    transform: translateY(-3px);
    background-color: crimson;
    transition: all 0.3s ease;
    cursor: pointer;
}

// =======================================================================
// BoredBot - JavaScript

const textContainer = document.getElementById('boredActivity')
const buttonElement = document.getElementById('buttonClicker')

buttonElement.addEventListener('click', () => {
  fetch('https://apis.scrimba.com/bored/api/activity')
    .then(response => response.json())
    .then(data => {
      const activity = data.activity
      textContainer.textContent = activity
    })
})

// =======================================================================
// BoredBot - Improve A11y

// Challenge: 
// Try to find 4 changes we could make to our code that would greatly
// improve the app's accessibility for those using assistive technologies

<body>
    <main>			
        <h1 id="title" aria-label="Happy Bot">🤖 BoredBot 🤖</h1>
        <p id="activity" aria-live="Updates new activity">Find something to do</p>
        <button id="get-activity" aria-label="button"></button>
    </main>
    <script src="index.js"></script>
</body>

// Instructor Solution

// When aria-live's attribute is set to polite, assistive technologies will notify users of updates but generally do not interrupt the current task, with the updates having a low priority. When set to assertive, assistive technologies immediately notify the user, potentially clearing the speech queue of previous updates.

// =======================================================================
// URLS, REST & BlogSpace
// =======================================================================

// =======================================================================
// HTTP Requests

// Request/Response Cycle
// Request
// When a client (e.g your computer) asks for a 'resource' from a server.

// Response
// When a sever responds (whether it worked or not) to the client.

// Hypertext Transfer Protocol (HTTP)
// The protocol used to transfer data over the web.
// A protocol is an agreed-upon, standard way of doing something
// HTTP is a protocol for determining how Hypertext (text) should be 
// transferred over the internet. 

// Components of a request
// 1. Path (URL)
// 2. Method (GET, POST, PUT, DELETE)
// 3. Body (only for POST and PUT requests)
// 4. Headers (metadata about the request)

/**
 * Challenge:
 * 
 * Send a request to the JSON Placeholder API using `fetch`
 * URL: https://apis.scrimba.com/jsonplaceholder/posts
 * 
 * Documentation: https://jsonplaceholder.typicode.com/
 * 
 * Log the response data to the console
 */

fetch('https://apis.scrimba.com/jsonplaceholder/posts')
    .then(response => response.json())
    .then(data => console.log(data))

// =============================

// Challenge

// 1. What does HTTP stand for?
// Hypertext Transfer Protocol

// 2. How would you describe what a protocol is to a complete newbie?
// An agreed-upon, standard way of doing something

// 3. Which part of this URL describes the protocol?: 
// https://apis.scrimba.com/jsonplaceholder/posts

// 4. If you had to guess, which request method (GET, POST, PUT, DELETE) would you
// think we made in the previous challenge when we asked for data from the 
// JSON Placeholder API?
// GET!

// =======================================================================
// Requests - URLs and Endpoints

// Path (URL)
// Address where your desired resource 'lives'
// BaseURL vs Endpoint
// BaseURL - htpps://apis.scrimba.com/jsonplaceholder
// Endpoint: /posts
// Full URL: htpps://apis.scrimba.com/jsonplaceholder/posts

// 1. What's the difference between a Base URL and an Endpoint?
// The base URL is the part of the URL that does not change. For example,
// https://google.com/. However, the endpoint does vary depending on what is
// being requested e.g https://google.com/images, https://google.com/maps 


// Given the following URLs from an example API:
// * https://blahblahblah.com/api/v2/users
// * https://blahblahblah.com/api/v2/products
// * https://blahblahblah.com/api/v2/products/123

// 2. Which part is the Base URL?

// https://blahblahblah.com/api/v2/

// 3. What are the available endpoints?

// users
// products
// products/*some id*

// =======================================================================
// Requests - Methods

// GET - Getting data
// POST - Adding new data
// PUT - Updating exisiting data
// DELETE - Removing data
// PATCH - Partially updating existing data

/**
Challenge: 

Fetch a list of todos from the JSON Placeholder API:

BaseURL: https://apis.scrimba.com/jsonplaceholder/
Endpoint: /todos

This time however, explicitly set the request method to "GET"
console.log the results
*/

fetch('https://apis.scrimba.com/jsonplaceholder/todos', {method: "GET"})
    .then(response => response.json())
    .then(data => console.log(data))

// =======================================================================
// BlogSpace - GET first 5 blog posts

/**
 Challenge:
 
 GET a list of blog posts from the JSON Placeholder API.
 
 BaseURL: https://apis.scrimba.com/jsonplaceholder/
 Endpoint: /posts
 
 Since there's so many posts, let's limit the array to just 5 items.
 You can use the `.slice()` array method to just grab the first 5 objects
 from the data array that comes back from the API
 
 Log the 5 items to the console
 */

 fetch('https://apis.scrimba.com/jsonplaceholder/posts')
    .then(res => res.json())
    .then(data => {
        const slicedArray = data.slice(0, 5)
        console.log(slicedArray)
        })

// =======================================================================
// BlogSpace - Display blogs on page

/**
 Challenge:

 With the 5 blog post objects, display the `title` and `body`
properties of the first 5 posts on the browser page.
 
 Hints: 
 * Create a `div` in the HTML file to store these items
 * Loop over the items creating a string of HTML elements you 
   can then put into the div with `innerHTML`
 */

fetch("https://apis.scrimba.com/jsonplaceholder/posts")
    .then(res => res.json())
    .then(data => {
        const postsArr = data.slice(0, 5)
        const apiContainer = document.getElementById('apiContainer')
        const postGenerator = ((arr) => {
            return arr.map((post) => {
                const { userId, id, title, body } = post
                return `
                <h2>${title}</h2>
                <p>${body}</p>
            `
            }).join('')
        })
        apiContainer.innerHTML = postGenerator(postsArr)
    })

// =======================================================================
// BlogSpace - Add styling

// =======================================================================
// BlogSpace - New post form

// =======================================================================
// BlogSpace - Add style to form

// =======================================================================
// BlogSpace - Form submit event listener

// =======================================================================
// Requests - Body

// =======================================================================
// Requests - Headers

// =======================================================================
// BlogSpace - Send new post to server

// =======================================================================
// BlogSpace - Add new post to list of posts

// =======================================================================
// BlogSpace - Posts Refactor

// =======================================================================
// BlogSpace - Reset form

// =======================================================================
// REST

// =======================================================================
// REST API Design

// =======================================================================
// Nested Resources

// =======================================================================
// URL Parameters - JSON Placeholder API

// =======================================================================
// Query Strings

// =======================================================================
// Query Strings Practice - OpenWeatherMap API

// =======================================================================
// Solo Project - Color Scheme Generator

// =======================================================================
// 